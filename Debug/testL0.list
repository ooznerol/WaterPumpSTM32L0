
testL0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb4  08006cb4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb4  08006cb4  00016cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cbc  08006cbc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cc0  08006cc0  00016cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000088  08006d4c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08006d4c  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc0b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bf4  00000000  00000000  0002fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  000328b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  00033820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000134a6  00000000  00000000  00034610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e794  00000000  00000000  00047ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072ab5  00000000  00000000  0005624a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8cff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  000c8d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080063e8 	.word	0x080063e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080063e8 	.word	0x080063e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f005 f997 	bl	8005794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 ff60 	bl	800135e <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 ff2d 	bl	8001314 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000020 	.word	0x20000020

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200004bc 	.word	0x200004bc

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200004bc 	.word	0x200004bc

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff fff0 	bl	80004e4 <HAL_GetTick>
 8000504:	0003      	movs	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x20>
  {
    wait++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	f7ff ffe3 	bl	80004e4 <HAL_GetTick>
 800051e:	0002      	movs	r2, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8f7      	bhi.n	800051a <HAL_Delay+0x22>
  {
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d101      	bne.n	8000546 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
 8000544:	e159      	b.n	80007fa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10a      	bne.n	8000564 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2250      	movs	r2, #80	; 0x50
 8000558:	2100      	movs	r1, #0
 800055a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	0018      	movs	r0, r3
 8000560:	f005 f92c 	bl	80057bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000568:	2210      	movs	r2, #16
 800056a:	4013      	ands	r3, r2
 800056c:	2b10      	cmp	r3, #16
 800056e:	d005      	beq.n	800057c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	2204      	movs	r2, #4
 8000578:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800057a:	d00b      	beq.n	8000594 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000580:	2210      	movs	r2, #16
 8000582:	431a      	orrs	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2250      	movs	r2, #80	; 0x50
 800058c:	2100      	movs	r1, #0
 800058e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e132      	b.n	80007fa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000598:	4a9a      	ldr	r2, [pc, #616]	; (8000804 <HAL_ADC_Init+0x2d0>)
 800059a:	4013      	ands	r3, r2
 800059c:	2202      	movs	r2, #2
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	2203      	movs	r2, #3
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d108      	bne.n	80005c4 <HAL_ADC_Init+0x90>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4013      	ands	r3, r2
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d101      	bne.n	80005c4 <HAL_ADC_Init+0x90>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <HAL_ADC_Init+0x92>
 80005c4:	2300      	movs	r3, #0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d149      	bne.n	800065e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	23c0      	movs	r3, #192	; 0xc0
 80005d0:	061b      	lsls	r3, r3, #24
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d00b      	beq.n	80005ee <HAL_ADC_Init+0xba>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	05db      	lsls	r3, r3, #23
 80005de:	429a      	cmp	r2, r3
 80005e0:	d005      	beq.n	80005ee <HAL_ADC_Init+0xba>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d111      	bne.n	8000612 <HAL_ADC_Init+0xde>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	691a      	ldr	r2, [r3, #16]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	0092      	lsls	r2, r2, #2
 80005fa:	0892      	lsrs	r2, r2, #2
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6919      	ldr	r1, [r3, #16]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	430a      	orrs	r2, r1
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	e014      	b.n	800063c <HAL_ADC_Init+0x108>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691a      	ldr	r2, [r3, #16]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	0892      	lsrs	r2, r2, #2
 8000620:	611a      	str	r2, [r3, #16]
 8000622:	4b79      	ldr	r3, [pc, #484]	; (8000808 <HAL_ADC_Init+0x2d4>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	4b78      	ldr	r3, [pc, #480]	; (8000808 <HAL_ADC_Init+0x2d4>)
 8000628:	4978      	ldr	r1, [pc, #480]	; (800080c <HAL_ADC_Init+0x2d8>)
 800062a:	400a      	ands	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	4b76      	ldr	r3, [pc, #472]	; (8000808 <HAL_ADC_Init+0x2d4>)
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	4b74      	ldr	r3, [pc, #464]	; (8000808 <HAL_ADC_Init+0x2d4>)
 8000638:	430a      	orrs	r2, r1
 800063a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	68da      	ldr	r2, [r3, #12]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2118      	movs	r1, #24
 8000648:	438a      	bics	r2, r1
 800064a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68d9      	ldr	r1, [r3, #12]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	430a      	orrs	r2, r1
 800065c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <HAL_ADC_Init+0x2d4>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_ADC_Init+0x2d4>)
 8000664:	496a      	ldr	r1, [pc, #424]	; (8000810 <HAL_ADC_Init+0x2dc>)
 8000666:	400a      	ands	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800066a:	4b67      	ldr	r3, [pc, #412]	; (8000808 <HAL_ADC_Init+0x2d4>)
 800066c:	6819      	ldr	r1, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	065a      	lsls	r2, r3, #25
 8000674:	4b64      	ldr	r3, [pc, #400]	; (8000808 <HAL_ADC_Init+0x2d4>)
 8000676:	430a      	orrs	r2, r1
 8000678:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	055b      	lsls	r3, r3, #21
 8000684:	4013      	ands	r3, r2
 8000686:	d108      	bne.n	800069a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	0549      	lsls	r1, r1, #21
 8000696:	430a      	orrs	r2, r1
 8000698:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68da      	ldr	r2, [r3, #12]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	495b      	ldr	r1, [pc, #364]	; (8000814 <HAL_ADC_Init+0x2e0>)
 80006a6:	400a      	ands	r2, r1
 80006a8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68d9      	ldr	r1, [r3, #12]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d101      	bne.n	80006c0 <HAL_ADC_Init+0x18c>
 80006bc:	2304      	movs	r3, #4
 80006be:	e000      	b.n	80006c2 <HAL_ADC_Init+0x18e>
 80006c0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80006c2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2020      	movs	r0, #32
 80006c8:	5c1b      	ldrb	r3, [r3, r0]
 80006ca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80006cc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	202c      	movs	r0, #44	; 0x2c
 80006d2:	5c1b      	ldrb	r3, [r3, r0]
 80006d4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80006d6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80006dc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80006e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80006ec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006fa:	23c2      	movs	r3, #194	; 0xc2
 80006fc:	33ff      	adds	r3, #255	; 0xff
 80006fe:	429a      	cmp	r2, r3
 8000700:	d00b      	beq.n	800071a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	68d9      	ldr	r1, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000710:	431a      	orrs	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	430a      	orrs	r2, r1
 8000718:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2221      	movs	r2, #33	; 0x21
 800071e:	5c9b      	ldrb	r3, [r3, r2]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d11a      	bne.n	800075a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2220      	movs	r2, #32
 8000728:	5c9b      	ldrb	r3, [r3, r2]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d109      	bne.n	8000742 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0249      	lsls	r1, r1, #9
 800073c:	430a      	orrs	r2, r1
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	e00b      	b.n	800075a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000746:	2220      	movs	r2, #32
 8000748:	431a      	orrs	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	2201      	movs	r2, #1
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800075e:	2b01      	cmp	r3, #1
 8000760:	d11f      	bne.n	80007a2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	691a      	ldr	r2, [r3, #16]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	492a      	ldr	r1, [pc, #168]	; (8000818 <HAL_ADC_Init+0x2e4>)
 800076e:	400a      	ands	r2, r1
 8000770:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6919      	ldr	r1, [r3, #16]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000780:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000786:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	430a      	orrs	r2, r1
 800078e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	691a      	ldr	r2, [r3, #16]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2101      	movs	r1, #1
 800079c:	430a      	orrs	r2, r1
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	e00e      	b.n	80007c0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4013      	ands	r3, r2
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d107      	bne.n	80007c0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	691a      	ldr	r2, [r3, #16]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2101      	movs	r1, #1
 80007bc:	438a      	bics	r2, r1
 80007be:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	695a      	ldr	r2, [r3, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2107      	movs	r1, #7
 80007cc:	438a      	bics	r2, r1
 80007ce:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6959      	ldr	r1, [r3, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	430a      	orrs	r2, r1
 80007e0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007ec:	2203      	movs	r2, #3
 80007ee:	4393      	bics	r3, r2
 80007f0:	2201      	movs	r2, #1
 80007f2:	431a      	orrs	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	fffffefd 	.word	0xfffffefd
 8000808:	40012708 	.word	0x40012708
 800080c:	ffc3ffff 	.word	0xffc3ffff
 8000810:	fdffffff 	.word	0xfdffffff
 8000814:	fffe0219 	.word	0xfffe0219
 8000818:	fffffc03 	.word	0xfffffc03

0800081c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	2204      	movs	r2, #4
 8000834:	4013      	ands	r3, r2
 8000836:	d156      	bne.n	80008e6 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2250      	movs	r2, #80	; 0x50
 800083c:	5c9b      	ldrb	r3, [r3, r2]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d101      	bne.n	8000846 <HAL_ADC_Start_IT+0x2a>
 8000842:	2302      	movs	r3, #2
 8000844:	e056      	b.n	80008f4 <HAL_ADC_Start_IT+0xd8>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2250      	movs	r2, #80	; 0x50
 800084a:	2101      	movs	r1, #1
 800084c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d007      	beq.n	8000866 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000856:	230f      	movs	r3, #15
 8000858:	18fc      	adds	r4, r7, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fa73 	bl	8000d48 <ADC_Enable>
 8000862:	0003      	movs	r3, r0
 8000864:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000866:	230f      	movs	r3, #15
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d13e      	bne.n	80008ee <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <HAL_ADC_Start_IT+0xe0>)
 8000876:	4013      	ands	r3, r2
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2250      	movs	r2, #80	; 0x50
 800088c:	2100      	movs	r1, #0
 800088e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	221c      	movs	r2, #28
 8000896:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	2b08      	cmp	r3, #8
 800089e:	d110      	bne.n	80008c2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2104      	movs	r1, #4
 80008ac:	438a      	bics	r2, r1
 80008ae:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	685a      	ldr	r2, [r3, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2118      	movs	r1, #24
 80008bc:	430a      	orrs	r2, r1
 80008be:	605a      	str	r2, [r3, #4]
          break;
 80008c0:	e008      	b.n	80008d4 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	211c      	movs	r1, #28
 80008ce:	430a      	orrs	r2, r1
 80008d0:	605a      	str	r2, [r3, #4]
          break;
 80008d2:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2104      	movs	r1, #4
 80008e0:	430a      	orrs	r2, r1
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	e003      	b.n	80008ee <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80008e6:	230f      	movs	r3, #15
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	2202      	movs	r2, #2
 80008ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008ee:	230f      	movs	r3, #15
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	781b      	ldrb	r3, [r3, #0]
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b005      	add	sp, #20
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	fffff0fe 	.word	0xfffff0fe

08000900 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000908:	230f      	movs	r3, #15
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2250      	movs	r2, #80	; 0x50
 8000914:	5c9b      	ldrb	r3, [r3, r2]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d101      	bne.n	800091e <HAL_ADC_Stop_IT+0x1e>
 800091a:	2302      	movs	r3, #2
 800091c:	e032      	b.n	8000984 <HAL_ADC_Stop_IT+0x84>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2250      	movs	r2, #80	; 0x50
 8000922:	2101      	movs	r1, #1
 8000924:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000926:	250f      	movs	r5, #15
 8000928:	197c      	adds	r4, r7, r5
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	0018      	movs	r0, r3
 800092e:	f000 facb 	bl	8000ec8 <ADC_ConversionStop>
 8000932:	0003      	movs	r3, r0
 8000934:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000936:	197b      	adds	r3, r7, r5
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d11b      	bne.n	8000976 <HAL_ADC_Stop_IT+0x76>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	211c      	movs	r1, #28
 800094a:	438a      	bics	r2, r1
 800094c:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800094e:	250f      	movs	r5, #15
 8000950:	197c      	adds	r4, r7, r5
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fa57 	bl	8000e08 <ADC_Disable>
 800095a:	0003      	movs	r3, r0
 800095c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800095e:	197b      	adds	r3, r7, r5
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d107      	bne.n	8000976 <HAL_ADC_Stop_IT+0x76>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_ADC_Stop_IT+0x8c>)
 800096c:	4013      	ands	r3, r2
 800096e:	2201      	movs	r2, #1
 8000970:	431a      	orrs	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2250      	movs	r2, #80	; 0x50
 800097a:	2100      	movs	r1, #0
 800097c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800097e:	230f      	movs	r3, #15
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	b004      	add	sp, #16
 800098a:	bdb0      	pop	{r4, r5, r7, pc}
 800098c:	fffffefe 	.word	0xfffffefe

08000990 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2317      	movs	r3, #23
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2204      	movs	r2, #4
 80009ac:	4013      	ands	r3, r2
 80009ae:	d15e      	bne.n	8000a6e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2250      	movs	r2, #80	; 0x50
 80009b4:	5c9b      	ldrb	r3, [r3, r2]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d101      	bne.n	80009be <HAL_ADC_Start_DMA+0x2e>
 80009ba:	2302      	movs	r3, #2
 80009bc:	e05e      	b.n	8000a7c <HAL_ADC_Start_DMA+0xec>
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2250      	movs	r2, #80	; 0x50
 80009c2:	2101      	movs	r1, #1
 80009c4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d007      	beq.n	80009de <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80009ce:	2317      	movs	r3, #23
 80009d0:	18fc      	adds	r4, r7, r3
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 f9b7 	bl	8000d48 <ADC_Enable>
 80009da:	0003      	movs	r3, r0
 80009dc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009de:	2317      	movs	r3, #23
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d146      	bne.n	8000a76 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ec:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <HAL_ADC_Start_DMA+0xf4>)
 80009ee:	4013      	ands	r3, r2
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	431a      	orrs	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2250      	movs	r2, #80	; 0x50
 8000a04:	2100      	movs	r1, #0
 8000a06:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_ADC_Start_DMA+0xf8>)
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_ADC_Start_DMA+0xfc>)
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <HAL_ADC_Start_DMA+0x100>)
 8000a1e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	221c      	movs	r2, #28
 8000a26:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2110      	movs	r1, #16
 8000a34:	430a      	orrs	r2, r1
 8000a36:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3340      	adds	r3, #64	; 0x40
 8000a52:	0019      	movs	r1, r3
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f000 fd06 	bl	8001468 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2104      	movs	r1, #4
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	e003      	b.n	8000a76 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000a6e:	2317      	movs	r3, #23
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	2202      	movs	r2, #2
 8000a74:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a76:	2317      	movs	r3, #23
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	781b      	ldrb	r3, [r3, #0]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b007      	add	sp, #28
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	fffff0fe 	.word	0xfffff0fe
 8000a88:	08000f55 	.word	0x08000f55
 8000a8c:	08001009 	.word	0x08001009
 8000a90:	08001027 	.word	0x08001027

08000a94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d106      	bne.n	8000ab8 <HAL_ADC_IRQHandler+0x24>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d00d      	beq.n	8000ad4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2208      	movs	r2, #8
 8000ac0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d154      	bne.n	8000b70 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2208      	movs	r2, #8
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d14d      	bne.n	8000b70 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad8:	2210      	movs	r2, #16
 8000ada:	4013      	ands	r3, r2
 8000adc:	d106      	bne.n	8000aec <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0092      	lsls	r2, r2, #2
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	23c0      	movs	r3, #192	; 0xc0
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	4013      	ands	r3, r2
 8000af8:	d12e      	bne.n	8000b58 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2220      	movs	r2, #32
 8000afe:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d129      	bne.n	8000b58 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d122      	bne.n	8000b58 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	2204      	movs	r2, #4
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	d110      	bne.n	8000b40 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	210c      	movs	r1, #12
 8000b2a:	438a      	bics	r2, r1
 8000b2c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b32:	4a35      	ldr	r2, [pc, #212]	; (8000c08 <HAL_ADC_IRQHandler+0x174>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	2201      	movs	r2, #1
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	655a      	str	r2, [r3, #84]	; 0x54
 8000b3e:	e00b      	b.n	8000b58 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b44:	2220      	movs	r2, #32
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	2201      	movs	r2, #1
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 fdde 	bl	800471c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d003      	beq.n	8000b70 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2b80      	cmp	r3, #128	; 0x80
 8000b7c:	d115      	bne.n	8000baa <HAL_ADC_IRQHandler+0x116>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b80      	cmp	r3, #128	; 0x80
 8000b8a:	d10e      	bne.n	8000baa <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	0252      	lsls	r2, r2, #9
 8000b94:	431a      	orrs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 f83d 	bl	8000c1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b10      	cmp	r3, #16
 8000bb6:	d123      	bne.n	8000c00 <HAL_ADC_IRQHandler+0x16c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	d11c      	bne.n	8000c00 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d006      	beq.n	8000bdc <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d10d      	bne.n	8000bf8 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be0:	2202      	movs	r2, #2
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2210      	movs	r2, #16
 8000bee:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f81a 	bl	8000c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	601a      	str	r2, [r3, #0]
  }
  
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	fffffefe 	.word	0xfffffefe

08000c0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2250      	movs	r2, #80	; 0x50
 8000c4a:	5c9b      	ldrb	r3, [r3, r2]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x18>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e06c      	b.n	8000d2e <HAL_ADC_ConfigChannel+0xf2>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2250      	movs	r2, #80	; 0x50
 8000c58:	2101      	movs	r1, #1
 8000c5a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	2204      	movs	r2, #4
 8000c64:	4013      	ands	r3, r2
 8000c66:	d00b      	beq.n	8000c80 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2250      	movs	r2, #80	; 0x50
 8000c78:	2100      	movs	r1, #0
 8000c7a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e056      	b.n	8000d2e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <HAL_ADC_ConfigChannel+0xfc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d028      	beq.n	8000cdc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	035b      	lsls	r3, r3, #13
 8000c96:	0b5a      	lsrs	r2, r3, #13
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	02db      	lsls	r3, r3, #11
 8000ca8:	4013      	ands	r3, r2
 8000caa:	d009      	beq.n	8000cc0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	0409      	lsls	r1, r1, #16
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f000 f9ce 	bl	800105c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	029b      	lsls	r3, r3, #10
 8000cc8:	4013      	ands	r3, r2
 8000cca:	d02b      	beq.n	8000d24 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	03c9      	lsls	r1, r1, #15
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e023      	b.n	8000d24 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	035b      	lsls	r3, r3, #13
 8000ce8:	0b5b      	lsrs	r3, r3, #13
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	02db      	lsls	r3, r3, #11
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d005      	beq.n	8000d0c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <HAL_ADC_ConfigChannel+0x104>)
 8000d08:	400a      	ands	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	029b      	lsls	r3, r3, #10
 8000d14:	4013      	ands	r3, r2
 8000d16:	d005      	beq.n	8000d24 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <HAL_ADC_ConfigChannel+0x100>)
 8000d1e:	4909      	ldr	r1, [pc, #36]	; (8000d44 <HAL_ADC_ConfigChannel+0x108>)
 8000d20:	400a      	ands	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2250      	movs	r2, #80	; 0x50
 8000d28:	2100      	movs	r1, #0
 8000d2a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	00001001 	.word	0x00001001
 8000d3c:	40012708 	.word	0x40012708
 8000d40:	ff7fffff 	.word	0xff7fffff
 8000d44:	ffbfffff 	.word	0xffbfffff

08000d48 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d108      	bne.n	8000d74 <ADC_Enable+0x2c>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d101      	bne.n	8000d74 <ADC_Enable+0x2c>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <ADC_Enable+0x2e>
 8000d74:	2300      	movs	r3, #0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d13f      	bne.n	8000dfa <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <ADC_Enable+0xbc>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8a:	2210      	movs	r2, #16
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	2201      	movs	r2, #1
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e02c      	b.n	8000dfc <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 f952 	bl	800105c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000db8:	f7ff fb94 	bl	80004e4 <HAL_GetTick>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dc0:	e014      	b.n	8000dec <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000dc2:	f7ff fb8f 	bl	80004e4 <HAL_GetTick>
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b0a      	cmp	r3, #10
 8000dce:	d90d      	bls.n	8000dec <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	2201      	movs	r2, #1
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e007      	b.n	8000dfc <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d1e3      	bne.n	8000dc2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	80000017 	.word	0x80000017

08000e08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d108      	bne.n	8000e34 <ADC_Disable+0x2c>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <ADC_Disable+0x2c>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <ADC_Disable+0x2e>
 8000e34:	2300      	movs	r3, #0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d041      	beq.n	8000ebe <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2205      	movs	r2, #5
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d110      	bne.n	8000e6a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2102      	movs	r1, #2
 8000e54:	430a      	orrs	r2, r1
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e60:	f7ff fb40 	bl	80004e4 <HAL_GetTick>
 8000e64:	0003      	movs	r3, r0
 8000e66:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000e68:	e022      	b.n	8000eb0 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6e:	2210      	movs	r2, #16
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e01c      	b.n	8000ec0 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e86:	f7ff fb2d 	bl	80004e4 <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b0a      	cmp	r3, #10
 8000e92:	d90d      	bls.n	8000eb0 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e98:	2210      	movs	r2, #16
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e007      	b.n	8000ec0 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d0e3      	beq.n	8000e86 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b004      	add	sp, #16
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2204      	movs	r2, #4
 8000edc:	4013      	ands	r3, r2
 8000ede:	d034      	beq.n	8000f4a <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d10d      	bne.n	8000f0a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000ef8:	d107      	bne.n	8000f0a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2110      	movs	r1, #16
 8000f06:	430a      	orrs	r2, r1
 8000f08:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f0a:	f7ff faeb 	bl	80004e4 <HAL_GetTick>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000f12:	e014      	b.n	8000f3e <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000f14:	f7ff fae6 	bl	80004e4 <HAL_GetTick>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b0a      	cmp	r3, #10
 8000f20:	d90d      	bls.n	8000f3e <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f26:	2210      	movs	r2, #16
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	2201      	movs	r2, #1
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e006      	b.n	8000f4c <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2204      	movs	r2, #4
 8000f46:	4013      	ands	r3, r2
 8000f48:	d1e4      	bne.n	8000f14 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b004      	add	sp, #16
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f66:	2250      	movs	r2, #80	; 0x50
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d141      	bne.n	8000ff0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	431a      	orrs	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	23c0      	movs	r3, #192	; 0xc0
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4013      	ands	r3, r2
 8000f86:	d12e      	bne.n	8000fe6 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d129      	bne.n	8000fe6 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d122      	bne.n	8000fe6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d110      	bne.n	8000fce <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	210c      	movs	r1, #12
 8000fb8:	438a      	bics	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <ADC_DMAConvCplt+0xb0>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	655a      	str	r2, [r3, #84]	; 0x54
 8000fcc:	e00b      	b.n	8000fe6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	2201      	movs	r2, #1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f003 fb97 	bl	800471c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000fee:	e005      	b.n	8000ffc <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	0010      	movs	r0, r2
 8000ffa:	4798      	blx	r3
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b004      	add	sp, #16
 8001002:	bd80      	pop	{r7, pc}
 8001004:	fffffefe 	.word	0xfffffefe

08001008 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff fdf7 	bl	8000c0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}

08001026 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001038:	2240      	movs	r2, #64	; 0x40
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	2204      	movs	r2, #4
 8001046:	431a      	orrs	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fdec 	bl	8000c2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}

0800105c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <ADC_DelayMicroSecond+0x34>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	490a      	ldr	r1, [pc, #40]	; (8001094 <ADC_DelayMicroSecond+0x38>)
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff f84c 	bl	8000108 <__udivsi3>
 8001070:	0003      	movs	r3, r0
 8001072:	001a      	movs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4353      	muls	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800107a:	e002      	b.n	8001082 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3b01      	subs	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f9      	bne.n	800107c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000020 	.word	0x20000020
 8001094:	000f4240 	.word	0x000f4240

08001098 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a2:	2317      	movs	r3, #23
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2250      	movs	r2, #80	; 0x50
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_ADCEx_Calibration_Start+0x28>
 80010bc:	2302      	movs	r3, #2
 80010be:	e07a      	b.n	80011b6 <HAL_ADCEx_Calibration_Start+0x11e>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2250      	movs	r2, #80	; 0x50
 80010c4:	2101      	movs	r1, #1
 80010c6:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2203      	movs	r2, #3
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_ADCEx_Calibration_Start+0x50>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	4013      	ands	r3, r2
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_ADCEx_Calibration_Start+0x50>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_ADCEx_Calibration_Start+0x52>
 80010e8:	2300      	movs	r3, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d152      	bne.n	8001194 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <HAL_ADCEx_Calibration_Start+0x128>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	2202      	movs	r2, #2
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2103      	movs	r1, #3
 8001116:	438a      	bics	r2, r1
 8001118:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	0609      	lsls	r1, r1, #24
 8001128:	430a      	orrs	r2, r1
 800112a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800112c:	f7ff f9da 	bl	80004e4 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001134:	e014      	b.n	8001160 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001136:	f7ff f9d5 	bl	80004e4 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d90d      	bls.n	8001160 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001148:	2212      	movs	r2, #18
 800114a:	4393      	bics	r3, r2
 800114c:	2210      	movs	r2, #16
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2250      	movs	r2, #80	; 0x50
 8001158:	2100      	movs	r1, #0
 800115a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e02a      	b.n	80011b6 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	0fdb      	lsrs	r3, r3, #31
 8001168:	07da      	lsls	r2, r3, #31
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	061b      	lsls	r3, r3, #24
 800116e:	429a      	cmp	r2, r3
 8001170:	d0e1      	beq.n	8001136 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68d9      	ldr	r1, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	430a      	orrs	r2, r1
 8001180:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001186:	2203      	movs	r2, #3
 8001188:	4393      	bics	r3, r2
 800118a:	2201      	movs	r2, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
 8001192:	e009      	b.n	80011a8 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001198:	2220      	movs	r2, #32
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80011a0:	2317      	movs	r3, #23
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2250      	movs	r2, #80	; 0x50
 80011ac:	2100      	movs	r1, #0
 80011ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80011b0:	2317      	movs	r3, #23
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b006      	add	sp, #24
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	fffffefd 	.word	0xfffffefd

080011c4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	0002      	movs	r2, r0
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	001a      	movs	r2, r3
 80011d6:	231f      	movs	r3, #31
 80011d8:	401a      	ands	r2, r3
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <NVIC_EnableIRQ+0x28>)
 80011dc:	2101      	movs	r1, #1
 80011de:	4091      	lsls	r1, r2
 80011e0:	000a      	movs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	0002      	movs	r2, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b7f      	cmp	r3, #127	; 0x7f
 8001204:	d932      	bls.n	800126c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <NVIC_SetPriority+0xd4>)
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	0019      	movs	r1, r3
 800120e:	230f      	movs	r3, #15
 8001210:	400b      	ands	r3, r1
 8001212:	3b08      	subs	r3, #8
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3306      	adds	r3, #6
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	3304      	adds	r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1dfa      	adds	r2, r7, #7
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	0011      	movs	r1, r2
 8001226:	2203      	movs	r2, #3
 8001228:	400a      	ands	r2, r1
 800122a:	00d2      	lsls	r2, r2, #3
 800122c:	21ff      	movs	r1, #255	; 0xff
 800122e:	4091      	lsls	r1, r2
 8001230:	000a      	movs	r2, r1
 8001232:	43d2      	mvns	r2, r2
 8001234:	401a      	ands	r2, r3
 8001236:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	019b      	lsls	r3, r3, #6
 800123c:	22ff      	movs	r2, #255	; 0xff
 800123e:	401a      	ands	r2, r3
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	0018      	movs	r0, r3
 8001246:	2303      	movs	r3, #3
 8001248:	4003      	ands	r3, r0
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800124e:	481d      	ldr	r0, [pc, #116]	; (80012c4 <NVIC_SetPriority+0xd4>)
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	001c      	movs	r4, r3
 8001256:	230f      	movs	r3, #15
 8001258:	4023      	ands	r3, r4
 800125a:	3b08      	subs	r3, #8
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	430a      	orrs	r2, r1
 8001260:	3306      	adds	r3, #6
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	18c3      	adds	r3, r0, r3
 8001266:	3304      	adds	r3, #4
 8001268:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800126a:	e027      	b.n	80012bc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <NVIC_SetPriority+0xd8>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	33c0      	adds	r3, #192	; 0xc0
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	589b      	ldr	r3, [r3, r2]
 800127c:	1dfa      	adds	r2, r7, #7
 800127e:	7812      	ldrb	r2, [r2, #0]
 8001280:	0011      	movs	r1, r2
 8001282:	2203      	movs	r2, #3
 8001284:	400a      	ands	r2, r1
 8001286:	00d2      	lsls	r2, r2, #3
 8001288:	21ff      	movs	r1, #255	; 0xff
 800128a:	4091      	lsls	r1, r2
 800128c:	000a      	movs	r2, r1
 800128e:	43d2      	mvns	r2, r2
 8001290:	401a      	ands	r2, r3
 8001292:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	019b      	lsls	r3, r3, #6
 8001298:	22ff      	movs	r2, #255	; 0xff
 800129a:	401a      	ands	r2, r3
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	0018      	movs	r0, r3
 80012a2:	2303      	movs	r3, #3
 80012a4:	4003      	ands	r3, r0
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <NVIC_SetPriority+0xd8>)
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	430a      	orrs	r2, r1
 80012b6:	33c0      	adds	r3, #192	; 0xc0
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	501a      	str	r2, [r3, r0]
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b003      	add	sp, #12
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	e000e100 	.word	0xe000e100

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <SysTick_Config+0x40>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e010      	b.n	8001304 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <SysTick_Config+0x44>)
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	3a01      	subs	r2, #1
 80012e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	2301      	movs	r3, #1
 80012ec:	425b      	negs	r3, r3
 80012ee:	2103      	movs	r1, #3
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff ff7d 	bl	80011f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SysTick_Config+0x44>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x44>)
 80012fe:	2207      	movs	r2, #7
 8001300:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001302:	2300      	movs	r3, #0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}
 800130c:	00ffffff 	.word	0x00ffffff
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	210f      	movs	r1, #15
 8001320:	187b      	adds	r3, r7, r1
 8001322:	1c02      	adds	r2, r0, #0
 8001324:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	187b      	adds	r3, r7, r1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <NVIC_SetPriority>
}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	0002      	movs	r2, r0
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b25b      	sxtb	r3, r3
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff37 	bl	80011c4 <NVIC_EnableIRQ>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ffaf 	bl	80012cc <SysTick_Config>
 800136e:	0003      	movs	r3, r0
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e061      	b.n	800144e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_DMA_Init+0xe0>)
 8001390:	4694      	mov	ip, r2
 8001392:	4463      	add	r3, ip
 8001394:	2114      	movs	r1, #20
 8001396:	0018      	movs	r0, r3
 8001398:	f7fe feb6 	bl	8000108 <__udivsi3>
 800139c:	0003      	movs	r3, r0
 800139e:	009a      	lsls	r2, r3, #2
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <HAL_DMA_Init+0xe4>)
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2225      	movs	r2, #37	; 0x25
 80013ae:	2102      	movs	r1, #2
 80013b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_DMA_Init+0xe8>)
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	429a      	cmp	r2, r3
 8001402:	d018      	beq.n	8001436 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_DMA_Init+0xec>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	211c      	movs	r1, #28
 800140e:	400b      	ands	r3, r1
 8001410:	210f      	movs	r1, #15
 8001412:	4099      	lsls	r1, r3
 8001414:	000b      	movs	r3, r1
 8001416:	43d9      	mvns	r1, r3
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_DMA_Init+0xec>)
 800141a:	400a      	ands	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_DMA_Init+0xec>)
 8001420:	6819      	ldr	r1, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	201c      	movs	r0, #28
 800142c:	4003      	ands	r3, r0
 800142e:	409a      	lsls	r2, r3
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_DMA_Init+0xec>)
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2225      	movs	r2, #37	; 0x25
 8001440:	2101      	movs	r1, #1
 8001442:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	2100      	movs	r1, #0
 800144a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	bffdfff8 	.word	0xbffdfff8
 800145c:	40020000 	.word	0x40020000
 8001460:	ffff800f 	.word	0xffff800f
 8001464:	400200a8 	.word	0x400200a8

08001468 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2317      	movs	r3, #23
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2224      	movs	r2, #36	; 0x24
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_DMA_Start_IT+0x24>
 8001488:	2302      	movs	r3, #2
 800148a:	e04f      	b.n	800152c <HAL_DMA_Start_IT+0xc4>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2101      	movs	r1, #1
 8001492:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2225      	movs	r2, #37	; 0x25
 8001498:	5c9b      	ldrb	r3, [r3, r2]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d13a      	bne.n	8001516 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2225      	movs	r2, #37	; 0x25
 80014a4:	2102      	movs	r1, #2
 80014a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	438a      	bics	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f8e3 	bl	8001690 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d008      	beq.n	80014e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	210e      	movs	r1, #14
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e00f      	b.n	8001504 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2104      	movs	r1, #4
 80014f0:	438a      	bics	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	210a      	movs	r1, #10
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e007      	b.n	8001526 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2224      	movs	r2, #36	; 0x24
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800151e:	2317      	movs	r3, #23
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001526:	2317      	movs	r3, #23
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781b      	ldrb	r3, [r3, #0]
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b006      	add	sp, #24
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	221c      	movs	r2, #28
 8001552:	4013      	ands	r3, r2
 8001554:	2204      	movs	r2, #4
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4013      	ands	r3, r2
 800155e:	d026      	beq.n	80015ae <HAL_DMA_IRQHandler+0x7a>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2204      	movs	r2, #4
 8001564:	4013      	ands	r3, r2
 8001566:	d022      	beq.n	80015ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2220      	movs	r2, #32
 8001570:	4013      	ands	r3, r2
 8001572:	d107      	bne.n	8001584 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2104      	movs	r1, #4
 8001580:	438a      	bics	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	221c      	movs	r2, #28
 800158a:	401a      	ands	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2104      	movs	r1, #4
 8001592:	4091      	lsls	r1, r2
 8001594:	000a      	movs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	2b00      	cmp	r3, #0
 800159e:	d100      	bne.n	80015a2 <HAL_DMA_IRQHandler+0x6e>
 80015a0:	e071      	b.n	8001686 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	0010      	movs	r0, r2
 80015aa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80015ac:	e06b      	b.n	8001686 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	221c      	movs	r2, #28
 80015b4:	4013      	ands	r3, r2
 80015b6:	2202      	movs	r2, #2
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	d02d      	beq.n	800161e <HAL_DMA_IRQHandler+0xea>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d029      	beq.n	800161e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2220      	movs	r2, #32
 80015d2:	4013      	ands	r3, r2
 80015d4:	d10b      	bne.n	80015ee <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	210a      	movs	r1, #10
 80015e2:	438a      	bics	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2225      	movs	r2, #37	; 0x25
 80015ea:	2101      	movs	r1, #1
 80015ec:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	221c      	movs	r2, #28
 80015f4:	401a      	ands	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2102      	movs	r1, #2
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2224      	movs	r2, #36	; 0x24
 8001606:	2100      	movs	r1, #0
 8001608:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d039      	beq.n	8001686 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	0010      	movs	r0, r2
 800161a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800161c:	e033      	b.n	8001686 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	221c      	movs	r2, #28
 8001624:	4013      	ands	r3, r2
 8001626:	2208      	movs	r2, #8
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	d02a      	beq.n	8001688 <HAL_DMA_IRQHandler+0x154>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2208      	movs	r2, #8
 8001636:	4013      	ands	r3, r2
 8001638:	d026      	beq.n	8001688 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	210e      	movs	r1, #14
 8001646:	438a      	bics	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	221c      	movs	r2, #28
 8001650:	401a      	ands	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2101      	movs	r1, #1
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2225      	movs	r2, #37	; 0x25
 8001668:	2101      	movs	r1, #1
 800166a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2224      	movs	r2, #36	; 0x24
 8001670:	2100      	movs	r1, #0
 8001672:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	0010      	movs	r0, r2
 8001684:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46c0      	nop			; (mov r8, r8)
}
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bd80      	pop	{r7, pc}

08001690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	221c      	movs	r2, #28
 80016a4:	401a      	ands	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	2101      	movs	r1, #1
 80016ac:	4091      	lsls	r1, r2
 80016ae:	000a      	movs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d108      	bne.n	80016d4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016d2:	e007      	b.n	80016e4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	60da      	str	r2, [r3, #12]
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b004      	add	sp, #16
 80016ea:	bd80      	pop	{r7, pc}

080016ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7fe fef6 	bl	80004e4 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80016fc:	e00f      	b.n	800171e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3301      	adds	r3, #1
 8001702:	d00c      	beq.n	800171e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <FLASH_WaitForLastOperation+0x2e>
 800170a:	f7fe feeb 	bl	80004e4 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	d201      	bcs.n	800171e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e052      	b.n	80017c4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	2b01      	cmp	r3, #1
 8001728:	d0e9      	beq.n	80016fe <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d102      	bne.n	800173c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 8001738:	2202      	movs	r2, #2
 800173a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	401a      	ands	r2, r3
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	429a      	cmp	r2, r3
 800174c:	d035      	beq.n	80017ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d02c      	beq.n	80017ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 8001762:	699a      	ldr	r2, [r3, #24]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	429a      	cmp	r2, r3
 8001770:	d023      	beq.n	80017ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	429a      	cmp	r2, r3
 8001782:	d01a      	beq.n	80017ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 8001786:	699a      	ldr	r2, [r3, #24]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	019b      	lsls	r3, r3, #6
 800178c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	019b      	lsls	r3, r3, #6
 8001792:	429a      	cmp	r2, r3
 8001794:	d011      	beq.n	80017ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d008      	beq.n	80017ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <FLASH_WaitForLastOperation+0xe0>)
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d103      	bne.n	80017c2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80017ba:	f000 f809 	bl	80017d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40022000 	.word	0x40022000

080017d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <FLASH_SetErrorCode+0x130>)
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	401a      	ands	r2, r3
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d10a      	bne.n	8001802 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80017ec:	4b45      	ldr	r3, [pc, #276]	; (8001904 <FLASH_SetErrorCode+0x134>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2202      	movs	r2, #2
 80017f2:	431a      	orrs	r2, r3
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <FLASH_SetErrorCode+0x134>)
 80017f6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	4313      	orrs	r3, r2
 8001800:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <FLASH_SetErrorCode+0x130>)
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	401a      	ands	r2, r3
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d10a      	bne.n	800182a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001814:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <FLASH_SetErrorCode+0x134>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	2201      	movs	r2, #1
 800181a:	431a      	orrs	r2, r3
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <FLASH_SetErrorCode+0x134>)
 800181e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	4313      	orrs	r3, r2
 8001828:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <FLASH_SetErrorCode+0x130>)
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	401a      	ands	r2, r3
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	429a      	cmp	r2, r3
 800183a:	d10a      	bne.n	8001852 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <FLASH_SetErrorCode+0x134>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	2208      	movs	r2, #8
 8001842:	431a      	orrs	r2, r3
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <FLASH_SetErrorCode+0x134>)
 8001846:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	00d2      	lsls	r2, r2, #3
 800184e:	4313      	orrs	r3, r2
 8001850:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <FLASH_SetErrorCode+0x130>)
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	401a      	ands	r2, r3
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	429a      	cmp	r2, r3
 8001862:	d10a      	bne.n	800187a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <FLASH_SetErrorCode+0x134>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	2204      	movs	r2, #4
 800186a:	431a      	orrs	r2, r3
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <FLASH_SetErrorCode+0x134>)
 800186e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	4313      	orrs	r3, r2
 8001878:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <FLASH_SetErrorCode+0x130>)
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	401a      	ands	r2, r3
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	019b      	lsls	r3, r3, #6
 8001888:	429a      	cmp	r2, r3
 800188a:	d10a      	bne.n	80018a2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <FLASH_SetErrorCode+0x134>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2210      	movs	r2, #16
 8001892:	431a      	orrs	r2, r3
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <FLASH_SetErrorCode+0x134>)
 8001896:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0192      	lsls	r2, r2, #6
 800189e:	4313      	orrs	r3, r2
 80018a0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <FLASH_SetErrorCode+0x130>)
 80018a4:	699a      	ldr	r2, [r3, #24]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	401a      	ands	r2, r3
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d109      	bne.n	80018c8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <FLASH_SetErrorCode+0x134>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	2220      	movs	r2, #32
 80018ba:	431a      	orrs	r2, r3
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <FLASH_SetErrorCode+0x134>)
 80018be:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2220      	movs	r2, #32
 80018c4:	4313      	orrs	r3, r2
 80018c6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <FLASH_SetErrorCode+0x130>)
 80018ca:	699a      	ldr	r2, [r3, #24]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	401a      	ands	r2, r3
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d10a      	bne.n	80018f0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <FLASH_SetErrorCode+0x134>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2240      	movs	r2, #64	; 0x40
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <FLASH_SetErrorCode+0x134>)
 80018e4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	0252      	lsls	r2, r2, #9
 80018ec:	4313      	orrs	r3, r2
 80018ee:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <FLASH_SetErrorCode+0x130>)
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}  
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	40022000 	.word	0x40022000
 8001904:	200004c0 	.word	0x200004c0

08001908 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	d017      	beq.n	8001948 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001918:	f3ef 8310 	mrs	r3, PRIMASK
 800191c:	607b      	str	r3, [r7, #4]
  return(result);
 800191e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8001920:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001922:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8001928:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	4013      	ands	r3, r2
 8001942:	d001      	beq.n	8001948 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_FLASHEx_DATAEEPROM_Unlock+0x42>
    }
  }

  return HAL_OK;  
 8001948:	2300      	movs	r3, #0
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40022000 	.word	0x40022000
 8001958:	89abcdef 	.word	0x89abcdef
 800195c:	02030405 	.word	0x02030405

08001960 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	250f      	movs	r5, #15
 8001986:	197b      	adds	r3, r7, r5
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800198c:	197c      	adds	r4, r7, r5
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff feab 	bl	80016ec <FLASH_WaitForLastOperation>
 8001996:	0003      	movs	r3, r0
 8001998:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800199a:	197b      	adds	r3, r7, r5
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019ae:	230f      	movs	r3, #15
 80019b0:	18fc      	adds	r4, r7, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff fe99 	bl	80016ec <FLASH_WaitForLastOperation>
 80019ba:	0003      	movs	r3, r0
 80019bc:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80019be:	230f      	movs	r3, #15
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	781b      	ldrb	r3, [r3, #0]
}  
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b004      	add	sp, #16
 80019ca:	bdb0      	pop	{r4, r5, r7, pc}
 80019cc:	0000c350 	.word	0x0000c350
 80019d0:	200004c0 	.word	0x200004c0

080019d4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019e0:	2317      	movs	r3, #23
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80019ea:	7c1b      	ldrb	r3, [r3, #16]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e03f      	b.n	8001a74 <HAL_FLASHEx_DATAEEPROM_Program+0xa0>
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019fa:	2517      	movs	r5, #23
 80019fc:	197c      	adds	r4, r7, r5
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fe73 	bl	80016ec <FLASH_WaitForLastOperation>
 8001a06:	0003      	movs	r3, r0
 8001a08:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d12a      	bne.n	8001a68 <HAL_FLASHEx_DATAEEPROM_Program+0x94>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d103      	bne.n	8001a26 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e013      	b.n	8001a4e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d104      	bne.n	8001a36 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	b292      	uxth	r2, r2
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e00b      	b.n	8001a4e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d104      	bne.n	8001a46 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e003      	b.n	8001a4e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8001a46:	2317      	movs	r3, #23
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8001a4e:	2317      	movs	r3, #23
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_FLASHEx_DATAEEPROM_Program+0x94>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a58:	2317      	movs	r3, #23
 8001a5a:	18fc      	adds	r4, r7, r3
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff fe44 	bl	80016ec <FLASH_WaitForLastOperation>
 8001a64:	0003      	movs	r3, r0
 8001a66:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	741a      	strb	r2, [r3, #16]

  return status;
 8001a6e:	2317      	movs	r3, #23
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	781b      	ldrb	r3, [r3, #0]
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b006      	add	sp, #24
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7c:	200004c0 	.word	0x200004c0
 8001a80:	0000c350 	.word	0x0000c350

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a9a:	e149      	b.n	8001d30 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4091      	lsls	r1, r2
 8001aa6:	000a      	movs	r2, r1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d100      	bne.n	8001ab4 <HAL_GPIO_Init+0x30>
 8001ab2:	e13a      	b.n	8001d2a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x40>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b12      	cmp	r3, #18
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	58d3      	ldr	r3, [r2, r3]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	409a      	lsls	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2107      	movs	r1, #7
 8001af0:	400b      	ands	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	409a      	lsls	r2, r3
 8001af6:	0013      	movs	r3, r2
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	6939      	ldr	r1, [r7, #16]
 8001b0a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d00b      	beq.n	8001b2c <HAL_GPIO_Init+0xa8>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d007      	beq.n	8001b2c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b20:	2b11      	cmp	r3, #17
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b12      	cmp	r3, #18
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
 8001b68:	0013      	movs	r3, r2
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	2201      	movs	r2, #1
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	401a      	ands	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	055b      	lsls	r3, r3, #21
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d100      	bne.n	8001c00 <HAL_GPIO_Init+0x17c>
 8001bfe:	e094      	b.n	8001d2a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c00:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <HAL_GPIO_Init+0x2c4>)
 8001c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_GPIO_Init+0x2c4>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_GPIO_Init+0x2c8>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	589b      	ldr	r3, [r3, r2]
 8001c18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	4013      	ands	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	409a      	lsls	r2, r3
 8001c26:	0013      	movs	r3, r2
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	23a0      	movs	r3, #160	; 0xa0
 8001c34:	05db      	lsls	r3, r3, #23
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x1de>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a44      	ldr	r2, [pc, #272]	; (8001d50 <HAL_GPIO_Init+0x2cc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x1da>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a43      	ldr	r2, [pc, #268]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x1d6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <HAL_GPIO_Init+0x2d4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x1d2>
 8001c52:	2305      	movs	r3, #5
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x1e0>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x1e0>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x1e0>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x1e0>
 8001c62:	2300      	movs	r3, #0
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	2103      	movs	r1, #3
 8001c68:	400a      	ands	r2, r1
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x2c8>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	029b      	lsls	r3, r3, #10
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	035b      	lsls	r3, r3, #13
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	039b      	lsls	r3, r3, #14
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_GPIO_Init+0x2d8>)
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	40da      	lsrs	r2, r3
 8001d38:	1e13      	subs	r3, r2, #0
 8001d3a:	d000      	beq.n	8001d3e <HAL_GPIO_Init+0x2ba>
 8001d3c:	e6ae      	b.n	8001a9c <HAL_GPIO_Init+0x18>
  }
}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b006      	add	sp, #24
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	50000400 	.word	0x50000400
 8001d54:	50000800 	.word	0x50000800
 8001d58:	50001c00 	.word	0x50001c00
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	000a      	movs	r2, r1
 8001d6a:	1cbb      	adds	r3, r7, #2
 8001d6c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	1cba      	adds	r2, r7, #2
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	4013      	ands	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d84:	230f      	movs	r3, #15
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	0008      	movs	r0, r1
 8001da4:	0011      	movs	r1, r2
 8001da6:	1cbb      	adds	r3, r7, #2
 8001da8:	1c02      	adds	r2, r0, #0
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	1c7b      	adds	r3, r7, #1
 8001dae:	1c0a      	adds	r2, r1, #0
 8001db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001db2:	1c7b      	adds	r3, r7, #1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001dc2:	e003      	b.n	8001dcc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001dc4:	1cbb      	adds	r3, r7, #2
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e082      	b.n	8001eec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2241      	movs	r2, #65	; 0x41
 8001dea:	5c9b      	ldrb	r3, [r3, r2]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d107      	bne.n	8001e02 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2240      	movs	r2, #64	; 0x40
 8001df6:	2100      	movs	r1, #0
 8001df8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f003 fd51 	bl	80058a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2241      	movs	r2, #65	; 0x41
 8001e06:	2124      	movs	r1, #36	; 0x24
 8001e08:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	438a      	bics	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4934      	ldr	r1, [pc, #208]	; (8001ef4 <HAL_I2C_Init+0x120>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4931      	ldr	r1, [pc, #196]	; (8001ef8 <HAL_I2C_Init+0x124>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d108      	bne.n	8001e52 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0209      	lsls	r1, r1, #8
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e007      	b.n	8001e62 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2184      	movs	r1, #132	; 0x84
 8001e5c:	0209      	lsls	r1, r1, #8
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d104      	bne.n	8001e74 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	491f      	ldr	r1, [pc, #124]	; (8001efc <HAL_I2C_Init+0x128>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	491a      	ldr	r1, [pc, #104]	; (8001ef8 <HAL_I2C_Init+0x124>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	021a      	lsls	r2, r3, #8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69d9      	ldr	r1, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2241      	movs	r2, #65	; 0x41
 8001ed8:	2120      	movs	r1, #32
 8001eda:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2242      	movs	r2, #66	; 0x42
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	f0ffffff 	.word	0xf0ffffff
 8001ef8:	ffff7fff 	.word	0xffff7fff
 8001efc:	02008000 	.word	0x02008000

08001f00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	000c      	movs	r4, r1
 8001f0a:	0010      	movs	r0, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	230a      	movs	r3, #10
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	1c22      	adds	r2, r4, #0
 8001f14:	801a      	strh	r2, [r3, #0]
 8001f16:	2308      	movs	r3, #8
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	1c02      	adds	r2, r0, #0
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	1dbb      	adds	r3, r7, #6
 8001f20:	1c0a      	adds	r2, r1, #0
 8001f22:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2241      	movs	r2, #65	; 0x41
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d000      	beq.n	8001f32 <HAL_I2C_Mem_Write+0x32>
 8001f30:	e10c      	b.n	800214c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_I2C_Mem_Write+0x42>
 8001f38:	232c      	movs	r3, #44	; 0x2c
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0ff      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_I2C_Mem_Write+0x5c>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e0f8      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	2101      	movs	r1, #1
 8001f62:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f64:	f7fe fabe 	bl	80004e4 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	0219      	lsls	r1, r3, #8
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2319      	movs	r3, #25
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f000 f975 	bl	8002268 <I2C_WaitOnFlagUntilTimeout>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0e3      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2241      	movs	r2, #65	; 0x41
 8001f8a:	2121      	movs	r1, #33	; 0x21
 8001f8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2242      	movs	r2, #66	; 0x42
 8001f92:	2140      	movs	r1, #64	; 0x40
 8001f94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	222c      	movs	r2, #44	; 0x2c
 8001fa6:	18ba      	adds	r2, r7, r2
 8001fa8:	8812      	ldrh	r2, [r2, #0]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fb2:	1dbb      	adds	r3, r7, #6
 8001fb4:	881c      	ldrh	r4, [r3, #0]
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	881a      	ldrh	r2, [r3, #0]
 8001fbc:	230a      	movs	r3, #10
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	8819      	ldrh	r1, [r3, #0]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	0023      	movs	r3, r4
 8001fce:	f000 f8c5 	bl	800215c <I2C_RequestMemoryWrite>
 8001fd2:	1e03      	subs	r3, r0, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2240      	movs	r2, #64	; 0x40
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0b5      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2bff      	cmp	r3, #255	; 0xff
 8001fea:	d911      	bls.n	8002010 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	22ff      	movs	r2, #255	; 0xff
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	045c      	lsls	r4, r3, #17
 8001ffc:	230a      	movs	r3, #10
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	8819      	ldrh	r1, [r3, #0]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	2300      	movs	r3, #0
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	0023      	movs	r3, r4
 800200a:	f000 fa4d 	bl	80024a8 <I2C_TransferConfig>
 800200e:	e012      	b.n	8002036 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	b2da      	uxtb	r2, r3
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	049c      	lsls	r4, r3, #18
 8002024:	230a      	movs	r3, #10
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	8819      	ldrh	r1, [r3, #0]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	0023      	movs	r3, r4
 8002032:	f000 fa39 	bl	80024a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0018      	movs	r0, r3
 800203e:	f000 f952 	bl	80022e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002042:	1e03      	subs	r3, r0, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e081      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d03a      	beq.n	80020fa <HAL_I2C_Mem_Write+0x1fa>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d136      	bne.n	80020fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800208c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	0013      	movs	r3, r2
 8002096:	2200      	movs	r2, #0
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	f000 f8e5 	bl	8002268 <I2C_WaitOnFlagUntilTimeout>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e053      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2bff      	cmp	r3, #255	; 0xff
 80020ae:	d911      	bls.n	80020d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	045c      	lsls	r4, r3, #17
 80020c0:	230a      	movs	r3, #10
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	8819      	ldrh	r1, [r3, #0]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	2300      	movs	r3, #0
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	0023      	movs	r3, r4
 80020ce:	f000 f9eb 	bl	80024a8 <I2C_TransferConfig>
 80020d2:	e012      	b.n	80020fa <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	049c      	lsls	r4, r3, #18
 80020e8:	230a      	movs	r3, #10
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	8819      	ldrh	r1, [r3, #0]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	2300      	movs	r3, #0
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	0023      	movs	r3, r4
 80020f6:	f000 f9d7 	bl	80024a8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d198      	bne.n	8002036 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f92a 	bl	8002364 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002110:	1e03      	subs	r3, r0, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e01a      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2220      	movs	r2, #32
 800211e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	490b      	ldr	r1, [pc, #44]	; (8002158 <HAL_I2C_Mem_Write+0x258>)
 800212c:	400a      	ands	r2, r1
 800212e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2241      	movs	r2, #65	; 0x41
 8002134:	2120      	movs	r1, #32
 8002136:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2242      	movs	r2, #66	; 0x42
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	2100      	movs	r1, #0
 8002146:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b007      	add	sp, #28
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	fe00e800 	.word	0xfe00e800

0800215c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b5b0      	push	{r4, r5, r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	000c      	movs	r4, r1
 8002166:	0010      	movs	r0, r2
 8002168:	0019      	movs	r1, r3
 800216a:	250a      	movs	r5, #10
 800216c:	197b      	adds	r3, r7, r5
 800216e:	1c22      	adds	r2, r4, #0
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	2308      	movs	r3, #8
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	1c02      	adds	r2, r0, #0
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	1dbb      	adds	r3, r7, #6
 800217c:	1c0a      	adds	r2, r1, #0
 800217e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002180:	1dbb      	adds	r3, r7, #6
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	045c      	lsls	r4, r3, #17
 800218a:	197b      	adds	r3, r7, r5
 800218c:	8819      	ldrh	r1, [r3, #0]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <I2C_RequestMemoryWrite+0xc4>)
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	0023      	movs	r3, r4
 8002196:	f000 f987 	bl	80024a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f8a0 	bl	80022e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80021a6:	1e03      	subs	r3, r0, #0
 80021a8:	d001      	beq.n	80021ae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e033      	b.n	8002216 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ae:	1dbb      	adds	r3, r7, #6
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021b6:	2308      	movs	r3, #8
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
 80021c4:	e019      	b.n	80021fa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021c6:	2308      	movs	r3, #8
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021da:	6a39      	ldr	r1, [r7, #32]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 f881 	bl	80022e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80021e4:	1e03      	subs	r3, r0, #0
 80021e6:	d001      	beq.n	80021ec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e014      	b.n	8002216 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021ec:	2308      	movs	r3, #8
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021fa:	6a3a      	ldr	r2, [r7, #32]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	0013      	movs	r3, r2
 8002204:	2200      	movs	r2, #0
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	f000 f82e 	bl	8002268 <I2C_WaitOnFlagUntilTimeout>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d001      	beq.n	8002214 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bdb0      	pop	{r4, r5, r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	80002000 	.word	0x80002000

08002224 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d103      	bne.n	8002242 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2201      	movs	r2, #1
 800224a:	4013      	ands	r3, r2
 800224c:	2b01      	cmp	r3, #1
 800224e:	d007      	beq.n	8002260 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	619a      	str	r2, [r3, #24]
  }
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002278:	e021      	b.n	80022be <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	d01e      	beq.n	80022be <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002280:	f7fe f930 	bl	80004e4 <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d302      	bcc.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d113      	bne.n	80022be <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	2220      	movs	r2, #32
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2241      	movs	r2, #65	; 0x41
 80022a6:	2120      	movs	r1, #32
 80022a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2242      	movs	r2, #66	; 0x42
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2240      	movs	r2, #64	; 0x40
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	425a      	negs	r2, r3
 80022ce:	4153      	adcs	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	001a      	movs	r2, r3
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d0ce      	beq.n	800227a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b004      	add	sp, #16
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022f2:	e02b      	b.n	800234c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 f86e 	bl	80023dc <I2C_IsAcknowledgeFailed>
 8002300:	1e03      	subs	r3, r0, #0
 8002302:	d001      	beq.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e029      	b.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	3301      	adds	r3, #1
 800230c:	d01e      	beq.n	800234c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7fe f8e9 	bl	80004e4 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d113      	bne.n	800234c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	2220      	movs	r2, #32
 800232a:	431a      	orrs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2241      	movs	r2, #65	; 0x41
 8002334:	2120      	movs	r1, #32
 8002336:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2242      	movs	r2, #66	; 0x42
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e007      	b.n	800235c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d1cc      	bne.n	80022f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	0018      	movs	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	b004      	add	sp, #16
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002370:	e028      	b.n	80023c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f82f 	bl	80023dc <I2C_IsAcknowledgeFailed>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d001      	beq.n	8002386 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e026      	b.n	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7fe f8ad 	bl	80004e4 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d113      	bne.n	80023c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	2220      	movs	r2, #32
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2241      	movs	r2, #65	; 0x41
 80023ac:	2120      	movs	r1, #32
 80023ae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2242      	movs	r2, #66	; 0x42
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e007      	b.n	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2220      	movs	r2, #32
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d1cf      	bne.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}

080023dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2210      	movs	r2, #16
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d151      	bne.n	800249a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f6:	e021      	b.n	800243c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3301      	adds	r3, #1
 80023fc:	d01e      	beq.n	800243c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7fe f871 	bl	80004e4 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <I2C_IsAcknowledgeFailed+0x38>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d113      	bne.n	800243c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	2220      	movs	r2, #32
 800241a:	431a      	orrs	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2241      	movs	r2, #65	; 0x41
 8002424:	2120      	movs	r1, #32
 8002426:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2242      	movs	r2, #66	; 0x42
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	2100      	movs	r1, #0
 8002436:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e02f      	b.n	800249c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2220      	movs	r2, #32
 8002444:	4013      	ands	r3, r2
 8002446:	2b20      	cmp	r3, #32
 8002448:	d1d6      	bne.n	80023f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2210      	movs	r2, #16
 8002450:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2220      	movs	r2, #32
 8002458:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	0018      	movs	r0, r3
 800245e:	f7ff fee1 	bl	8002224 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	490d      	ldr	r1, [pc, #52]	; (80024a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800246e:	400a      	ands	r2, r1
 8002470:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	2204      	movs	r2, #4
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2241      	movs	r2, #65	; 0x41
 8002482:	2120      	movs	r1, #32
 8002484:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2242      	movs	r2, #66	; 0x42
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	fe00e800 	.word	0xfe00e800

080024a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	0008      	movs	r0, r1
 80024b2:	0011      	movs	r1, r2
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	240a      	movs	r4, #10
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	1c02      	adds	r2, r0, #0
 80024bc:	801a      	strh	r2, [r3, #0]
 80024be:	2009      	movs	r0, #9
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	1c0a      	adds	r2, r1, #0
 80024c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	0d51      	lsrs	r1, r2, #21
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	00d2      	lsls	r2, r2, #3
 80024d4:	400a      	ands	r2, r1
 80024d6:	490e      	ldr	r1, [pc, #56]	; (8002510 <I2C_TransferConfig+0x68>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	43d2      	mvns	r2, r2
 80024dc:	401a      	ands	r2, r3
 80024de:	0011      	movs	r1, r2
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	059b      	lsls	r3, r3, #22
 80024e6:	0d9a      	lsrs	r2, r3, #22
 80024e8:	183b      	adds	r3, r7, r0
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	0418      	lsls	r0, r3, #16
 80024ee:	23ff      	movs	r3, #255	; 0xff
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	4003      	ands	r3, r0
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b005      	add	sp, #20
 800250c:	bd90      	pop	{r4, r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	03ff63ff 	.word	0x03ff63ff

08002514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2241      	movs	r2, #65	; 0x41
 8002522:	5c9b      	ldrb	r3, [r3, r2]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	d138      	bne.n	800259c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2240      	movs	r2, #64	; 0x40
 800252e:	5c9b      	ldrb	r3, [r3, r2]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002534:	2302      	movs	r3, #2
 8002536:	e032      	b.n	800259e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2240      	movs	r2, #64	; 0x40
 800253c:	2101      	movs	r1, #1
 800253e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2241      	movs	r2, #65	; 0x41
 8002544:	2124      	movs	r1, #36	; 0x24
 8002546:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2101      	movs	r1, #1
 8002554:	438a      	bics	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4911      	ldr	r1, [pc, #68]	; (80025a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002564:	400a      	ands	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2101      	movs	r1, #1
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2241      	movs	r2, #65	; 0x41
 800258c:	2120      	movs	r1, #32
 800258e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	2100      	movs	r1, #0
 8002596:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	ffffefff 	.word	0xffffefff

080025ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d139      	bne.n	8002636 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e033      	b.n	8002638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	2101      	movs	r1, #1
 80025d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2241      	movs	r2, #65	; 0x41
 80025dc:	2124      	movs	r1, #36	; 0x24
 80025de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a11      	ldr	r2, [pc, #68]	; (8002640 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2241      	movs	r2, #65	; 0x41
 8002626:	2120      	movs	r1, #32
 8002628:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002636:	2302      	movs	r3, #2
  }
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bd80      	pop	{r7, pc}
 8002640:	fffff0ff 	.word	0xfffff0ff

08002644 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_PWR_EnterSTANDBYMode+0x24>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_PWR_EnterSTANDBYMode+0x24>)
 800264e:	2102      	movs	r1, #2
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800265a:	2104      	movs	r1, #4
 800265c:	430a      	orrs	r2, r1
 800265e:	611a      	str	r2, [r3, #16]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8002660:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40007000 	.word	0x40007000
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f000 fb6a 	bl	8002d58 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002684:	4bc7      	ldr	r3, [pc, #796]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	220c      	movs	r2, #12
 800268a:	4013      	ands	r3, r2
 800268c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268e:	4bc5      	ldr	r3, [pc, #788]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d100      	bne.n	80026a6 <HAL_RCC_OscConfig+0x36>
 80026a4:	e07d      	b.n	80027a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d007      	beq.n	80026bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d112      	bne.n	80026d8 <HAL_RCC_OscConfig+0x68>
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	025b      	lsls	r3, r3, #9
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	4bb9      	ldr	r3, [pc, #740]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	029b      	lsls	r3, r3, #10
 80026c4:	4013      	ands	r3, r2
 80026c6:	d100      	bne.n	80026ca <HAL_RCC_OscConfig+0x5a>
 80026c8:	e06a      	b.n	80027a0 <HAL_RCC_OscConfig+0x130>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d166      	bne.n	80027a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f000 fb40 	bl	8002d58 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x84>
 80026e4:	4baf      	ldr	r3, [pc, #700]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4bae      	ldr	r3, [pc, #696]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	0249      	lsls	r1, r1, #9
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e027      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	23a0      	movs	r3, #160	; 0xa0
 80026fa:	02db      	lsls	r3, r3, #11
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d10e      	bne.n	800271e <HAL_RCC_OscConfig+0xae>
 8002700:	4ba8      	ldr	r3, [pc, #672]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4ba7      	ldr	r3, [pc, #668]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	02c9      	lsls	r1, r1, #11
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	4ba5      	ldr	r3, [pc, #660]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4ba4      	ldr	r3, [pc, #656]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0249      	lsls	r1, r1, #9
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e012      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 800271e:	4ba1      	ldr	r3, [pc, #644]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4ba0      	ldr	r3, [pc, #640]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002724:	49a0      	ldr	r1, [pc, #640]	; (80029a8 <HAL_RCC_OscConfig+0x338>)
 8002726:	400a      	ands	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	4b9e      	ldr	r3, [pc, #632]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	025b      	lsls	r3, r3, #9
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4b9a      	ldr	r3, [pc, #616]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b99      	ldr	r3, [pc, #612]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800273e:	499b      	ldr	r1, [pc, #620]	; (80029ac <HAL_RCC_OscConfig+0x33c>)
 8002740:	400a      	ands	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d014      	beq.n	8002776 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fd feca 	bl	80004e4 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002756:	f7fd fec5 	bl	80004e4 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e2f7      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002768:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	4013      	ands	r3, r2
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0xe6>
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7fd feb5 	bl	80004e4 <HAL_GetTick>
 800277a:	0003      	movs	r3, r0
 800277c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002780:	f7fd feb0 	bl	80004e4 <HAL_GetTick>
 8002784:	0002      	movs	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e2e2      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002792:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x110>
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	d100      	bne.n	80027ae <HAL_RCC_OscConfig+0x13e>
 80027ac:	e098      	b.n	80028e0 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2220      	movs	r2, #32
 80027b8:	4013      	ands	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80027bc:	4b79      	ldr	r3, [pc, #484]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b78      	ldr	r3, [pc, #480]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80027c2:	2120      	movs	r1, #32
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	2220      	movs	r2, #32
 80027cc:	4393      	bics	r3, r2
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d13d      	bne.n	8002858 <HAL_RCC_OscConfig+0x1e8>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d13a      	bne.n	8002858 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80027e2:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_RCC_OscConfig+0x186>
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e2b0      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a6d      	ldr	r2, [pc, #436]	; (80029b0 <HAL_RCC_OscConfig+0x340>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	021a      	lsls	r2, r3, #8
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002808:	430a      	orrs	r2, r1
 800280a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800280c:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2209      	movs	r2, #9
 8002812:	4393      	bics	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800281e:	f000 fbcb 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002822:	0001      	movs	r1, r0
 8002824:	4b5f      	ldr	r3, [pc, #380]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	220f      	movs	r2, #15
 800282c:	4013      	ands	r3, r2
 800282e:	4a61      	ldr	r2, [pc, #388]	; (80029b4 <HAL_RCC_OscConfig+0x344>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	000a      	movs	r2, r1
 8002834:	40da      	lsrs	r2, r3
 8002836:	4b60      	ldr	r3, [pc, #384]	; (80029b8 <HAL_RCC_OscConfig+0x348>)
 8002838:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800283a:	2513      	movs	r5, #19
 800283c:	197c      	adds	r4, r7, r5
 800283e:	2000      	movs	r0, #0
 8002840:	f7fd fe1a 	bl	8000478 <HAL_InitTick>
 8002844:	0003      	movs	r3, r0
 8002846:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002848:	197b      	adds	r3, r7, r5
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d047      	beq.n	80028e0 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8002850:	2313      	movs	r3, #19
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	e27f      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d027      	beq.n	80028ae <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2209      	movs	r2, #9
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fd fe38 	bl	80004e4 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287a:	f7fd fe33 	bl	80004e4 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e265      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288c:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2204      	movs	r2, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d0f1      	beq.n	800287a <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a45      	ldr	r2, [pc, #276]	; (80029b0 <HAL_RCC_OscConfig+0x340>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	021a      	lsls	r2, r3, #8
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e018      	b.n	80028e0 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b3c      	ldr	r3, [pc, #240]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	438a      	bics	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fd fe13 	bl	80004e4 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fd fe0e 	bl	80004e4 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e240      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d6:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2204      	movs	r2, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	d1f1      	bne.n	80028c4 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2210      	movs	r2, #16
 80028e6:	4013      	ands	r3, r2
 80028e8:	d100      	bne.n	80028ec <HAL_RCC_OscConfig+0x27c>
 80028ea:	e09e      	b.n	8002a2a <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d13f      	bne.n	8002972 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x29a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e226      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290a:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a2b      	ldr	r2, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x34c>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	0a19      	lsrs	r1, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	061a      	lsls	r2, r3, #24
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	0b5b      	lsrs	r3, r3, #13
 8002938:	3301      	adds	r3, #1
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	0212      	lsls	r2, r2, #8
 800293e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	210f      	movs	r1, #15
 8002948:	400b      	ands	r3, r1
 800294a:	491a      	ldr	r1, [pc, #104]	; (80029b4 <HAL_RCC_OscConfig+0x344>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_OscConfig+0x348>)
 8002952:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002954:	2513      	movs	r5, #19
 8002956:	197c      	adds	r4, r7, r5
 8002958:	2000      	movs	r0, #0
 800295a:	f7fd fd8d 	bl	8000478 <HAL_InitTick>
 800295e:	0003      	movs	r3, r0
 8002960:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002962:	197b      	adds	r3, r7, r5
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d05f      	beq.n	8002a2a <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 800296a:	2313      	movs	r3, #19
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	e1f2      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d03d      	beq.n	80029f6 <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002980:	2180      	movs	r1, #128	; 0x80
 8002982:	0049      	lsls	r1, r1, #1
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fd fdac 	bl	80004e4 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002990:	e016      	b.n	80029c0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002992:	f7fd fda7 	bl	80004e4 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d90f      	bls.n	80029c0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1d9      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	fffeffff 	.word	0xfffeffff
 80029ac:	fffbffff 	.word	0xfffbffff
 80029b0:	ffffe0ff 	.word	0xffffe0ff
 80029b4:	08006c60 	.word	0x08006c60
 80029b8:	20000020 	.word	0x20000020
 80029bc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029c0:	4bca      	ldr	r3, [pc, #808]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	d0e2      	beq.n	8002992 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029cc:	4bc7      	ldr	r3, [pc, #796]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4ac7      	ldr	r2, [pc, #796]	; (8002cf0 <HAL_RCC_OscConfig+0x680>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	4bc4      	ldr	r3, [pc, #784]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029e0:	4bc2      	ldr	r3, [pc, #776]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	0a19      	lsrs	r1, r3, #8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	061a      	lsls	r2, r3, #24
 80029ee:	4bbf      	ldr	r3, [pc, #764]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	e019      	b.n	8002a2a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029f6:	4bbd      	ldr	r3, [pc, #756]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4bbc      	ldr	r3, [pc, #752]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 80029fc:	49bd      	ldr	r1, [pc, #756]	; (8002cf4 <HAL_RCC_OscConfig+0x684>)
 80029fe:	400a      	ands	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fd fd6f 	bl	80004e4 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a0c:	f7fd fd6a 	bl	80004e4 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e19c      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a1e:	4bb3      	ldr	r3, [pc, #716]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4013      	ands	r3, r2
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2208      	movs	r2, #8
 8002a30:	4013      	ands	r3, r2
 8002a32:	d036      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d019      	beq.n	8002a70 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3c:	4bab      	ldr	r3, [pc, #684]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a40:	4baa      	ldr	r3, [pc, #680]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	430a      	orrs	r2, r1
 8002a46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fd fd4c 	bl	80004e4 <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a52:	f7fd fd47 	bl	80004e4 <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e179      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a64:	4ba1      	ldr	r3, [pc, #644]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d0f1      	beq.n	8002a52 <HAL_RCC_OscConfig+0x3e2>
 8002a6e:	e018      	b.n	8002aa2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a70:	4b9e      	ldr	r3, [pc, #632]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a74:	4b9d      	ldr	r3, [pc, #628]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	438a      	bics	r2, r1
 8002a7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7fd fd32 	bl	80004e4 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a86:	f7fd fd2d 	bl	80004e4 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e15f      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a98:	4b94      	ldr	r3, [pc, #592]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d1f1      	bne.n	8002a86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d100      	bne.n	8002aae <HAL_RCC_OscConfig+0x43e>
 8002aac:	e0af      	b.n	8002c0e <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2323      	movs	r3, #35	; 0x23
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b8d      	ldr	r3, [pc, #564]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac6:	4b89      	ldr	r3, [pc, #548]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0549      	lsls	r1, r1, #21
 8002acc:	430a      	orrs	r2, r1
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ad0:	2323      	movs	r3, #35	; 0x23
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b87      	ldr	r3, [pc, #540]	; (8002cf8 <HAL_RCC_OscConfig+0x688>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d11a      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae4:	4b84      	ldr	r3, [pc, #528]	; (8002cf8 <HAL_RCC_OscConfig+0x688>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b83      	ldr	r3, [pc, #524]	; (8002cf8 <HAL_RCC_OscConfig+0x688>)
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	0049      	lsls	r1, r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fd fcf7 	bl	80004e4 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fd fcf2 	bl	80004e4 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e124      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <HAL_RCC_OscConfig+0x688>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4c6>
 8002b26:	4b71      	ldr	r3, [pc, #452]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2a:	4b70      	ldr	r3, [pc, #448]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	0049      	lsls	r1, r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	651a      	str	r2, [r3, #80]	; 0x50
 8002b34:	e031      	b.n	8002b9a <HAL_RCC_OscConfig+0x52a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4e8>
 8002b3e:	4b6b      	ldr	r3, [pc, #428]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b44:	496b      	ldr	r1, [pc, #428]	; (8002cf4 <HAL_RCC_OscConfig+0x684>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
 8002b4a:	4b68      	ldr	r3, [pc, #416]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b50:	496a      	ldr	r1, [pc, #424]	; (8002cfc <HAL_RCC_OscConfig+0x68c>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	651a      	str	r2, [r3, #80]	; 0x50
 8002b56:	e020      	b.n	8002b9a <HAL_RCC_OscConfig+0x52a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	23a0      	movs	r3, #160	; 0xa0
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10e      	bne.n	8002b82 <HAL_RCC_OscConfig+0x512>
 8002b64:	4b61      	ldr	r3, [pc, #388]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b68:	4b60      	ldr	r3, [pc, #384]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	00c9      	lsls	r1, r1, #3
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50
 8002b72:	4b5e      	ldr	r3, [pc, #376]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	0049      	lsls	r1, r1, #1
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x52a>
 8002b82:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b86:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b88:	495a      	ldr	r1, [pc, #360]	; (8002cf4 <HAL_RCC_OscConfig+0x684>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b8e:	4b57      	ldr	r3, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b92:	4b56      	ldr	r3, [pc, #344]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002b94:	4959      	ldr	r1, [pc, #356]	; (8002cfc <HAL_RCC_OscConfig+0x68c>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d015      	beq.n	8002bce <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fd fc9f 	bl	80004e4 <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002baa:	e009      	b.n	8002bc0 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fd fc9a 	bl	80004e4 <HAL_GetTick>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCC_OscConfig+0x690>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0cb      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x53c>
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fd fc89 	bl	80004e4 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd6:	e009      	b.n	8002bec <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fd fc84 	bl	80004e4 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	4a47      	ldr	r2, [pc, #284]	; (8002d00 <HAL_RCC_OscConfig+0x690>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0b5      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002bee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d1ef      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bf8:	2323      	movs	r3, #35	; 0x23
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c08:	493e      	ldr	r1, [pc, #248]	; (8002d04 <HAL_RCC_OscConfig+0x694>)
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d100      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5a8>
 8002c16:	e09e      	b.n	8002d56 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d100      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5b0>
 8002c1e:	e077      	b.n	8002d10 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d145      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c2e:	4936      	ldr	r1, [pc, #216]	; (8002d08 <HAL_RCC_OscConfig+0x698>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fd fc56 	bl	80004e4 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fd fc51 	bl	80004e4 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e083      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	049b      	lsls	r3, r3, #18
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	4b23      	ldr	r3, [pc, #140]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <HAL_RCC_OscConfig+0x69c>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	431a      	orrs	r2, r3
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	0449      	lsls	r1, r1, #17
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fd fc2b 	bl	80004e4 <HAL_GetTick>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fd fc26 	bl	80004e4 <HAL_GetTick>
 8002c98:	0002      	movs	r2, r0
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e058      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	049b      	lsls	r3, r3, #18
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x624>
 8002cb2:	e050      	b.n	8002d56 <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002cba:	4913      	ldr	r1, [pc, #76]	; (8002d08 <HAL_RCC_OscConfig+0x698>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fd fc10 	bl	80004e4 <HAL_GetTick>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fd fc0b 	bl	80004e4 <HAL_GetTick>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e03d      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_RCC_OscConfig+0x67c>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	049b      	lsls	r3, r3, #18
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d1f0      	bne.n	8002cca <HAL_RCC_OscConfig+0x65a>
 8002ce8:	e035      	b.n	8002d56 <HAL_RCC_OscConfig+0x6e6>
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	ffff1fff 	.word	0xffff1fff
 8002cf4:	fffffeff 	.word	0xfffffeff
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	fffffbff 	.word	0xfffffbff
 8002d00:	00001388 	.word	0x00001388
 8002d04:	efffffff 	.word	0xefffffff
 8002d08:	feffffff 	.word	0xfeffffff
 8002d0c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_OscConfig+0x6f0>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	025b      	lsls	r3, r3, #9
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10f      	bne.n	8002d52 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	23f0      	movs	r3, #240	; 0xf0
 8002d36:	039b      	lsls	r3, r3, #14
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	23c0      	movs	r3, #192	; 0xc0
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	401a      	ands	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b00a      	add	sp, #40	; 0x28
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e10d      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d911      	bls.n	8002daa <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4393      	bics	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	4b80      	ldr	r3, [pc, #512]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4013      	ands	r3, r2
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0f4      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2202      	movs	r2, #2
 8002db0:	4013      	ands	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b7a      	ldr	r3, [pc, #488]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	22f0      	movs	r2, #240	; 0xf0
 8002dba:	4393      	bics	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	4b77      	ldr	r3, [pc, #476]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d100      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x70>
 8002dd2:	e089      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ddc:	4b70      	ldr	r3, [pc, #448]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	4013      	ands	r3, r2
 8002de6:	d120      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0d3      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	049b      	lsls	r3, r3, #18
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d114      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0c7      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e0c:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2204      	movs	r2, #4
 8002e12:	4013      	ands	r3, r2
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0bc      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e1a:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4013      	ands	r3, r2
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0b4      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2203      	movs	r2, #3
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e3e:	f7fd fb51 	bl	80004e4 <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d111      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e4e:	e009      	b.n	8002e64 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fd fb48 	bl	80004e4 <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e097      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e64:	4b4e      	ldr	r3, [pc, #312]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	220c      	movs	r2, #12
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d1ef      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xec>
 8002e70:	e03a      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d111      	bne.n	8002e9e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7a:	e009      	b.n	8002e90 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fd fb32 	bl	80004e4 <HAL_GetTick>
 8002e80:	0002      	movs	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	4a47      	ldr	r2, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e081      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	220c      	movs	r2, #12
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	d1ef      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x118>
 8002e9c:	e024      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d11b      	bne.n	8002ede <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ea6:	e009      	b.n	8002ebc <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7fd fb1c 	bl	80004e4 <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e06b      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ebc:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	220c      	movs	r2, #12
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d1ef      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x144>
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f7fd fb0b 	bl	80004e4 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e05a      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d1f0      	bne.n	8002eca <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d211      	bcs.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	4393      	bics	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <HAL_RCC_ClockConfig+0x238>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e03c      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_RCC_ClockConfig+0x248>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00da      	lsls	r2, r3, #3
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f58:	f000 f82e 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f5c:	0001      	movs	r1, r0
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_RCC_ClockConfig+0x23c>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	220f      	movs	r2, #15
 8002f66:	4013      	ands	r3, r2
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_RCC_ClockConfig+0x24c>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	000a      	movs	r2, r1
 8002f6e:	40da      	lsrs	r2, r3
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_ClockConfig+0x250>)
 8002f72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002f74:	250b      	movs	r5, #11
 8002f76:	197c      	adds	r4, r7, r5
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fd fa7d 	bl	8000478 <HAL_InitTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f82:	197b      	adds	r3, r7, r5
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002f8a:	230b      	movs	r3, #11
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	e000      	b.n	8002f94 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b004      	add	sp, #16
 8002f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	00001388 	.word	0x00001388
 8002fa8:	fffff8ff 	.word	0xfffff8ff
 8002fac:	ffffc7ff 	.word	0xffffc7ff
 8002fb0:	08006c60 	.word	0x08006c60
 8002fb4:	20000020 	.word	0x20000020

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d00e      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x34>
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d00f      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d157      	bne.n	8003086 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002fd6:	4b35      	ldr	r3, [pc, #212]	; (80030ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2210      	movs	r2, #16
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d002      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002fe0:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fe2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002fe4:	e05d      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8002fe6:	4b33      	ldr	r3, [pc, #204]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fe8:	613b      	str	r3, [r7, #16]
      break;
 8002fea:	e05a      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002fee:	613b      	str	r3, [r7, #16]
      break;
 8002ff0:	e057      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	4a30      	ldr	r2, [pc, #192]	; (80030bc <HAL_RCC_GetSysClockFreq+0x104>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	0d9b      	lsrs	r3, r3, #22
 8003004:	2203      	movs	r2, #3
 8003006:	4013      	ands	r3, r2
 8003008:	3301      	adds	r3, #1
 800300a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_RCC_GetSysClockFreq+0xf4>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	025b      	lsls	r3, r3, #9
 8003014:	4013      	ands	r3, r2
 8003016:	d00f      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	000a      	movs	r2, r1
 800301c:	0152      	lsls	r2, r2, #5
 800301e:	1a52      	subs	r2, r2, r1
 8003020:	0193      	lsls	r3, r2, #6
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	185b      	adds	r3, r3, r1
 8003028:	025b      	lsls	r3, r3, #9
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f7fd f86b 	bl	8000108 <__udivsi3>
 8003032:	0003      	movs	r3, r0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e023      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_RCC_GetSysClockFreq+0xf4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2210      	movs	r2, #16
 800303e:	4013      	ands	r3, r2
 8003040:	d00f      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	000a      	movs	r2, r1
 8003046:	0152      	lsls	r2, r2, #5
 8003048:	1a52      	subs	r2, r2, r1
 800304a:	0193      	lsls	r3, r2, #6
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	185b      	adds	r3, r3, r1
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f7fd f856 	bl	8000108 <__udivsi3>
 800305c:	0003      	movs	r3, r0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e00e      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	000a      	movs	r2, r1
 8003066:	0152      	lsls	r2, r2, #5
 8003068:	1a52      	subs	r2, r2, r1
 800306a:	0193      	lsls	r3, r2, #6
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	185b      	adds	r3, r3, r1
 8003072:	029b      	lsls	r3, r3, #10
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	0018      	movs	r0, r3
 8003078:	f7fd f846 	bl	8000108 <__udivsi3>
 800307c:	0003      	movs	r3, r0
 800307e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
      break;
 8003084:	e00d      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_RCC_GetSysClockFreq+0xf4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0b5b      	lsrs	r3, r3, #13
 800308c:	2207      	movs	r2, #7
 800308e:	4013      	ands	r3, r2
 8003090:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	0212      	lsls	r2, r2, #8
 800309a:	409a      	lsls	r2, r3
 800309c:	0013      	movs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030a2:	693b      	ldr	r3, [r7, #16]
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b006      	add	sp, #24
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40021000 	.word	0x40021000
 80030b0:	003d0900 	.word	0x003d0900
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	08006c78 	.word	0x08006c78

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	20000020 	.word	0x20000020

080030d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d8:	f7ff fff2 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030dc:	0001      	movs	r1, r0
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	2207      	movs	r2, #7
 80030e6:	4013      	ands	r3, r2
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ea:	5cd3      	ldrb	r3, [r2, r3]
 80030ec:	40d9      	lsrs	r1, r3
 80030ee:	000b      	movs	r3, r1
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08006c70 	.word	0x08006c70

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003104:	f7ff ffdc 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003108:	0001      	movs	r1, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	0adb      	lsrs	r3, r3, #11
 8003110:	2207      	movs	r2, #7
 8003112:	4013      	ands	r3, r2
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	40d9      	lsrs	r1, r3
 800311a:	000b      	movs	r3, r1
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40021000 	.word	0x40021000
 8003128:	08006c70 	.word	0x08006c70

0800312c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2220      	movs	r2, #32
 800313a:	4013      	ands	r3, r2
 800313c:	d100      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800313e:	e0c7      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003140:	2317      	movs	r3, #23
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003148:	4b82      	ldr	r3, [pc, #520]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800314a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	055b      	lsls	r3, r3, #21
 8003150:	4013      	ands	r3, r2
 8003152:	d10a      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	0549      	lsls	r1, r1, #21
 800315e:	430a      	orrs	r2, r1
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003162:	2317      	movs	r3, #23
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b7b      	ldr	r3, [pc, #492]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4013      	ands	r3, r2
 8003174:	d11a      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b78      	ldr	r3, [pc, #480]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b77      	ldr	r3, [pc, #476]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	0049      	lsls	r1, r1, #1
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003184:	f7fd f9ae 	bl	80004e4 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fd f9a9 	bl	80004e4 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	; 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0d4      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b6d      	ldr	r3, [pc, #436]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	d0f0      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031ac:	4b69      	ldr	r3, [pc, #420]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	23c0      	movs	r3, #192	; 0xc0
 80031b2:	039b      	lsls	r3, r3, #14
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	23c0      	movs	r3, #192	; 0xc0
 80031be:	039b      	lsls	r3, r3, #14
 80031c0:	4013      	ands	r3, r2
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d013      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	23c0      	movs	r3, #192	; 0xc0
 80031ce:	029b      	lsls	r3, r3, #10
 80031d0:	401a      	ands	r2, r3
 80031d2:	23c0      	movs	r3, #192	; 0xc0
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d10a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80031da:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	029b      	lsls	r3, r3, #10
 80031e2:	401a      	ands	r2, r3
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d101      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0ac      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80031f0:	4b58      	ldr	r3, [pc, #352]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80031f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031f4:	23c0      	movs	r3, #192	; 0xc0
 80031f6:	029b      	lsls	r3, r3, #10
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d03b      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	23c0      	movs	r3, #192	; 0xc0
 8003208:	029b      	lsls	r3, r3, #10
 800320a:	4013      	ands	r3, r2
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	429a      	cmp	r2, r3
 8003210:	d033      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2220      	movs	r2, #32
 8003218:	4013      	ands	r3, r2
 800321a:	d02e      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800321c:	4b4d      	ldr	r3, [pc, #308]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	4a4e      	ldr	r2, [pc, #312]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003222:	4013      	ands	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800322a:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800322c:	2180      	movs	r1, #128	; 0x80
 800322e:	0309      	lsls	r1, r1, #12
 8003230:	430a      	orrs	r2, r1
 8003232:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800323a:	4949      	ldr	r1, [pc, #292]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800323c:	400a      	ands	r2, r1
 800323e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003240:	4b44      	ldr	r3, [pc, #272]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4013      	ands	r3, r2
 800324e:	d014      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fd f948 	bl	80004e4 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003258:	e009      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fd f943 	bl	80004e4 <HAL_GetTick>
 800325e:	0002      	movs	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	4a3f      	ldr	r2, [pc, #252]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e06d      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4013      	ands	r3, r2
 8003278:	d0ef      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	029b      	lsls	r3, r3, #10
 8003282:	401a      	ands	r2, r3
 8003284:	23c0      	movs	r3, #192	; 0xc0
 8003286:	029b      	lsls	r3, r3, #10
 8003288:	429a      	cmp	r2, r3
 800328a:	d10c      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a35      	ldr	r2, [pc, #212]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	23c0      	movs	r3, #192	; 0xc0
 800329c:	039b      	lsls	r3, r3, #14
 800329e:	401a      	ands	r2, r3
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	23c0      	movs	r3, #192	; 0xc0
 80032b0:	029b      	lsls	r3, r3, #10
 80032b2:	401a      	ands	r2, r3
 80032b4:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032b6:	430a      	orrs	r2, r1
 80032b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ba:	2317      	movs	r3, #23
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032ca:	4928      	ldr	r1, [pc, #160]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2202      	movs	r2, #2
 80032d6:	4013      	ands	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	220c      	movs	r2, #12
 80032e0:	4393      	bics	r3, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2204      	movs	r2, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003308:	430a      	orrs	r2, r1
 800330a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2208      	movs	r2, #8
 8003312:	4013      	ands	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003326:	430a      	orrs	r2, r1
 8003328:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2280      	movs	r2, #128	; 0x80
 8003330:	4013      	ands	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	4a0f      	ldr	r2, [pc, #60]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800333a:	4013      	ands	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003344:	430a      	orrs	r2, r1
 8003346:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b006      	add	sp, #24
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	40021000 	.word	0x40021000
 8003358:	40007000 	.word	0x40007000
 800335c:	fffcffff 	.word	0xfffcffff
 8003360:	fff7ffff 	.word	0xfff7ffff
 8003364:	00001388 	.word	0x00001388
 8003368:	ffcfffff 	.word	0xffcfffff
 800336c:	efffffff 	.word	0xefffffff
 8003370:	fffff3ff 	.word	0xfffff3ff
 8003374:	ffffcfff 	.word	0xffffcfff
 8003378:	fff3ffff 	.word	0xfff3ffff

0800337c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e08e      	b.n	80034ac <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2221      	movs	r2, #33	; 0x21
 8003392:	5c9b      	ldrb	r3, [r3, r2]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f002 fac1 	bl	800592c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2221      	movs	r2, #33	; 0x21
 80033ae:	2102      	movs	r1, #2
 80033b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	22ca      	movs	r2, #202	; 0xca
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2253      	movs	r2, #83	; 0x53
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 fc82 	bl	8003cce <RTC_EnterInitMode>
 80033ca:	1e03      	subs	r3, r0, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2221      	movs	r2, #33	; 0x21
 80033da:	2104      	movs	r1, #4
 80033dc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e064      	b.n	80034ac <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4931      	ldr	r1, [pc, #196]	; (80034b4 <HAL_RTC_Init+0x138>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68d2      	ldr	r2, [r2, #12]
 8003418:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6919      	ldr	r1, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	438a      	bics	r2, r1
 800343c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2103      	movs	r1, #3
 800344a:	438a      	bics	r2, r1
 800344c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2220      	movs	r2, #32
 800346e:	4013      	ands	r3, r2
 8003470:	d113      	bne.n	800349a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 fc03 	bl	8003c80 <HAL_RTC_WaitForSynchro>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d00d      	beq.n	800349a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2221      	movs	r2, #33	; 0x21
 800348a:	2104      	movs	r1, #4
 800348c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e008      	b.n	80034ac <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	22ff      	movs	r2, #255	; 0xff
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2221      	movs	r2, #33	; 0x21
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
  }
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	ff8fffbf 	.word	0xff8fffbf

080034b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_RTC_SetTime+0x1a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e0ad      	b.n	800362e <HAL_RTC_SetTime+0x176>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2221      	movs	r2, #33	; 0x21
 80034de:	2102      	movs	r1, #2
 80034e0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d125      	bne.n	8003534 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	4013      	ands	r3, r2
 80034f2:	d102      	bne.n	80034fa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 fc0f 	bl	8003d22 <RTC_ByteToBcd2>
 8003504:	0003      	movs	r3, r0
 8003506:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fc08 	bl	8003d22 <RTC_ByteToBcd2>
 8003512:	0003      	movs	r3, r0
 8003514:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003516:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	789b      	ldrb	r3, [r3, #2]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fc00 	bl	8003d22 <RTC_ByteToBcd2>
 8003522:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003524:	0022      	movs	r2, r4
 8003526:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	78db      	ldrb	r3, [r3, #3]
 800352c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	e017      	b.n	8003564 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	4013      	ands	r3, r2
 800353e:	d102      	bne.n	8003546 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003552:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003558:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	78db      	ldrb	r3, [r3, #3]
 800355e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	22ca      	movs	r2, #202	; 0xca
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2253      	movs	r2, #83	; 0x53
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 fba9 	bl	8003cce <RTC_EnterInitMode>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d00d      	beq.n	800359c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	22ff      	movs	r2, #255	; 0xff
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2221      	movs	r2, #33	; 0x21
 800358c:	2104      	movs	r1, #4
 800358e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	2100      	movs	r1, #0
 8003596:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e048      	b.n	800362e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4925      	ldr	r1, [pc, #148]	; (8003638 <HAL_RTC_SetTime+0x180>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4922      	ldr	r1, [pc, #136]	; (800363c <HAL_RTC_SetTime+0x184>)
 80035b4:	400a      	ands	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	438a      	bics	r2, r1
 80035de:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2220      	movs	r2, #32
 80035e8:	4013      	ands	r3, r2
 80035ea:	d113      	bne.n	8003614 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 fb46 	bl	8003c80 <HAL_RTC_WaitForSynchro>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d00d      	beq.n	8003614 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	22ff      	movs	r2, #255	; 0xff
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2221      	movs	r2, #33	; 0x21
 8003604:	2104      	movs	r1, #4
 8003606:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e00c      	b.n	800362e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2221      	movs	r2, #33	; 0x21
 8003620:	2101      	movs	r1, #1
 8003622:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800362c:	2300      	movs	r3, #0
  }
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b007      	add	sp, #28
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	007f7f7f 	.word	0x007f7f7f
 800363c:	fffbffff 	.word	0xfffbffff

08003640 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	5c9b      	ldrb	r3, [r3, r2]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_RTC_SetDate+0x1a>
 8003656:	2302      	movs	r3, #2
 8003658:	e099      	b.n	800378e <HAL_RTC_SetDate+0x14e>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	2101      	movs	r1, #1
 8003660:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2221      	movs	r2, #33	; 0x21
 8003666:	2102      	movs	r1, #2
 8003668:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10e      	bne.n	800368e <HAL_RTC_SetDate+0x4e>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	001a      	movs	r2, r3
 8003676:	2310      	movs	r3, #16
 8003678:	4013      	ands	r3, r2
 800367a:	d008      	beq.n	800368e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2210      	movs	r2, #16
 8003682:	4393      	bics	r3, r2
 8003684:	b2db      	uxtb	r3, r3
 8003686:	330a      	adds	r3, #10
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11c      	bne.n	80036ce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	78db      	ldrb	r3, [r3, #3]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 fb42 	bl	8003d22 <RTC_ByteToBcd2>
 800369e:	0003      	movs	r3, r0
 80036a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 fb3b 	bl	8003d22 <RTC_ByteToBcd2>
 80036ac:	0003      	movs	r3, r0
 80036ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	789b      	ldrb	r3, [r3, #2]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fb33 	bl	8003d22 <RTC_ByteToBcd2>
 80036bc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036be:	0022      	movs	r2, r4
 80036c0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e00e      	b.n	80036ec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	78db      	ldrb	r3, [r3, #3]
 80036d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036da:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80036e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	22ca      	movs	r2, #202	; 0xca
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2253      	movs	r2, #83	; 0x53
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fae5 	bl	8003cce <RTC_EnterInitMode>
 8003704:	1e03      	subs	r3, r0, #0
 8003706:	d00d      	beq.n	8003724 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2221      	movs	r2, #33	; 0x21
 8003714:	2104      	movs	r1, #4
 8003716:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e034      	b.n	800378e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	491b      	ldr	r1, [pc, #108]	; (8003798 <HAL_RTC_SetDate+0x158>)
 800372c:	400a      	ands	r2, r1
 800372e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	438a      	bics	r2, r1
 800373e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2220      	movs	r2, #32
 8003748:	4013      	ands	r3, r2
 800374a:	d113      	bne.n	8003774 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 fa96 	bl	8003c80 <HAL_RTC_WaitForSynchro>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d00d      	beq.n	8003774 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2221      	movs	r2, #33	; 0x21
 8003764:	2104      	movs	r1, #4
 8003766:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e00c      	b.n	800378e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	22ff      	movs	r2, #255	; 0xff
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2221      	movs	r2, #33	; 0x21
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
  }
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b007      	add	sp, #28
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	00ffff3f 	.word	0x00ffff3f

0800379c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	5c9b      	ldrb	r3, [r3, r2]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_RTC_SetAlarm+0x1a>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e10c      	b.n	80039d0 <HAL_RTC_SetAlarm+0x234>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2221      	movs	r2, #33	; 0x21
 80037c2:	2102      	movs	r1, #2
 80037c4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d136      	bne.n	800383a <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	4013      	ands	r3, r2
 80037d6:	d102      	bne.n	80037de <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 fa9d 	bl	8003d22 <RTC_ByteToBcd2>
 80037e8:	0003      	movs	r3, r0
 80037ea:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 fa96 	bl	8003d22 <RTC_ByteToBcd2>
 80037f6:	0003      	movs	r3, r0
 80037f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80037fa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	789b      	ldrb	r3, [r3, #2]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fa8e 	bl	8003d22 <RTC_ByteToBcd2>
 8003806:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003808:	0022      	movs	r2, r4
 800380a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	78db      	ldrb	r3, [r3, #3]
 8003810:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003812:	431a      	orrs	r2, r3
 8003814:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2220      	movs	r2, #32
 800381a:	5c9b      	ldrb	r3, [r3, r2]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fa80 	bl	8003d22 <RTC_ByteToBcd2>
 8003822:	0003      	movs	r3, r0
 8003824:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003826:	0022      	movs	r2, r4
 8003828:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800382e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003834:	4313      	orrs	r3, r2
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	e022      	b.n	8003880 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2240      	movs	r2, #64	; 0x40
 8003842:	4013      	ands	r3, r2
 8003844:	d102      	bne.n	800384c <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003858:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800385e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	78db      	ldrb	r3, [r3, #3]
 8003864:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003866:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2120      	movs	r1, #32
 800386c:	5c5b      	ldrb	r3, [r3, r1]
 800386e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003870:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003876:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800387c:	4313      	orrs	r3, r2
 800387e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	22ca      	movs	r2, #202	; 0xca
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2253      	movs	r2, #83	; 0x53
 800389a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d143      	bne.n	8003930 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4949      	ldr	r1, [pc, #292]	; (80039d8 <HAL_RTC_SetAlarm+0x23c>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4946      	ldr	r1, [pc, #280]	; (80039dc <HAL_RTC_SetAlarm+0x240>)
 80038c4:	400a      	ands	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80038c8:	f7fc fe0c 	bl	80004e4 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80038d0:	e016      	b.n	8003900 <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038d2:	f7fc fe07 	bl	80004e4 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad2      	subs	r2, r2, r3
 80038dc:	23fa      	movs	r3, #250	; 0xfa
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d90d      	bls.n	8003900 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2221      	movs	r2, #33	; 0x21
 80038f0:	2103      	movs	r1, #3
 80038f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e067      	b.n	80039d0 <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	4013      	ands	r3, r2
 800390a:	d0e2      	beq.n	80038d2 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	0049      	lsls	r1, r1, #1
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	e042      	b.n	80039b6 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4929      	ldr	r1, [pc, #164]	; (80039e0 <HAL_RTC_SetAlarm+0x244>)
 800393c:	400a      	ands	r2, r1
 800393e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4926      	ldr	r1, [pc, #152]	; (80039e4 <HAL_RTC_SetAlarm+0x248>)
 800394c:	400a      	ands	r2, r1
 800394e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003950:	f7fc fdc8 	bl	80004e4 <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003958:	e016      	b.n	8003988 <HAL_RTC_SetAlarm+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800395a:	f7fc fdc3 	bl	80004e4 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	23fa      	movs	r3, #250	; 0xfa
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d90d      	bls.n	8003988 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2221      	movs	r2, #33	; 0x21
 8003978:	2103      	movs	r1, #3
 800397a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	2100      	movs	r1, #0
 8003982:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e023      	b.n	80039d0 <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2202      	movs	r2, #2
 8003990:	4013      	ands	r3, r2
 8003992:	d0e2      	beq.n	800395a <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	0089      	lsls	r1, r1, #2
 80039b2:	430a      	orrs	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	22ff      	movs	r2, #255	; 0xff
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2221      	movs	r2, #33	; 0x21
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b009      	add	sp, #36	; 0x24
 80039d6:	bd90      	pop	{r4, r7, pc}
 80039d8:	fffffeff 	.word	0xfffffeff
 80039dc:	ffffefff 	.word	0xffffefff
 80039e0:	fffffdff 	.word	0xfffffdff
 80039e4:	ffffdfff 	.word	0xffffdfff

080039e8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	5c9b      	ldrb	r3, [r3, r2]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_RTC_SetAlarm_IT+0x1a>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e130      	b.n	8003c64 <HAL_RTC_SetAlarm_IT+0x27c>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	2101      	movs	r1, #1
 8003a08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	; 0x21
 8003a0e:	2102      	movs	r1, #2
 8003a10:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d136      	bne.n	8003a86 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	4013      	ands	r3, r2
 8003a22:	d102      	bne.n	8003a2a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 f977 	bl	8003d22 <RTC_ByteToBcd2>
 8003a34:	0003      	movs	r3, r0
 8003a36:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 f970 	bl	8003d22 <RTC_ByteToBcd2>
 8003a42:	0003      	movs	r3, r0
 8003a44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a46:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	789b      	ldrb	r3, [r3, #2]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 f968 	bl	8003d22 <RTC_ByteToBcd2>
 8003a52:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003a54:	0022      	movs	r2, r4
 8003a56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	78db      	ldrb	r3, [r3, #3]
 8003a5c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2220      	movs	r2, #32
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 f95a 	bl	8003d22 <RTC_ByteToBcd2>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003a72:	0022      	movs	r2, r4
 8003a74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003a7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e022      	b.n	8003acc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2240      	movs	r2, #64	; 0x40
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d102      	bne.n	8003a98 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003aa4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003aaa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	78db      	ldrb	r3, [r3, #3]
 8003ab0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003ab2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	5c5b      	ldrb	r3, [r3, r1]
 8003aba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003abc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003ac2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	22ca      	movs	r2, #202	; 0xca
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2253      	movs	r2, #83	; 0x53
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d14e      	bne.n	8003b92 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	495b      	ldr	r1, [pc, #364]	; (8003c6c <HAL_RTC_SetAlarm_IT+0x284>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4957      	ldr	r1, [pc, #348]	; (8003c70 <HAL_RTC_SetAlarm_IT+0x288>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003b18:	f7fc fce4 	bl	80004e4 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b20:	e016      	b.n	8003b50 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b22:	f7fc fcdf 	bl	80004e4 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	23fa      	movs	r3, #250	; 0xfa
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d90d      	bls.n	8003b50 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	2103      	movs	r1, #3
 8003b42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e089      	b.n	8003c64 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d0e2      	beq.n	8003b22 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	0049      	lsls	r1, r1, #1
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	0149      	lsls	r1, r1, #5
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	e04d      	b.n	8003c2e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4935      	ldr	r1, [pc, #212]	; (8003c74 <HAL_RTC_SetAlarm_IT+0x28c>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	22ff      	movs	r2, #255	; 0xff
 8003baa:	401a      	ands	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4931      	ldr	r1, [pc, #196]	; (8003c78 <HAL_RTC_SetAlarm_IT+0x290>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003bb6:	f7fc fc95 	bl	80004e4 <HAL_GetTick>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003bbe:	e016      	b.n	8003bee <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bc0:	f7fc fc90 	bl	80004e4 <HAL_GetTick>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	1ad2      	subs	r2, r2, r3
 8003bca:	23fa      	movs	r3, #250	; 0xfa
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d90d      	bls.n	8003bee <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	22ff      	movs	r2, #255	; 0xff
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	2103      	movs	r1, #3
 8003be0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	2100      	movs	r1, #0
 8003be8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e03a      	b.n	8003c64 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d0e2      	beq.n	8003bc0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0089      	lsls	r1, r1, #2
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	0189      	lsls	r1, r1, #6
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_RTC_SetAlarm_IT+0x294>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RTC_SetAlarm_IT+0x294>)
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	0289      	lsls	r1, r1, #10
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <HAL_RTC_SetAlarm_IT+0x294>)
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_RTC_SetAlarm_IT+0x294>)
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	0289      	lsls	r1, r1, #10
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2221      	movs	r2, #33	; 0x21
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b009      	add	sp, #36	; 0x24
 8003c6a:	bd90      	pop	{r4, r7, pc}
 8003c6c:	fffffeff 	.word	0xfffffeff
 8003c70:	fffffe7f 	.word	0xfffffe7f
 8003c74:	fffffdff 	.word	0xfffffdff
 8003c78:	fffffd7f 	.word	0xfffffd7f
 8003c7c:	40010400 	.word	0x40010400

08003c80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	21a0      	movs	r1, #160	; 0xa0
 8003c94:	438a      	bics	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c98:	f7fc fc24 	bl	80004e4 <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ca2:	f7fc fc1f 	bl	80004e4 <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	23fa      	movs	r3, #250	; 0xfa
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e006      	b.n	8003cc6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d0ee      	beq.n	8003ca2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b004      	add	sp, #16
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2240      	movs	r2, #64	; 0x40
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d11a      	bne.n	8003d18 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4252      	negs	r2, r2
 8003cea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003cec:	f7fc fbfa 	bl	80004e4 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003cf4:	e00a      	b.n	8003d0c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003cf6:	f7fc fbf5 	bl	80004e4 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	23fa      	movs	r3, #250	; 0xfa
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d901      	bls.n	8003d0c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e006      	b.n	8003d1a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2240      	movs	r2, #64	; 0x40
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0ee      	beq.n	8003cf6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	0002      	movs	r2, r0
 8003d2a:	1dfb      	adds	r3, r7, #7
 8003d2c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003d32:	230b      	movs	r3, #11
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	1dfa      	adds	r2, r7, #7
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003d3c:	e008      	b.n	8003d50 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003d44:	220b      	movs	r2, #11
 8003d46:	18bb      	adds	r3, r7, r2
 8003d48:	18ba      	adds	r2, r7, r2
 8003d4a:	7812      	ldrb	r2, [r2, #0]
 8003d4c:	3a0a      	subs	r2, #10
 8003d4e:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003d50:	230b      	movs	r3, #11
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b09      	cmp	r3, #9
 8003d58:	d8f1      	bhi.n	8003d3e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	230b      	movs	r3, #11
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b004      	add	sp, #16
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	5c9b      	ldrb	r3, [r3, r2]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e04e      	b.n	8003e28 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2221      	movs	r2, #33	; 0x21
 8003d96:	2102      	movs	r1, #2
 8003d98:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	22ca      	movs	r2, #202	; 0xca
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2253      	movs	r2, #83	; 0x53
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	491e      	ldr	r1, [pc, #120]	; (8003e30 <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	491b      	ldr	r1, [pc, #108]	; (8003e34 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003dca:	f7fc fb8b 	bl	80004e4 <HAL_GetTick>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003dd2:	e016      	b.n	8003e02 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dd4:	f7fc fb86 	bl	80004e4 <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad2      	subs	r2, r2, r3
 8003dde:	23fa      	movs	r3, #250	; 0xfa
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d90d      	bls.n	8003e02 <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	22ff      	movs	r2, #255	; 0xff
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2221      	movs	r2, #33	; 0x21
 8003df2:	2103      	movs	r1, #3
 8003df4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e012      	b.n	8003e28 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d0e2      	beq.n	8003dd4 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	22ff      	movs	r2, #255	; 0xff
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2221      	movs	r2, #33	; 0x21
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	2100      	movs	r1, #0
 8003e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	fffffbff 	.word	0xfffffbff
 8003e34:	ffffbfff 	.word	0xffffbfff

08003e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e044      	b.n	8003ed4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2270      	movs	r2, #112	; 0x70
 8003e56:	2100      	movs	r1, #0
 8003e58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f001 fd7d 	bl	800595c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2224      	movs	r2, #36	; 0x24
 8003e66:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f830 	bl	8003ee0 <UART_SetConfig>
 8003e80:	0003      	movs	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e024      	b.n	8003ed4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fafd 	bl	8004494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	490d      	ldr	r1, [pc, #52]	; (8003edc <HAL_UART_Init+0xa4>)
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	212a      	movs	r1, #42	; 0x2a
 8003eb6:	438a      	bics	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 fb95 	bl	80045fc <UART_CheckIdleState>
 8003ed2:	0003      	movs	r3, r0
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	ffffb7ff 	.word	0xffffb7ff

08003ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b08e      	sub	sp, #56	; 0x38
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003ee8:	231b      	movs	r3, #27
 8003eea:	2218      	movs	r2, #24
 8003eec:	4694      	mov	ip, r2
 8003eee:	44bc      	add	ip, r7
 8003ef0:	4463      	add	r3, ip
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efa:	2313      	movs	r3, #19
 8003efc:	2218      	movs	r2, #24
 8003efe:	4694      	mov	ip, r2
 8003f00:	44bc      	add	ip, r7
 8003f02:	4463      	add	r3, ip
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4ace      	ldr	r2, [pc, #824]	; (8004264 <UART_SetConfig+0x384>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4ac9      	ldr	r2, [pc, #804]	; (8004268 <UART_SetConfig+0x388>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4ac3      	ldr	r2, [pc, #780]	; (800426c <UART_SetConfig+0x38c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4abf      	ldr	r2, [pc, #764]	; (8004270 <UART_SetConfig+0x390>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4abb      	ldr	r2, [pc, #748]	; (8004274 <UART_SetConfig+0x394>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d137      	bne.n	8003ffc <UART_SetConfig+0x11c>
 8003f8c:	4bba      	ldr	r3, [pc, #744]	; (8004278 <UART_SetConfig+0x398>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f90:	220c      	movs	r2, #12
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d018      	beq.n	8003fca <UART_SetConfig+0xea>
 8003f98:	d802      	bhi.n	8003fa0 <UART_SetConfig+0xc0>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <UART_SetConfig+0xca>
 8003f9e:	e024      	b.n	8003fea <UART_SetConfig+0x10a>
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d00a      	beq.n	8003fba <UART_SetConfig+0xda>
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d018      	beq.n	8003fda <UART_SetConfig+0xfa>
 8003fa8:	e01f      	b.n	8003fea <UART_SetConfig+0x10a>
 8003faa:	231b      	movs	r3, #27
 8003fac:	2218      	movs	r2, #24
 8003fae:	4694      	mov	ip, r2
 8003fb0:	44bc      	add	ip, r7
 8003fb2:	4463      	add	r3, ip
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e06e      	b.n	8004098 <UART_SetConfig+0x1b8>
 8003fba:	231b      	movs	r3, #27
 8003fbc:	2218      	movs	r2, #24
 8003fbe:	4694      	mov	ip, r2
 8003fc0:	44bc      	add	ip, r7
 8003fc2:	4463      	add	r3, ip
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e066      	b.n	8004098 <UART_SetConfig+0x1b8>
 8003fca:	231b      	movs	r3, #27
 8003fcc:	2218      	movs	r2, #24
 8003fce:	4694      	mov	ip, r2
 8003fd0:	44bc      	add	ip, r7
 8003fd2:	4463      	add	r3, ip
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e05e      	b.n	8004098 <UART_SetConfig+0x1b8>
 8003fda:	231b      	movs	r3, #27
 8003fdc:	2218      	movs	r2, #24
 8003fde:	4694      	mov	ip, r2
 8003fe0:	44bc      	add	ip, r7
 8003fe2:	4463      	add	r3, ip
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e056      	b.n	8004098 <UART_SetConfig+0x1b8>
 8003fea:	231b      	movs	r3, #27
 8003fec:	2218      	movs	r2, #24
 8003fee:	4694      	mov	ip, r2
 8003ff0:	44bc      	add	ip, r7
 8003ff2:	4463      	add	r3, ip
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	e04d      	b.n	8004098 <UART_SetConfig+0x1b8>
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a9a      	ldr	r2, [pc, #616]	; (800426c <UART_SetConfig+0x38c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d141      	bne.n	800408a <UART_SetConfig+0x1aa>
 8004006:	4b9c      	ldr	r3, [pc, #624]	; (8004278 <UART_SetConfig+0x398>)
 8004008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800400a:	23c0      	movs	r3, #192	; 0xc0
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	4013      	ands	r3, r2
 8004010:	2280      	movs	r2, #128	; 0x80
 8004012:	00d2      	lsls	r2, r2, #3
 8004014:	4293      	cmp	r3, r2
 8004016:	d01f      	beq.n	8004058 <UART_SetConfig+0x178>
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	00d2      	lsls	r2, r2, #3
 800401c:	4293      	cmp	r3, r2
 800401e:	d802      	bhi.n	8004026 <UART_SetConfig+0x146>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <UART_SetConfig+0x158>
 8004024:	e028      	b.n	8004078 <UART_SetConfig+0x198>
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	4293      	cmp	r3, r2
 800402c:	d00c      	beq.n	8004048 <UART_SetConfig+0x168>
 800402e:	22c0      	movs	r2, #192	; 0xc0
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	4293      	cmp	r3, r2
 8004034:	d018      	beq.n	8004068 <UART_SetConfig+0x188>
 8004036:	e01f      	b.n	8004078 <UART_SetConfig+0x198>
 8004038:	231b      	movs	r3, #27
 800403a:	2218      	movs	r2, #24
 800403c:	4694      	mov	ip, r2
 800403e:	44bc      	add	ip, r7
 8004040:	4463      	add	r3, ip
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e027      	b.n	8004098 <UART_SetConfig+0x1b8>
 8004048:	231b      	movs	r3, #27
 800404a:	2218      	movs	r2, #24
 800404c:	4694      	mov	ip, r2
 800404e:	44bc      	add	ip, r7
 8004050:	4463      	add	r3, ip
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e01f      	b.n	8004098 <UART_SetConfig+0x1b8>
 8004058:	231b      	movs	r3, #27
 800405a:	2218      	movs	r2, #24
 800405c:	4694      	mov	ip, r2
 800405e:	44bc      	add	ip, r7
 8004060:	4463      	add	r3, ip
 8004062:	2204      	movs	r2, #4
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e017      	b.n	8004098 <UART_SetConfig+0x1b8>
 8004068:	231b      	movs	r3, #27
 800406a:	2218      	movs	r2, #24
 800406c:	4694      	mov	ip, r2
 800406e:	44bc      	add	ip, r7
 8004070:	4463      	add	r3, ip
 8004072:	2208      	movs	r2, #8
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e00f      	b.n	8004098 <UART_SetConfig+0x1b8>
 8004078:	231b      	movs	r3, #27
 800407a:	2218      	movs	r2, #24
 800407c:	4694      	mov	ip, r2
 800407e:	44bc      	add	ip, r7
 8004080:	4463      	add	r3, ip
 8004082:	2210      	movs	r2, #16
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	e006      	b.n	8004098 <UART_SetConfig+0x1b8>
 800408a:	231b      	movs	r3, #27
 800408c:	2218      	movs	r2, #24
 800408e:	4694      	mov	ip, r2
 8004090:	44bc      	add	ip, r7
 8004092:	4463      	add	r3, ip
 8004094:	2210      	movs	r2, #16
 8004096:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a73      	ldr	r2, [pc, #460]	; (800426c <UART_SetConfig+0x38c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d000      	beq.n	80040a4 <UART_SetConfig+0x1c4>
 80040a2:	e083      	b.n	80041ac <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040a4:	231b      	movs	r3, #27
 80040a6:	2218      	movs	r2, #24
 80040a8:	4694      	mov	ip, r2
 80040aa:	44bc      	add	ip, r7
 80040ac:	4463      	add	r3, ip
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d00d      	beq.n	80040d0 <UART_SetConfig+0x1f0>
 80040b4:	dc02      	bgt.n	80040bc <UART_SetConfig+0x1dc>
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <UART_SetConfig+0x1e6>
 80040ba:	e01d      	b.n	80040f8 <UART_SetConfig+0x218>
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d012      	beq.n	80040e6 <UART_SetConfig+0x206>
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d015      	beq.n	80040f0 <UART_SetConfig+0x210>
 80040c4:	e018      	b.n	80040f8 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80040c6:	f7ff f805 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80040ca:	0003      	movs	r3, r0
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040ce:	e01b      	b.n	8004108 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040d0:	4b69      	ldr	r3, [pc, #420]	; (8004278 <UART_SetConfig+0x398>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2210      	movs	r2, #16
 80040d6:	4013      	ands	r3, r2
 80040d8:	d002      	beq.n	80040e0 <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80040da:	4b68      	ldr	r3, [pc, #416]	; (800427c <UART_SetConfig+0x39c>)
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80040de:	e013      	b.n	8004108 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80040e0:	4b67      	ldr	r3, [pc, #412]	; (8004280 <UART_SetConfig+0x3a0>)
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040e4:	e010      	b.n	8004108 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80040e6:	f7fe ff67 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 80040ea:	0003      	movs	r3, r0
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040ee:	e00b      	b.n	8004108 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040f6:	e007      	b.n	8004108 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80040f8:	2313      	movs	r3, #19
 80040fa:	2218      	movs	r2, #24
 80040fc:	4694      	mov	ip, r2
 80040fe:	44bc      	add	ip, r7
 8004100:	4463      	add	r3, ip
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
        break;
 8004106:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d100      	bne.n	8004110 <UART_SetConfig+0x230>
 800410e:	e1a7      	b.n	8004460 <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	0013      	movs	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	189b      	adds	r3, r3, r2
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	429a      	cmp	r2, r3
 800411e:	d305      	bcc.n	800412c <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	429a      	cmp	r2, r3
 800412a:	d907      	bls.n	800413c <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 800412c:	2313      	movs	r3, #19
 800412e:	2218      	movs	r2, #24
 8004130:	4694      	mov	ip, r2
 8004132:	44bc      	add	ip, r7
 8004134:	4463      	add	r3, ip
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	e191      	b.n	8004460 <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	000b      	movs	r3, r1
 800414a:	0e1b      	lsrs	r3, r3, #24
 800414c:	0010      	movs	r0, r2
 800414e:	0205      	lsls	r5, r0, #8
 8004150:	431d      	orrs	r5, r3
 8004152:	000b      	movs	r3, r1
 8004154:	021c      	lsls	r4, r3, #8
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68b8      	ldr	r0, [r7, #8]
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	1900      	adds	r0, r0, r4
 8004168:	4169      	adcs	r1, r5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	2300      	movs	r3, #0
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f7fc f852 	bl	8000220 <__aeabi_uldivmod>
 800417c:	0003      	movs	r3, r0
 800417e:	000c      	movs	r4, r1
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <UART_SetConfig+0x3a4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d908      	bls.n	800419c <UART_SetConfig+0x2bc>
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	4a3e      	ldr	r2, [pc, #248]	; (8004288 <UART_SetConfig+0x3a8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d804      	bhi.n	800419c <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e161      	b.n	8004460 <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 800419c:	2313      	movs	r3, #19
 800419e:	2218      	movs	r2, #24
 80041a0:	4694      	mov	ip, r2
 80041a2:	44bc      	add	ip, r7
 80041a4:	4463      	add	r3, ip
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e159      	b.n	8004460 <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d000      	beq.n	80041ba <UART_SetConfig+0x2da>
 80041b8:	e0c4      	b.n	8004344 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 80041ba:	231b      	movs	r3, #27
 80041bc:	2218      	movs	r2, #24
 80041be:	4694      	mov	ip, r2
 80041c0:	44bc      	add	ip, r7
 80041c2:	4463      	add	r3, ip
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d900      	bls.n	80041cc <UART_SetConfig+0x2ec>
 80041ca:	e087      	b.n	80042dc <UART_SetConfig+0x3fc>
 80041cc:	009a      	lsls	r2, r3, #2
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <UART_SetConfig+0x3ac>)
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80041d6:	f7fe ff7d 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 80041da:	0003      	movs	r3, r0
 80041dc:	005a      	lsls	r2, r3, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	18d2      	adds	r2, r2, r3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	0019      	movs	r1, r3
 80041ec:	0010      	movs	r0, r2
 80041ee:	f7fb ff8b 	bl	8000108 <__udivsi3>
 80041f2:	0003      	movs	r3, r0
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041f8:	e078      	b.n	80042ec <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80041fa:	f7fe ff81 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 80041fe:	0003      	movs	r3, r0
 8004200:	005a      	lsls	r2, r3, #1
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	18d2      	adds	r2, r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	0019      	movs	r1, r3
 8004210:	0010      	movs	r0, r2
 8004212:	f7fb ff79 	bl	8000108 <__udivsi3>
 8004216:	0003      	movs	r3, r0
 8004218:	b29b      	uxth	r3, r3
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800421c:	e066      	b.n	80042ec <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <UART_SetConfig+0x398>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2210      	movs	r2, #16
 8004224:	4013      	ands	r3, r2
 8004226:	d00e      	beq.n	8004246 <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	4a18      	ldr	r2, [pc, #96]	; (8004290 <UART_SetConfig+0x3b0>)
 8004230:	189a      	adds	r2, r3, r2
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	0019      	movs	r1, r3
 8004238:	0010      	movs	r0, r2
 800423a:	f7fb ff65 	bl	8000108 <__udivsi3>
 800423e:	0003      	movs	r3, r0
 8004240:	b29b      	uxth	r3, r3
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8004244:	e052      	b.n	80042ec <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <UART_SetConfig+0x3b4>)
 800424e:	189a      	adds	r2, r3, r2
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0019      	movs	r1, r3
 8004256:	0010      	movs	r0, r2
 8004258:	f7fb ff56 	bl	8000108 <__udivsi3>
 800425c:	0003      	movs	r3, r0
 800425e:	b29b      	uxth	r3, r3
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004262:	e043      	b.n	80042ec <UART_SetConfig+0x40c>
 8004264:	efff69f3 	.word	0xefff69f3
 8004268:	ffffcfff 	.word	0xffffcfff
 800426c:	40004800 	.word	0x40004800
 8004270:	fffff4ff 	.word	0xfffff4ff
 8004274:	40004400 	.word	0x40004400
 8004278:	40021000 	.word	0x40021000
 800427c:	003d0900 	.word	0x003d0900
 8004280:	00f42400 	.word	0x00f42400
 8004284:	000002ff 	.word	0x000002ff
 8004288:	000fffff 	.word	0x000fffff
 800428c:	080064ac 	.word	0x080064ac
 8004290:	007a1200 	.word	0x007a1200
 8004294:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004298:	f7fe fe8e 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 800429c:	0003      	movs	r3, r0
 800429e:	005a      	lsls	r2, r3, #1
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	18d2      	adds	r2, r2, r3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	0019      	movs	r1, r3
 80042ae:	0010      	movs	r0, r2
 80042b0:	f7fb ff2a 	bl	8000108 <__udivsi3>
 80042b4:	0003      	movs	r3, r0
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ba:	e017      	b.n	80042ec <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	0252      	lsls	r2, r2, #9
 80042c6:	189a      	adds	r2, r3, r2
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0019      	movs	r1, r3
 80042ce:	0010      	movs	r0, r2
 80042d0:	f7fb ff1a 	bl	8000108 <__udivsi3>
 80042d4:	0003      	movs	r3, r0
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042da:	e007      	b.n	80042ec <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80042dc:	2313      	movs	r3, #19
 80042de:	2218      	movs	r2, #24
 80042e0:	4694      	mov	ip, r2
 80042e2:	44bc      	add	ip, r7
 80042e4:	4463      	add	r3, ip
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
        break;
 80042ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d920      	bls.n	8004334 <UART_SetConfig+0x454>
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	4a62      	ldr	r2, [pc, #392]	; (8004480 <UART_SetConfig+0x5a0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d81c      	bhi.n	8004334 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	200a      	movs	r0, #10
 8004300:	2418      	movs	r4, #24
 8004302:	193b      	adds	r3, r7, r4
 8004304:	181b      	adds	r3, r3, r0
 8004306:	210f      	movs	r1, #15
 8004308:	438a      	bics	r2, r1
 800430a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	b29b      	uxth	r3, r3
 8004312:	2207      	movs	r2, #7
 8004314:	4013      	ands	r3, r2
 8004316:	b299      	uxth	r1, r3
 8004318:	193b      	adds	r3, r7, r4
 800431a:	181b      	adds	r3, r3, r0
 800431c:	193a      	adds	r2, r7, r4
 800431e:	1812      	adds	r2, r2, r0
 8004320:	8812      	ldrh	r2, [r2, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	193a      	adds	r2, r7, r4
 800432c:	1812      	adds	r2, r2, r0
 800432e:	8812      	ldrh	r2, [r2, #0]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	e095      	b.n	8004460 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8004334:	2313      	movs	r3, #19
 8004336:	2218      	movs	r2, #24
 8004338:	4694      	mov	ip, r2
 800433a:	44bc      	add	ip, r7
 800433c:	4463      	add	r3, ip
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e08d      	b.n	8004460 <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 8004344:	231b      	movs	r3, #27
 8004346:	2218      	movs	r2, #24
 8004348:	4694      	mov	ip, r2
 800434a:	44bc      	add	ip, r7
 800434c:	4463      	add	r3, ip
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d86a      	bhi.n	800442a <UART_SetConfig+0x54a>
 8004354:	009a      	lsls	r2, r3, #2
 8004356:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <UART_SetConfig+0x5a4>)
 8004358:	18d3      	adds	r3, r2, r3
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800435e:	f7fe feb9 	bl	80030d4 <HAL_RCC_GetPCLK1Freq>
 8004362:	0002      	movs	r2, r0
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	18d2      	adds	r2, r2, r3
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	0019      	movs	r1, r3
 8004372:	0010      	movs	r0, r2
 8004374:	f7fb fec8 	bl	8000108 <__udivsi3>
 8004378:	0003      	movs	r3, r0
 800437a:	b29b      	uxth	r3, r3
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800437e:	e05c      	b.n	800443a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004380:	f7fe febe 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8004384:	0002      	movs	r2, r0
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	18d2      	adds	r2, r2, r3
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	0019      	movs	r1, r3
 8004394:	0010      	movs	r0, r2
 8004396:	f7fb feb7 	bl	8000108 <__udivsi3>
 800439a:	0003      	movs	r3, r0
 800439c:	b29b      	uxth	r3, r3
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043a0:	e04b      	b.n	800443a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a2:	4b39      	ldr	r3, [pc, #228]	; (8004488 <UART_SetConfig+0x5a8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2210      	movs	r2, #16
 80043a8:	4013      	ands	r3, r2
 80043aa:	d00e      	beq.n	80043ca <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	4a36      	ldr	r2, [pc, #216]	; (800448c <UART_SetConfig+0x5ac>)
 80043b4:	189a      	adds	r2, r3, r2
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	0019      	movs	r1, r3
 80043bc:	0010      	movs	r0, r2
 80043be:	f7fb fea3 	bl	8000108 <__udivsi3>
 80043c2:	0003      	movs	r3, r0
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80043c8:	e037      	b.n	800443a <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	4a2f      	ldr	r2, [pc, #188]	; (8004490 <UART_SetConfig+0x5b0>)
 80043d2:	189a      	adds	r2, r3, r2
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0019      	movs	r1, r3
 80043da:	0010      	movs	r0, r2
 80043dc:	f7fb fe94 	bl	8000108 <__udivsi3>
 80043e0:	0003      	movs	r3, r0
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043e6:	e028      	b.n	800443a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043e8:	f7fe fde6 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 80043ec:	0002      	movs	r2, r0
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0019      	movs	r1, r3
 80043fc:	0010      	movs	r0, r2
 80043fe:	f7fb fe83 	bl	8000108 <__udivsi3>
 8004402:	0003      	movs	r3, r0
 8004404:	b29b      	uxth	r3, r3
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004408:	e017      	b.n	800443a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	0212      	lsls	r2, r2, #8
 8004414:	189a      	adds	r2, r3, r2
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f7fb fe73 	bl	8000108 <__udivsi3>
 8004422:	0003      	movs	r3, r0
 8004424:	b29b      	uxth	r3, r3
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004428:	e007      	b.n	800443a <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800442a:	2313      	movs	r3, #19
 800442c:	2218      	movs	r2, #24
 800442e:	4694      	mov	ip, r2
 8004430:	44bc      	add	ip, r7
 8004432:	4463      	add	r3, ip
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
        break;
 8004438:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	2b0f      	cmp	r3, #15
 800443e:	d908      	bls.n	8004452 <UART_SetConfig+0x572>
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <UART_SetConfig+0x5a0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d804      	bhi.n	8004452 <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800444e:	60da      	str	r2, [r3, #12]
 8004450:	e006      	b.n	8004460 <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 8004452:	2313      	movs	r3, #19
 8004454:	2218      	movs	r2, #24
 8004456:	4694      	mov	ip, r2
 8004458:	44bc      	add	ip, r7
 800445a:	4463      	add	r3, ip
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2200      	movs	r2, #0
 8004464:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	2200      	movs	r2, #0
 800446a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800446c:	2313      	movs	r3, #19
 800446e:	2218      	movs	r2, #24
 8004470:	4694      	mov	ip, r2
 8004472:	44bc      	add	ip, r7
 8004474:	4463      	add	r3, ip
 8004476:	781b      	ldrb	r3, [r3, #0]
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b00e      	add	sp, #56	; 0x38
 800447e:	bdb0      	pop	{r4, r5, r7, pc}
 8004480:	0000ffff 	.word	0x0000ffff
 8004484:	080064d0 	.word	0x080064d0
 8004488:	40021000 	.word	0x40021000
 800448c:	003d0900 	.word	0x003d0900
 8004490:	00f42400 	.word	0x00f42400

08004494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2201      	movs	r2, #1
 80044a2:	4013      	ands	r3, r2
 80044a4:	d00b      	beq.n	80044be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	4a4a      	ldr	r2, [pc, #296]	; (80045d8 <UART_AdvFeatureConfig+0x144>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2202      	movs	r2, #2
 80044c4:	4013      	ands	r3, r2
 80044c6:	d00b      	beq.n	80044e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4a43      	ldr	r2, [pc, #268]	; (80045dc <UART_AdvFeatureConfig+0x148>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	2204      	movs	r2, #4
 80044e6:	4013      	ands	r3, r2
 80044e8:	d00b      	beq.n	8004502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a3b      	ldr	r2, [pc, #236]	; (80045e0 <UART_AdvFeatureConfig+0x14c>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2208      	movs	r2, #8
 8004508:	4013      	ands	r3, r2
 800450a:	d00b      	beq.n	8004524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4a34      	ldr	r2, [pc, #208]	; (80045e4 <UART_AdvFeatureConfig+0x150>)
 8004514:	4013      	ands	r3, r2
 8004516:	0019      	movs	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	2210      	movs	r2, #16
 800452a:	4013      	ands	r3, r2
 800452c:	d00b      	beq.n	8004546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <UART_AdvFeatureConfig+0x154>)
 8004536:	4013      	ands	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2220      	movs	r2, #32
 800454c:	4013      	ands	r3, r2
 800454e:	d00b      	beq.n	8004568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4a25      	ldr	r2, [pc, #148]	; (80045ec <UART_AdvFeatureConfig+0x158>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2240      	movs	r2, #64	; 0x40
 800456e:	4013      	ands	r3, r2
 8004570:	d01d      	beq.n	80045ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <UART_AdvFeatureConfig+0x15c>)
 800457a:	4013      	ands	r3, r2
 800457c:	0019      	movs	r1, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	035b      	lsls	r3, r3, #13
 8004592:	429a      	cmp	r2, r3
 8004594:	d10b      	bne.n	80045ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <UART_AdvFeatureConfig+0x160>)
 800459e:	4013      	ands	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	4013      	ands	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <UART_AdvFeatureConfig+0x164>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	fffdffff 	.word	0xfffdffff
 80045dc:	fffeffff 	.word	0xfffeffff
 80045e0:	fffbffff 	.word	0xfffbffff
 80045e4:	ffff7fff 	.word	0xffff7fff
 80045e8:	ffffefff 	.word	0xffffefff
 80045ec:	ffffdfff 	.word	0xffffdfff
 80045f0:	ffefffff 	.word	0xffefffff
 80045f4:	ff9fffff 	.word	0xff9fffff
 80045f8:	fff7ffff 	.word	0xfff7ffff

080045fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af02      	add	r7, sp, #8
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800460a:	f7fb ff6b 	bl	80004e4 <HAL_GetTick>
 800460e:	0003      	movs	r3, r0
 8004610:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2208      	movs	r2, #8
 800461a:	4013      	ands	r3, r2
 800461c:	2b08      	cmp	r3, #8
 800461e:	d10d      	bne.n	800463c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	0399      	lsls	r1, r3, #14
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4b16      	ldr	r3, [pc, #88]	; (8004684 <UART_CheckIdleState+0x88>)
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	0013      	movs	r3, r2
 800462e:	2200      	movs	r2, #0
 8004630:	f000 f82a 	bl	8004688 <UART_WaitOnFlagUntilTimeout>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e01f      	b.n	800467c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2204      	movs	r2, #4
 8004644:	4013      	ands	r3, r2
 8004646:	2b04      	cmp	r3, #4
 8004648:	d10d      	bne.n	8004666 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	03d9      	lsls	r1, r3, #15
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <UART_CheckIdleState+0x88>)
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	0013      	movs	r3, r2
 8004658:	2200      	movs	r2, #0
 800465a:	f000 f815 	bl	8004688 <UART_WaitOnFlagUntilTimeout>
 800465e:	1e03      	subs	r3, r0, #0
 8004660:	d001      	beq.n	8004666 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00a      	b.n	800467c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2270      	movs	r2, #112	; 0x70
 8004676:	2100      	movs	r1, #0
 8004678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b004      	add	sp, #16
 8004682:	bd80      	pop	{r7, pc}
 8004684:	01ffffff 	.word	0x01ffffff

08004688 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	1dfb      	adds	r3, r7, #7
 8004696:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004698:	e029      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3301      	adds	r3, #1
 800469e:	d026      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fb ff20 	bl	80004e4 <HAL_GetTick>
 80046a4:	0002      	movs	r2, r0
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11b      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4915      	ldr	r1, [pc, #84]	; (8004718 <UART_WaitOnFlagUntilTimeout+0x90>)
 80046c2:	400a      	ands	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2101      	movs	r1, #1
 80046d2:	438a      	bics	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2270      	movs	r2, #112	; 0x70
 80046e6:	2100      	movs	r1, #0
 80046e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e00f      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	425a      	negs	r2, r3
 80046fe:	4153      	adcs	r3, r2
 8004700:	b2db      	uxtb	r3, r3
 8004702:	001a      	movs	r2, r3
 8004704:	1dfb      	adds	r3, r7, #7
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d0c6      	beq.n	800469a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	fffffe5f 	.word	0xfffffe5f

0800471c <HAL_ADC_ConvCpltCallback>:
void GotoStandby();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <HAL_ADC_ConvCpltCallback+0x48>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d116      	bne.n	800475c <HAL_ADC_ConvCpltCallback+0x40>
		//IN4 : Pin A3 Soil
		//IN5 : Pin A4
		//IN6 : Pin A5
		//Temp
		//Vref
		ADC_Soil = ADC_buf[0];
 800472e:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <HAL_ADC_ConvCpltCallback+0x4c>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_ADC_ConvCpltCallback+0x50>)
 8004734:	601a      	str	r2, [r3, #0]
		ADC_VSolar = ADC_buf[1];
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <HAL_ADC_ConvCpltCallback+0x4c>)
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <HAL_ADC_ConvCpltCallback+0x54>)
 800473c:	601a      	str	r2, [r3, #0]
		ADC_Vreg = ADC_buf[2];
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <HAL_ADC_ConvCpltCallback+0x4c>)
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <HAL_ADC_ConvCpltCallback+0x58>)
 8004744:	601a      	str	r2, [r3, #0]
		ADC_Temp = ADC_buf[2];
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <HAL_ADC_ConvCpltCallback+0x4c>)
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_ADC_ConvCpltCallback+0x5c>)
 800474c:	601a      	str	r2, [r3, #0]
		ADC_Vref = ADC_buf[3];
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_ADC_ConvCpltCallback+0x4c>)
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_ADC_ConvCpltCallback+0x60>)
 8004754:	601a      	str	r2, [r3, #0]

		measureADCDone = true;
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_ADC_ConvCpltCallback+0x64>)
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]



	}

}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40012400 	.word	0x40012400
 8004768:	20000008 	.word	0x20000008
 800476c:	200004d8 	.word	0x200004d8
 8004770:	200005dc 	.word	0x200005dc
 8004774:	20000628 	.word	0x20000628
 8004778:	20000534 	.word	0x20000534
 800477c:	2000052c 	.word	0x2000052c
 8004780:	20000530 	.word	0x20000530

08004784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b0a5      	sub	sp, #148	; 0x94
 8004788:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800478a:	f7fb fe55 	bl	8000438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800478e:	f000 f9d1 	bl	8004b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004792:	f000 fc17 	bl	8004fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004796:	f000 fbf7 	bl	8004f88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800479a:	f000 fbc5 	bl	8004f28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800479e:	f000 fae7 	bl	8004d70 <MX_I2C1_Init>
  MX_ADC_Init();
 80047a2:	f000 fa43 	bl	8004c2c <MX_ADC_Init>
  MX_RTC_Init();
 80047a6:	f000 fb23 	bl	8004df0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  measureADCDone = false;
 80047aa:	4bce      	ldr	r3, [pc, #824]	; (8004ae4 <main+0x360>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]




  /* Run the ADC calibration in single-ended mode */
	if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 80047b0:	4bcd      	ldr	r3, [pc, #820]	; (8004ae8 <main+0x364>)
 80047b2:	2100      	movs	r1, #0
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fc fc6f 	bl	8001098 <HAL_ADCEx_Calibration_Start>
 80047ba:	1e03      	subs	r3, r0, #0
 80047bc:	d001      	beq.n	80047c2 <main+0x3e>
	{
	  /* Calibration Error */
	  Error_Handler();
 80047be:	f000 fdbf 	bl	8005340 <Error_Handler>
	}



  HAL_GPIO_WritePin(LCD_VCC_D2_GPIO_Port, LCD_VCC_D2_Pin, GPIO_PIN_SET);
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	0159      	lsls	r1, r3, #5
 80047c6:	23a0      	movs	r3, #160	; 0xa0
 80047c8:	05db      	lsls	r3, r3, #23
 80047ca:	2201      	movs	r2, #1
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fd fae4 	bl	8001d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HUM_SENSOR_VCC_A2_GPIO_Port, HUM_SENSOR_VCC_A2_Pin, GPIO_PIN_SET);
 80047d2:	23a0      	movs	r3, #160	; 0xa0
 80047d4:	05db      	lsls	r3, r3, #23
 80047d6:	2201      	movs	r2, #1
 80047d8:	2108      	movs	r1, #8
 80047da:	0018      	movs	r0, r3
 80047dc:	f7fd fadd 	bl	8001d9a <HAL_GPIO_WritePin>

#ifdef OLED_DISPLAY
  ssd1306_Init();
 80047e0:	f000 fdcc 	bl	800537c <ssd1306_Init>
  HAL_Delay(100);
 80047e4:	2064      	movs	r0, #100	; 0x64
 80047e6:	f7fb fe87 	bl	80004f8 <HAL_Delay>
  ssd1306_Fill(Black);
 80047ea:	2000      	movs	r0, #0
 80047ec:	f000 fe34 	bl	8005458 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80047f0:	f000 fe56 	bl	80054a0 <ssd1306_UpdateScreen>
  HAL_Delay(100);
 80047f4:	2064      	movs	r0, #100	; 0x64
 80047f6:	f7fb fe7f 	bl	80004f8 <HAL_Delay>
  ssd1306_SetCursor(2,2);
 80047fa:	2102      	movs	r1, #2
 80047fc:	2002      	movs	r0, #2
 80047fe:	f000 ffaf 	bl	8005760 <ssd1306_SetCursor>
#endif
  /* Check and handle if the system was resumed from StandBy mode */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004802:	4bba      	ldr	r3, [pc, #744]	; (8004aec <main+0x368>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	4013      	ands	r3, r2
 800480a:	2b02      	cmp	r3, #2
 800480c:	d113      	bne.n	8004836 <main+0xb2>
  {
	/* Clear Standby flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800480e:	4bb7      	ldr	r3, [pc, #732]	; (8004aec <main+0x368>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4bb6      	ldr	r3, [pc, #728]	; (8004aec <main+0x368>)
 8004814:	2108      	movs	r1, #8
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
#ifdef OLED_DISPLAY
	ssd1306_WriteString("Wake up",Font_7x10,White);
 800481a:	4ab5      	ldr	r2, [pc, #724]	; (8004af0 <main+0x36c>)
 800481c:	48b5      	ldr	r0, [pc, #724]	; (8004af4 <main+0x370>)
 800481e:	2301      	movs	r3, #1
 8004820:	6811      	ldr	r1, [r2, #0]
 8004822:	6852      	ldr	r2, [r2, #4]
 8004824:	f000 ff72 	bl	800570c <ssd1306_WriteString>
#endif
	measureADCDone = false;
 8004828:	4bae      	ldr	r3, [pc, #696]	; (8004ae4 <main+0x360>)
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
	SleepOccurs = true;
 800482e:	4bb2      	ldr	r3, [pc, #712]	; (8004af8 <main+0x374>)
 8004830:	2201      	movs	r2, #1
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e038      	b.n	80048a8 <main+0x124>

  }
  else
  {
#ifdef OLED_DISPLAY
	  ssd1306_WriteString("First Init",Font_7x10,White);
 8004836:	4aae      	ldr	r2, [pc, #696]	; (8004af0 <main+0x36c>)
 8004838:	48b0      	ldr	r0, [pc, #704]	; (8004afc <main+0x378>)
 800483a:	2301      	movs	r3, #1
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	6852      	ldr	r2, [r2, #4]
 8004840:	f000 ff64 	bl	800570c <ssd1306_WriteString>
#endif
	  SleepOccurs = false;
 8004844:	4bac      	ldr	r3, [pc, #688]	; (8004af8 <main+0x374>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
	  //MeasureCounter = 0 ;
#ifdef USE_EEPROM
	  if (HAL_GPIO_ReadPin(WRITE_EEPROM_D3_GPIO_Port,WRITE_EEPROM_D3_Pin))
 800484a:	4bad      	ldr	r3, [pc, #692]	; (8004b00 <main+0x37c>)
 800484c:	2101      	movs	r1, #1
 800484e:	0018      	movs	r0, r3
 8004850:	f7fd fa86 	bl	8001d60 <HAL_GPIO_ReadPin>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d027      	beq.n	80048a8 <main+0x124>
	  	{

		ssd1306_SetCursor(0,13);
 8004858:	210d      	movs	r1, #13
 800485a:	2000      	movs	r0, #0
 800485c:	f000 ff80 	bl	8005760 <ssd1306_SetCursor>
		ssd1306_WriteString("ERASE EEPROM",Font_7x10,White);
 8004860:	4aa3      	ldr	r2, [pc, #652]	; (8004af0 <main+0x36c>)
 8004862:	48a8      	ldr	r0, [pc, #672]	; (8004b04 <main+0x380>)
 8004864:	2301      	movs	r3, #1
 8004866:	6811      	ldr	r1, [r2, #0]
 8004868:	6852      	ldr	r2, [r2, #4]
 800486a:	f000 ff4f 	bl	800570c <ssd1306_WriteString>

		  //Erase all Data in EEPROM
		  HAL_FLASHEx_DATAEEPROM_Unlock();
 800486e:	f7fd f84b 	bl	8001908 <HAL_FLASHEx_DATAEEPROM_Unlock>
		  for (int i = 0; i < (NUMBER_OF_MEASURE *3)+1 ; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	228c      	movs	r2, #140	; 0x8c
 8004876:	18ba      	adds	r2, r7, r2
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e00e      	b.n	800489a <main+0x116>
		  {
			  HAL_FLASHEx_DATAEEPROM_Erase(DATA_EEPROM_START_ADDR + i*4);
 800487c:	248c      	movs	r4, #140	; 0x8c
 800487e:	193b      	adds	r3, r7, r4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4aa1      	ldr	r2, [pc, #644]	; (8004b08 <main+0x384>)
 8004884:	4694      	mov	ip, r2
 8004886:	4463      	add	r3, ip
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	0018      	movs	r0, r3
 800488c:	f7fd f876 	bl	800197c <HAL_FLASHEx_DATAEEPROM_Erase>
		  for (int i = 0; i < (NUMBER_OF_MEASURE *3)+1 ; i++)
 8004890:	193b      	adds	r3, r7, r4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	193a      	adds	r2, r7, r4
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	238c      	movs	r3, #140	; 0x8c
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b90      	cmp	r3, #144	; 0x90
 80048a2:	ddeb      	ble.n	800487c <main+0xf8>
		  }
		  HAL_FLASHEx_DATAEEPROM_Lock();
 80048a4:	f7fd f85c 	bl	8001960 <HAL_FLASHEx_DATAEEPROM_Lock>
  }



#ifdef OLED_DISPLAY
  ssd1306_UpdateScreen();
 80048a8:	f000 fdfa 	bl	80054a0 <ssd1306_UpdateScreen>
#endif

  HAL_Delay(1000);
 80048ac:	23fa      	movs	r3, #250	; 0xfa
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fb fe21 	bl	80004f8 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc,(uint32_t*)ADC_buf,sizeof(ADC_buf));
 80048b6:	4995      	ldr	r1, [pc, #596]	; (8004b0c <main+0x388>)
 80048b8:	4b8b      	ldr	r3, [pc, #556]	; (8004ae8 <main+0x364>)
 80048ba:	2218      	movs	r2, #24
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fc f867 	bl	8000990 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    //Start ADC conversion
	if (measureADCDone == false)
 80048c2:	4b88      	ldr	r3, [pc, #544]	; (8004ae4 <main+0x360>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	4053      	eors	r3, r2
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <main+0x164>
	{

		HAL_GPIO_WritePin(HUM_SENSOR_VCC_A2_GPIO_Port, HUM_SENSOR_VCC_A2_Pin, GPIO_PIN_SET);
 80048d0:	23a0      	movs	r3, #160	; 0xa0
 80048d2:	05db      	lsls	r3, r3, #23
 80048d4:	2201      	movs	r2, #1
 80048d6:	2108      	movs	r1, #8
 80048d8:	0018      	movs	r0, r3
 80048da:	f7fd fa5e 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_ADC_Start_IT(&hadc);
 80048de:	4b82      	ldr	r3, [pc, #520]	; (8004ae8 <main+0x364>)
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7fb ff9b 	bl	800081c <HAL_ADC_Start_IT>
 80048e6:	e069      	b.n	80049bc <main+0x238>

	}

	else
	{
		HAL_GPIO_WritePin(HUM_SENSOR_VCC_A2_GPIO_Port, HUM_SENSOR_VCC_A2_Pin, GPIO_PIN_RESET);
 80048e8:	23a0      	movs	r3, #160	; 0xa0
 80048ea:	05db      	lsls	r3, r3, #23
 80048ec:	2200      	movs	r2, #0
 80048ee:	2108      	movs	r1, #8
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7fd fa52 	bl	8001d9a <HAL_GPIO_WritePin>
		HAL_ADC_Stop_IT(&hadc);
 80048f6:	4b7c      	ldr	r3, [pc, #496]	; (8004ae8 <main+0x364>)
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fc f801 	bl	8000900 <HAL_ADC_Stop_IT>

//		if (HAL_GPIO_ReadPin(WRITE_EEPROM_D3_GPIO_Port,WRITE_EEPROM_D3_Pin))
//		{
			MeasureCounter = *(uint32_t*) (DATA_EEPROM_START_ADDR);
 80048fe:	4b84      	ldr	r3, [pc, #528]	; (8004b10 <main+0x38c>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b84      	ldr	r3, [pc, #528]	; (8004b14 <main+0x390>)
 8004904:	601a      	str	r2, [r3, #0]
//		}
		MeasureCounter = MeasureCounter % NUMBER_OF_MEASURE + 1;
 8004906:	4b83      	ldr	r3, [pc, #524]	; (8004b14 <main+0x390>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2130      	movs	r1, #48	; 0x30
 800490c:	0018      	movs	r0, r3
 800490e:	f7fb fc81 	bl	8000214 <__aeabi_uidivmod>
 8004912:	000b      	movs	r3, r1
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	4b7f      	ldr	r3, [pc, #508]	; (8004b14 <main+0x390>)
 8004918:	601a      	str	r2, [r3, #0]


#ifdef USE_EEPROM
//		if (HAL_GPIO_ReadPin(WRITE_EEPROM_D3_GPIO_Port,WRITE_EEPROM_D3_Pin))
//		{
			HAL_FLASHEx_DATAEEPROM_Unlock();
 800491a:	f7fc fff5 	bl	8001908 <HAL_FLASHEx_DATAEEPROM_Unlock>
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080000, MeasureCounter);
 800491e:	4b7d      	ldr	r3, [pc, #500]	; (8004b14 <main+0x390>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	497b      	ldr	r1, [pc, #492]	; (8004b10 <main+0x38c>)
 8004924:	001a      	movs	r2, r3
 8004926:	2002      	movs	r0, #2
 8004928:	f7fd f854 	bl	80019d4 <HAL_FLASHEx_DATAEEPROM_Program>
			//save SUN measure
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080000 + ((MeasureCounter) *4), ADC_buf[1]);
 800492c:	4b79      	ldr	r3, [pc, #484]	; (8004b14 <main+0x390>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a75      	ldr	r2, [pc, #468]	; (8004b08 <main+0x384>)
 8004932:	4694      	mov	ip, r2
 8004934:	4463      	add	r3, ip
 8004936:	0099      	lsls	r1, r3, #2
 8004938:	4b74      	ldr	r3, [pc, #464]	; (8004b0c <main+0x388>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	001a      	movs	r2, r3
 800493e:	2002      	movs	r0, #2
 8004940:	f7fd f848 	bl	80019d4 <HAL_FLASHEx_DATAEEPROM_Program>
			//save Vcc Measure
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080000 + NUMBER_OF_MEASURE *4 + ((MeasureCounter) *4), ADC_buf[2]);
 8004944:	4b73      	ldr	r3, [pc, #460]	; (8004b14 <main+0x390>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a73      	ldr	r2, [pc, #460]	; (8004b18 <main+0x394>)
 800494a:	4694      	mov	ip, r2
 800494c:	4463      	add	r3, ip
 800494e:	0099      	lsls	r1, r3, #2
 8004950:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <main+0x388>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	001a      	movs	r2, r3
 8004956:	2002      	movs	r0, #2
 8004958:	f7fd f83c 	bl	80019d4 <HAL_FLASHEx_DATAEEPROM_Program>
			//save Vref
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, 0x08080000 + NUMBER_OF_MEASURE *2*4 + ((MeasureCounter) *4), ADC_buf[4]);
 800495c:	4b6d      	ldr	r3, [pc, #436]	; (8004b14 <main+0x390>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a6e      	ldr	r2, [pc, #440]	; (8004b1c <main+0x398>)
 8004962:	4694      	mov	ip, r2
 8004964:	4463      	add	r3, ip
 8004966:	0099      	lsls	r1, r3, #2
 8004968:	4b68      	ldr	r3, [pc, #416]	; (8004b0c <main+0x388>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	001a      	movs	r2, r3
 800496e:	2002      	movs	r0, #2
 8004970:	f7fd f830 	bl	80019d4 <HAL_FLASHEx_DATAEEPROM_Program>
			HAL_FLASHEx_DATAEEPROM_Lock();
 8004974:	f7fc fff4 	bl	8001960 <HAL_FLASHEx_DATAEEPROM_Lock>
//		}
#endif
#ifdef OLED_DISPLAY
		//Display information on OLED
		UpdateDisplay();
 8004978:	f000 fbfc 	bl	8005174 <UpdateDisplay>
#endif

		//give some time to read LCD
		if (SleepOccurs == true)
 800497c:	4b5e      	ldr	r3, [pc, #376]	; (8004af8 <main+0x374>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <main+0x210>
		{
			HAL_Delay(2000);
 8004984:	23fa      	movs	r3, #250	; 0xfa
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	0018      	movs	r0, r3
 800498a:	f7fb fdb5 	bl	80004f8 <HAL_Delay>
			SleepOccurs =false;
 800498e:	4b5a      	ldr	r3, [pc, #360]	; (8004af8 <main+0x374>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
		}


		MeasureCounter ++;
 8004994:	4b5f      	ldr	r3, [pc, #380]	; (8004b14 <main+0x390>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	4b5e      	ldr	r3, [pc, #376]	; (8004b14 <main+0x390>)
 800499c:	601a      	str	r2, [r3, #0]
		measureADCDone = false;
 800499e:	4b51      	ldr	r3, [pc, #324]	; (8004ae4 <main+0x360>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]

		//EnterStandy
		if (HAL_GPIO_ReadPin(Sleep_D9_GPIO_Port,Sleep_D9_Pin))
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	005a      	lsls	r2, r3, #1
 80049a8:	23a0      	movs	r3, #160	; 0xa0
 80049aa:	05db      	lsls	r3, r3, #23
 80049ac:	0011      	movs	r1, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f7fd f9d6 	bl	8001d60 <HAL_GPIO_ReadPin>
 80049b4:	1e03      	subs	r3, r0, #0
 80049b6:	d001      	beq.n	80049bc <main+0x238>
		{
			GotoStandby();
 80049b8:	f000 fb90 	bl	80050dc <GotoStandby>


	}

    //blink LED
    uint32_t blinkTime = 100;
 80049bc:	2364      	movs	r3, #100	; 0x64
 80049be:	2484      	movs	r4, #132	; 0x84
 80049c0:	193a      	adds	r2, r7, r4
 80049c2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <main+0x37c>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	2108      	movs	r1, #8
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7fd f9e5 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_Delay(blinkTime);
 80049d0:	193b      	adds	r3, r7, r4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7fb fd8f 	bl	80004f8 <HAL_Delay>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80049da:	4b49      	ldr	r3, [pc, #292]	; (8004b00 <main+0x37c>)
 80049dc:	2200      	movs	r2, #0
 80049de:	2108      	movs	r1, #8
 80049e0:	0018      	movs	r0, r3
 80049e2:	f7fd f9da 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_Delay(blinkTime);
 80049e6:	193b      	adds	r3, r7, r4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f7fb fd84 	bl	80004f8 <HAL_Delay>

	if(ADC_Soil < 500)
 80049f0:	4b4b      	ldr	r3, [pc, #300]	; (8004b20 <main+0x39c>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	23f4      	movs	r3, #244	; 0xf4
 80049f6:	33ff      	adds	r3, #255	; 0xff
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d900      	bls.n	80049fe <main+0x27a>
 80049fc:	e761      	b.n	80048c2 <main+0x13e>
	{
		HAL_GPIO_WritePin(PUMP_SWITCH_D12_GPIO_Port, PUMP_SWITCH_D12_Pin,GPIO_PIN_SET);
 80049fe:	4b40      	ldr	r3, [pc, #256]	; (8004b00 <main+0x37c>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	2110      	movs	r1, #16
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fd f9c8 	bl	8001d9a <HAL_GPIO_WritePin>

		  ssd1306_Fill(Black);
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f000 fd24 	bl	8005458 <ssd1306_Fill>
		  ssd1306_UpdateScreen();
 8004a10:	f000 fd46 	bl	80054a0 <ssd1306_UpdateScreen>

		uint16_t NumOfSec = 60;
 8004a14:	2382      	movs	r3, #130	; 0x82
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	223c      	movs	r2, #60	; 0x3c
 8004a1a:	801a      	strh	r2, [r3, #0]
		for (uint16_t i =0 ; i < NumOfSec ; i++)
 8004a1c:	238a      	movs	r3, #138	; 0x8a
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2200      	movs	r2, #0
 8004a22:	801a      	strh	r2, [r3, #0]
 8004a24:	e04a      	b.n	8004abc <main+0x338>
		{
			HAL_ADC_Start_IT(&hadc);
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <main+0x364>)
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7fb fef7 	bl	800081c <HAL_ADC_Start_IT>
			HAL_Delay(1000);
 8004a2e:	23fa      	movs	r3, #250	; 0xfa
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fb fd60 	bl	80004f8 <HAL_Delay>
			char buffer[128];
			sprintf( buffer, "SOIL_A3=%4lu" ,ADC_Soil);
 8004a38:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <main+0x39c>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4939      	ldr	r1, [pc, #228]	; (8004b24 <main+0x3a0>)
 8004a3e:	003b      	movs	r3, r7
 8004a40:	0018      	movs	r0, r3
 8004a42:	f001 f8c9 	bl	8005bd8 <siprintf>
			ssd1306_SetCursor(0,0);
 8004a46:	2100      	movs	r1, #0
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f000 fe89 	bl	8005760 <ssd1306_SetCursor>
			ssd1306_WriteString(buffer,Font_7x10,White);
 8004a4e:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <main+0x36c>)
 8004a50:	0038      	movs	r0, r7
 8004a52:	2301      	movs	r3, #1
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	6852      	ldr	r2, [r2, #4]
 8004a58:	f000 fe58 	bl	800570c <ssd1306_WriteString>

			sprintf( buffer, "Vref=%4lu" ,ADC_Vref);
 8004a5c:	4b32      	ldr	r3, [pc, #200]	; (8004b28 <main+0x3a4>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4932      	ldr	r1, [pc, #200]	; (8004b2c <main+0x3a8>)
 8004a62:	003b      	movs	r3, r7
 8004a64:	0018      	movs	r0, r3
 8004a66:	f001 f8b7 	bl	8005bd8 <siprintf>
			ssd1306_SetCursor(0,13);
 8004a6a:	210d      	movs	r1, #13
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f000 fe77 	bl	8005760 <ssd1306_SetCursor>
			ssd1306_WriteString(buffer,Font_7x10,White);
 8004a72:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <main+0x36c>)
 8004a74:	0038      	movs	r0, r7
 8004a76:	2301      	movs	r3, #1
 8004a78:	6811      	ldr	r1, [r2, #0]
 8004a7a:	6852      	ldr	r2, [r2, #4]
 8004a7c:	f000 fe46 	bl	800570c <ssd1306_WriteString>

			sprintf( buffer, "ARROSAGE %4u sec" ,NumOfSec -i);
 8004a80:	2382      	movs	r3, #130	; 0x82
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	248a      	movs	r4, #138	; 0x8a
 8004a88:	193b      	adds	r3, r7, r4
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	1ad2      	subs	r2, r2, r3
 8004a8e:	4928      	ldr	r1, [pc, #160]	; (8004b30 <main+0x3ac>)
 8004a90:	003b      	movs	r3, r7
 8004a92:	0018      	movs	r0, r3
 8004a94:	f001 f8a0 	bl	8005bd8 <siprintf>
			ssd1306_SetCursor(0,26);
 8004a98:	211a      	movs	r1, #26
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f000 fe60 	bl	8005760 <ssd1306_SetCursor>
			ssd1306_WriteString(buffer,Font_7x10,White);
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <main+0x36c>)
 8004aa2:	0038      	movs	r0, r7
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	6811      	ldr	r1, [r2, #0]
 8004aa8:	6852      	ldr	r2, [r2, #4]
 8004aaa:	f000 fe2f 	bl	800570c <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004aae:	f000 fcf7 	bl	80054a0 <ssd1306_UpdateScreen>
		for (uint16_t i =0 ; i < NumOfSec ; i++)
 8004ab2:	193b      	adds	r3, r7, r4
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	3201      	adds	r2, #1
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	238a      	movs	r3, #138	; 0x8a
 8004abe:	18fa      	adds	r2, r7, r3
 8004ac0:	2382      	movs	r3, #130	; 0x82
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3ac      	bcc.n	8004a26 <main+0x2a2>
		}

		ssd1306_Fill(Black);
 8004acc:	2000      	movs	r0, #0
 8004ace:	f000 fcc3 	bl	8005458 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8004ad2:	f000 fce5 	bl	80054a0 <ssd1306_UpdateScreen>

		HAL_GPIO_WritePin(PUMP_SWITCH_D12_GPIO_Port, PUMP_SWITCH_D12_Pin,GPIO_PIN_RESET);
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <main+0x37c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2110      	movs	r1, #16
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7fd f95c 	bl	8001d9a <HAL_GPIO_WritePin>
  {
 8004ae2:	e6ee      	b.n	80048c2 <main+0x13e>
 8004ae4:	20000530 	.word	0x20000530
 8004ae8:	2000062c 	.word	0x2000062c
 8004aec:	40007000 	.word	0x40007000
 8004af0:	20000000 	.word	0x20000000
 8004af4:	08006400 	.word	0x08006400
 8004af8:	200004dc 	.word	0x200004dc
 8004afc:	08006408 	.word	0x08006408
 8004b00:	50000400 	.word	0x50000400
 8004b04:	08006414 	.word	0x08006414
 8004b08:	02020000 	.word	0x02020000
 8004b0c:	20000008 	.word	0x20000008
 8004b10:	08080000 	.word	0x08080000
 8004b14:	200000a4 	.word	0x200000a4
 8004b18:	02020030 	.word	0x02020030
 8004b1c:	02020060 	.word	0x02020060
 8004b20:	200004d8 	.word	0x200004d8
 8004b24:	08006424 	.word	0x08006424
 8004b28:	2000052c 	.word	0x2000052c
 8004b2c:	08006434 	.word	0x08006434
 8004b30:	08006440 	.word	0x08006440

08004b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b099      	sub	sp, #100	; 0x64
 8004b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b3a:	242c      	movs	r4, #44	; 0x2c
 8004b3c:	193b      	adds	r3, r7, r4
 8004b3e:	0018      	movs	r0, r3
 8004b40:	2334      	movs	r3, #52	; 0x34
 8004b42:	001a      	movs	r2, r3
 8004b44:	2100      	movs	r1, #0
 8004b46:	f001 f83f 	bl	8005bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b4a:	2318      	movs	r3, #24
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	0018      	movs	r0, r3
 8004b50:	2314      	movs	r3, #20
 8004b52:	001a      	movs	r2, r3
 8004b54:	2100      	movs	r1, #0
 8004b56:	f001 f837 	bl	8005bc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b5a:	003b      	movs	r3, r7
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	2318      	movs	r3, #24
 8004b60:	001a      	movs	r2, r3
 8004b62:	2100      	movs	r1, #0
 8004b64:	f001 f830 	bl	8005bc8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b68:	4b2e      	ldr	r3, [pc, #184]	; (8004c24 <SystemClock_Config+0xf0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2e      	ldr	r2, [pc, #184]	; (8004c28 <SystemClock_Config+0xf4>)
 8004b6e:	401a      	ands	r2, r3
 8004b70:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <SystemClock_Config+0xf0>)
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	0109      	lsls	r1, r1, #4
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004b7a:	0021      	movs	r1, r4
 8004b7c:	187b      	adds	r3, r7, r1
 8004b7e:	220a      	movs	r2, #10
 8004b80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b82:	187b      	adds	r3, r7, r1
 8004b84:	2201      	movs	r2, #1
 8004b86:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b88:	187b      	adds	r3, r7, r1
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004b8e:	187b      	adds	r3, r7, r1
 8004b90:	2201      	movs	r2, #1
 8004b92:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b94:	187b      	adds	r3, r7, r1
 8004b96:	2202      	movs	r2, #2
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b9a:	187b      	adds	r3, r7, r1
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	2280      	movs	r2, #128	; 0x80
 8004ba4:	02d2      	lsls	r2, r2, #11
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004ba8:	187b      	adds	r3, r7, r1
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	03d2      	lsls	r2, r2, #15
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bb0:	187b      	adds	r3, r7, r1
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7fd fd5c 	bl	8002670 <HAL_RCC_OscConfig>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d001      	beq.n	8004bc0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004bbc:	f000 fbc0 	bl	8005340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bc0:	2118      	movs	r1, #24
 8004bc2:	187b      	adds	r3, r7, r1
 8004bc4:	220f      	movs	r2, #15
 8004bc6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	2200      	movs	r2, #0
 8004bde:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	2101      	movs	r1, #1
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7fe f8bd 	bl	8002d64 <HAL_RCC_ClockConfig>
 8004bea:	1e03      	subs	r3, r0, #0
 8004bec:	d001      	beq.n	8004bf2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8004bee:	f000 fba7 	bl	8005340 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8004bf2:	003b      	movs	r3, r7
 8004bf4:	222a      	movs	r2, #42	; 0x2a
 8004bf6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004bf8:	003b      	movs	r3, r7
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004bfe:	003b      	movs	r3, r7
 8004c00:	2200      	movs	r2, #0
 8004c02:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c04:	003b      	movs	r3, r7
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	0292      	lsls	r2, r2, #10
 8004c0a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c0c:	003b      	movs	r3, r7
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fe fa8c 	bl	800312c <HAL_RCCEx_PeriphCLKConfig>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d001      	beq.n	8004c1c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8004c18:	f000 fb92 	bl	8005340 <Error_Handler>
  }
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b019      	add	sp, #100	; 0x64
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	40007000 	.word	0x40007000
 8004c28:	ffffe7ff 	.word	0xffffe7ff

08004c2c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004c32:	003b      	movs	r3, r7
 8004c34:	0018      	movs	r0, r3
 8004c36:	2308      	movs	r3, #8
 8004c38:	001a      	movs	r2, r3
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	f000 ffc4 	bl	8005bc8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8004c40:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c42:	4a45      	ldr	r2, [pc, #276]	; (8004d58 <MX_ADC_Init+0x12c>)
 8004c44:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004c46:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c4e:	2280      	movs	r2, #128	; 0x80
 8004c50:	05d2      	lsls	r2, r2, #23
 8004c52:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004c54:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004c60:	4b3c      	ldr	r3, [pc, #240]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c66:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004c6c:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c6e:	2220      	movs	r2, #32
 8004c70:	2100      	movs	r1, #0
 8004c72:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c76:	2221      	movs	r2, #33	; 0x21
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c84:	22c2      	movs	r2, #194	; 0xc2
 8004c86:	32ff      	adds	r2, #255	; 0xff
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004c8a:	4b32      	ldr	r3, [pc, #200]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c8c:	222c      	movs	r2, #44	; 0x2c
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c94:	2204      	movs	r2, #4
 8004c96:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c98:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <MX_ADC_Init+0x128>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <MX_ADC_Init+0x128>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <MX_ADC_Init+0x128>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <MX_ADC_Init+0x128>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004cb0:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <MX_ADC_Init+0x128>)
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7fb fc3e 	bl	8000534 <HAL_ADC_Init>
 8004cb8:	1e03      	subs	r3, r0, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004cbc:	f000 fb40 	bl	8005340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004cc0:	003b      	movs	r3, r7
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <MX_ADC_Init+0x130>)
 8004cc4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004cc6:	003b      	movs	r3, r7
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	0152      	lsls	r2, r2, #5
 8004ccc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004cce:	003a      	movs	r2, r7
 8004cd0:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <MX_ADC_Init+0x128>)
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fb ffb1 	bl	8000c3c <HAL_ADC_ConfigChannel>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004cde:	f000 fb2f 	bl	8005340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004ce2:	003b      	movs	r3, r7
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <MX_ADC_Init+0x134>)
 8004ce6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ce8:	003a      	movs	r2, r7
 8004cea:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <MX_ADC_Init+0x128>)
 8004cec:	0011      	movs	r1, r2
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7fb ffa4 	bl	8000c3c <HAL_ADC_ConfigChannel>
 8004cf4:	1e03      	subs	r3, r0, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004cf8:	f000 fb22 	bl	8005340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004cfc:	003b      	movs	r3, r7
 8004cfe:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <MX_ADC_Init+0x138>)
 8004d00:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004d02:	003a      	movs	r2, r7
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <MX_ADC_Init+0x128>)
 8004d06:	0011      	movs	r1, r2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7fb ff97 	bl	8000c3c <HAL_ADC_ConfigChannel>
 8004d0e:	1e03      	subs	r3, r0, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8004d12:	f000 fb15 	bl	8005340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004d16:	003b      	movs	r3, r7
 8004d18:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <MX_ADC_Init+0x13c>)
 8004d1a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004d1c:	003a      	movs	r2, r7
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <MX_ADC_Init+0x128>)
 8004d20:	0011      	movs	r1, r2
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7fb ff8a 	bl	8000c3c <HAL_ADC_ConfigChannel>
 8004d28:	1e03      	subs	r3, r0, #0
 8004d2a:	d001      	beq.n	8004d30 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8004d2c:	f000 fb08 	bl	8005340 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004d30:	003b      	movs	r3, r7
 8004d32:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <MX_ADC_Init+0x140>)
 8004d34:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004d36:	003a      	movs	r2, r7
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <MX_ADC_Init+0x128>)
 8004d3a:	0011      	movs	r1, r2
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fb ff7d 	bl	8000c3c <HAL_ADC_ConfigChannel>
 8004d42:	1e03      	subs	r3, r0, #0
 8004d44:	d001      	beq.n	8004d4a <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8004d46:	f000 fafb 	bl	8005340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	2000062c 	.word	0x2000062c
 8004d58:	40012400 	.word	0x40012400
 8004d5c:	10000010 	.word	0x10000010
 8004d60:	14000020 	.word	0x14000020
 8004d64:	18000040 	.word	0x18000040
 8004d68:	48040000 	.word	0x48040000
 8004d6c:	44020000 	.word	0x44020000

08004d70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004d76:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <MX_I2C1_Init+0x78>)
 8004d78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <MX_I2C1_Init+0x7c>)
 8004d7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004d80:	4b18      	ldr	r3, [pc, #96]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d86:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d8c:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fd f811 	bl	8001dd4 <HAL_I2C_Init>
 8004db2:	1e03      	subs	r3, r0, #0
 8004db4:	d001      	beq.n	8004dba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004db6:	f000 fac3 	bl	8005340 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f7fd fba8 	bl	8002514 <HAL_I2CEx_ConfigAnalogFilter>
 8004dc4:	1e03      	subs	r3, r0, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004dc8:	f000 faba 	bl	8005340 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <MX_I2C1_Init+0x74>)
 8004dce:	2100      	movs	r1, #0
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7fd fbeb 	bl	80025ac <HAL_I2CEx_ConfigDigitalFilter>
 8004dd6:	1e03      	subs	r3, r0, #0
 8004dd8:	d001      	beq.n	8004dde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004dda:	f000 fab1 	bl	8005340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	200004e0 	.word	0x200004e0
 8004de8:	40005400 	.word	0x40005400
 8004dec:	00707cbb 	.word	0x00707cbb

08004df0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b090      	sub	sp, #64	; 0x40
 8004df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004df6:	232c      	movs	r3, #44	; 0x2c
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	2314      	movs	r3, #20
 8004dfe:	001a      	movs	r2, r3
 8004e00:	2100      	movs	r1, #0
 8004e02:	f000 fee1 	bl	8005bc8 <memset>
  RTC_DateTypeDef sDate = {0};
 8004e06:	2328      	movs	r3, #40	; 0x28
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8004e0e:	003b      	movs	r3, r7
 8004e10:	0018      	movs	r0, r3
 8004e12:	2328      	movs	r3, #40	; 0x28
 8004e14:	001a      	movs	r2, r3
 8004e16:	2100      	movs	r1, #0
 8004e18:	f000 fed6 	bl	8005bc8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004e1c:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e1e:	4a41      	ldr	r2, [pc, #260]	; (8004f24 <MX_RTC_Init+0x134>)
 8004e20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004e22:	4b3f      	ldr	r3, [pc, #252]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004e28:	4b3d      	ldr	r3, [pc, #244]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e2a:	227f      	movs	r2, #127	; 0x7f
 8004e2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004e2e:	4b3c      	ldr	r3, [pc, #240]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004e34:	4b3a      	ldr	r3, [pc, #232]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004e3a:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004e46:	4b36      	ldr	r3, [pc, #216]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004e4c:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fe fa94 	bl	800337c <HAL_RTC_Init>
 8004e54:	1e03      	subs	r3, r0, #0
 8004e56:	d001      	beq.n	8004e5c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8004e58:	f000 fa72 	bl	8005340 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	187b      	adds	r3, r7, r1
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	2200      	movs	r2, #0
 8004e68:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8004e6a:	187b      	adds	r3, r7, r1
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e70:	187b      	adds	r3, r7, r1
 8004e72:	2200      	movs	r2, #0
 8004e74:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e76:	187b      	adds	r3, r7, r1
 8004e78:	2200      	movs	r2, #0
 8004e7a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004e7c:	1879      	adds	r1, r7, r1
 8004e7e:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <MX_RTC_Init+0x130>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7fe fb18 	bl	80034b8 <HAL_RTC_SetTime>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8004e8c:	f000 fa58 	bl	8005340 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004e90:	2128      	movs	r1, #40	; 0x28
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004e98:	187b      	adds	r3, r7, r1
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8004e9e:	187b      	adds	r3, r7, r1
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004eaa:	1879      	adds	r1, r7, r1
 8004eac:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <MX_RTC_Init+0x130>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7fe fbc5 	bl	8003640 <HAL_RTC_SetDate>
 8004eb6:	1e03      	subs	r3, r0, #0
 8004eb8:	d001      	beq.n	8004ebe <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8004eba:	f000 fa41 	bl	8005340 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8004ebe:	003b      	movs	r3, r7
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8004ec4:	003b      	movs	r3, r7
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8004eca:	003b      	movs	r3, r7
 8004ecc:	2200      	movs	r2, #0
 8004ece:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8004ed0:	003b      	movs	r3, r7
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004ed6:	003b      	movs	r3, r7
 8004ed8:	2200      	movs	r2, #0
 8004eda:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004edc:	003b      	movs	r3, r7
 8004ede:	2200      	movs	r2, #0
 8004ee0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004ee2:	003b      	movs	r3, r7
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004ee8:	003b      	movs	r3, r7
 8004eea:	2200      	movs	r2, #0
 8004eec:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004eee:	003b      	movs	r3, r7
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8004ef4:	003b      	movs	r3, r7
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	2101      	movs	r1, #1
 8004efa:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8004efc:	003b      	movs	r3, r7
 8004efe:	2280      	movs	r2, #128	; 0x80
 8004f00:	0052      	lsls	r2, r2, #1
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004f04:	0039      	movs	r1, r7
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <MX_RTC_Init+0x130>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f7fe fc46 	bl	800379c <HAL_RTC_SetAlarm>
 8004f10:	1e03      	subs	r3, r0, #0
 8004f12:	d001      	beq.n	8004f18 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8004f14:	f000 fa14 	bl	8005340 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b010      	add	sp, #64	; 0x40
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000538 	.word	0x20000538
 8004f24:	40002800 	.word	0x40002800

08004f28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f2e:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <MX_USART2_UART_Init+0x5c>)
 8004f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f34:	22e1      	movs	r2, #225	; 0xe1
 8004f36:	0252      	lsls	r2, r2, #9
 8004f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f40:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f46:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f4e:	220c      	movs	r2, #12
 8004f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f52:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f5e:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f6a:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <MX_USART2_UART_Init+0x58>)
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fe ff63 	bl	8003e38 <HAL_UART_Init>
 8004f72:	1e03      	subs	r3, r0, #0
 8004f74:	d001      	beq.n	8004f7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004f76:	f000 f9e3 	bl	8005340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	2000055c 	.word	0x2000055c
 8004f84:	40004400 	.word	0x40004400

08004f88 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <MX_DMA_Init+0x38>)
 8004f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <MX_DMA_Init+0x38>)
 8004f94:	2101      	movs	r1, #1
 8004f96:	430a      	orrs	r2, r1
 8004f98:	631a      	str	r2, [r3, #48]	; 0x30
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <MX_DMA_Init+0x38>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2100      	movs	r1, #0
 8004faa:	2009      	movs	r0, #9
 8004fac:	f7fc f9b2 	bl	8001314 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004fb0:	2009      	movs	r0, #9
 8004fb2:	f7fc f9c4 	bl	800133e <HAL_NVIC_EnableIRQ>

}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b002      	add	sp, #8
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fca:	240c      	movs	r4, #12
 8004fcc:	193b      	adds	r3, r7, r4
 8004fce:	0018      	movs	r0, r3
 8004fd0:	2314      	movs	r3, #20
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	f000 fdf7 	bl	8005bc8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fda:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8004fe0:	2104      	movs	r1, #4
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fe6:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	2204      	movs	r2, #4
 8004fec:	4013      	ands	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff2:	4b37      	ldr	r3, [pc, #220]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8004ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ffe:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	2201      	movs	r2, #1
 8005004:	4013      	ands	r3, r2
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800500a:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <MX_GPIO_Init+0x10c>)
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	4b30      	ldr	r3, [pc, #192]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8005010:	2102      	movs	r1, #2
 8005012:	430a      	orrs	r2, r1
 8005014:	62da      	str	r2, [r3, #44]	; 0x2c
 8005016:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <MX_GPIO_Init+0x10c>)
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	2202      	movs	r2, #2
 800501c:	4013      	ands	r3, r2
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HUM_SENSOR_VCC_A2_Pin|LCD_VCC_D2_Pin, GPIO_PIN_RESET);
 8005022:	492c      	ldr	r1, [pc, #176]	; (80050d4 <MX_GPIO_Init+0x110>)
 8005024:	23a0      	movs	r3, #160	; 0xa0
 8005026:	05db      	lsls	r3, r3, #23
 8005028:	2200      	movs	r2, #0
 800502a:	0018      	movs	r0, r3
 800502c:	f7fc feb5 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|PUMP_SWITCH_D12_Pin, GPIO_PIN_RESET);
 8005030:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <MX_GPIO_Init+0x114>)
 8005032:	2200      	movs	r2, #0
 8005034:	2118      	movs	r1, #24
 8005036:	0018      	movs	r0, r3
 8005038:	f7fc feaf 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HUM_SENSOR_VCC_A2_Pin LCD_VCC_D2_Pin */
  GPIO_InitStruct.Pin = HUM_SENSOR_VCC_A2_Pin|LCD_VCC_D2_Pin;
 800503c:	193b      	adds	r3, r7, r4
 800503e:	4a25      	ldr	r2, [pc, #148]	; (80050d4 <MX_GPIO_Init+0x110>)
 8005040:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005042:	193b      	adds	r3, r7, r4
 8005044:	2201      	movs	r2, #1
 8005046:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	193b      	adds	r3, r7, r4
 800504a:	2200      	movs	r2, #0
 800504c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504e:	193b      	adds	r3, r7, r4
 8005050:	2200      	movs	r2, #0
 8005052:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005054:	193a      	adds	r2, r7, r4
 8005056:	23a0      	movs	r3, #160	; 0xa0
 8005058:	05db      	lsls	r3, r3, #23
 800505a:	0011      	movs	r1, r2
 800505c:	0018      	movs	r0, r3
 800505e:	f7fc fd11 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRITE_EEPROM_D3_Pin */
  GPIO_InitStruct.Pin = WRITE_EEPROM_D3_Pin;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005068:	193b      	adds	r3, r7, r4
 800506a:	2200      	movs	r2, #0
 800506c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	193b      	adds	r3, r7, r4
 8005070:	2200      	movs	r2, #0
 8005072:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(WRITE_EEPROM_D3_GPIO_Port, &GPIO_InitStruct);
 8005074:	193b      	adds	r3, r7, r4
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <MX_GPIO_Init+0x114>)
 8005078:	0019      	movs	r1, r3
 800507a:	0010      	movs	r0, r2
 800507c:	f7fc fd02 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Sleep_D9_Pin */
  GPIO_InitStruct.Pin = Sleep_D9_Pin;
 8005080:	193b      	adds	r3, r7, r4
 8005082:	2280      	movs	r2, #128	; 0x80
 8005084:	0052      	lsls	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005088:	193b      	adds	r3, r7, r4
 800508a:	2200      	movs	r2, #0
 800508c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	193b      	adds	r3, r7, r4
 8005090:	2200      	movs	r2, #0
 8005092:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Sleep_D9_GPIO_Port, &GPIO_InitStruct);
 8005094:	193a      	adds	r2, r7, r4
 8005096:	23a0      	movs	r3, #160	; 0xa0
 8005098:	05db      	lsls	r3, r3, #23
 800509a:	0011      	movs	r1, r2
 800509c:	0018      	movs	r0, r3
 800509e:	f7fc fcf1 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin PUMP_SWITCH_D12_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|PUMP_SWITCH_D12_Pin;
 80050a2:	0021      	movs	r1, r4
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	2218      	movs	r2, #24
 80050a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	2201      	movs	r2, #1
 80050ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	2200      	movs	r2, #0
 80050ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <MX_GPIO_Init+0x114>)
 80050c0:	0019      	movs	r1, r3
 80050c2:	0010      	movs	r0, r2
 80050c4:	f7fc fcde 	bl	8001a84 <HAL_GPIO_Init>

}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b009      	add	sp, #36	; 0x24
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	00001008 	.word	0x00001008
 80050d8:	50000400 	.word	0x50000400

080050dc <GotoStandby>:

/* USER CODE BEGIN 4 */
void GotoStandby()
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
//		{
//		/* Insert 5 seconds delay */
//			  HAL_Delay(5000);

			//Power off LCD
			HAL_GPIO_WritePin(LCD_VCC_D2_GPIO_Port, LCD_VCC_D2_Pin, GPIO_PIN_RESET);
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	0159      	lsls	r1, r3, #5
 80050e6:	23a0      	movs	r3, #160	; 0xa0
 80050e8:	05db      	lsls	r3, r3, #23
 80050ea:	2200      	movs	r2, #0
 80050ec:	0018      	movs	r0, r3
 80050ee:	f7fc fe54 	bl	8001d9a <HAL_GPIO_WritePin>
			    - Clear all related wakeup flags,
			    - Re-enable all used wakeup sources,
			    - Enter the Standby mode.
			  */
			  /* Disable all used wakeup sources*/
			  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <GotoStandby+0x90>)
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7fe fe3d 	bl	8003d74 <HAL_RTCEx_DeactivateWakeUpTimer>

			  /* Clear all related wakeup flags */
			  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <GotoStandby+0x94>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <GotoStandby+0x94>)
 8005100:	2104      	movs	r1, #4
 8005102:	430a      	orrs	r2, r1
 8005104:	601a      	str	r2, [r3, #0]

			    RTC_AlarmTypeDef salarmstructure;
			    /*##-3- Configure the RTC Alarm peripheral #################################*/
			  /* Set Alarm to 02:20:30
				 RTC Alarm Generation: Alarm on Hours, Minutes and Seconds */
			  salarmstructure.Alarm = RTC_ALARM_A;
 8005106:	003b      	movs	r3, r7
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	0052      	lsls	r2, r2, #1
 800510c:	625a      	str	r2, [r3, #36]	; 0x24
			  salarmstructure.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 800510e:	003b      	movs	r3, r7
 8005110:	2220      	movs	r2, #32
 8005112:	2101      	movs	r1, #1
 8005114:	5499      	strb	r1, [r3, r2]
			  salarmstructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8005116:	003b      	movs	r3, r7
 8005118:	2280      	movs	r2, #128	; 0x80
 800511a:	05d2      	lsls	r2, r2, #23
 800511c:	61da      	str	r2, [r3, #28]
			  salarmstructure.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800511e:	003b      	movs	r3, r7
 8005120:	2280      	movs	r2, #128	; 0x80
 8005122:	0612      	lsls	r2, r2, #24
 8005124:	615a      	str	r2, [r3, #20]
			  salarmstructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8005126:	003b      	movs	r3, r7
 8005128:	22f0      	movs	r2, #240	; 0xf0
 800512a:	0512      	lsls	r2, r2, #20
 800512c:	619a      	str	r2, [r3, #24]
			  salarmstructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800512e:	003b      	movs	r3, r7
 8005130:	2200      	movs	r2, #0
 8005132:	70da      	strb	r2, [r3, #3]
			  salarmstructure.AlarmTime.Hours = 0x01;
 8005134:	003b      	movs	r3, r7
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
			  salarmstructure.AlarmTime.Minutes = 0x00;
 800513a:	003b      	movs	r3, r7
 800513c:	2200      	movs	r2, #0
 800513e:	705a      	strb	r2, [r3, #1]
			  salarmstructure.AlarmTime.Seconds = 0x00;
 8005140:	003b      	movs	r3, r7
 8005142:	2200      	movs	r2, #0
 8005144:	709a      	strb	r2, [r3, #2]
			  salarmstructure.AlarmTime.SubSeconds = 0x0;
 8005146:	003b      	movs	r3, r7
 8005148:	2200      	movs	r2, #0
 800514a:	605a      	str	r2, [r3, #4]

			  if(HAL_RTC_SetAlarm_IT(&hrtc,&salarmstructure,RTC_FORMAT_BCD) != HAL_OK)
 800514c:	0039      	movs	r1, r7
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <GotoStandby+0x90>)
 8005150:	2201      	movs	r2, #1
 8005152:	0018      	movs	r0, r3
 8005154:	f7fe fc48 	bl	80039e8 <HAL_RTC_SetAlarm_IT>
 8005158:	1e03      	subs	r3, r0, #0
 800515a:	d001      	beq.n	8005160 <GotoStandby+0x84>
			  {
				/* Initialization Error */
				Error_Handler();
 800515c:	f000 f8f0 	bl	8005340 <Error_Handler>
			  }

			  /* Enter the Standby mode */


			  HAL_PWR_EnterSTANDBYMode();
 8005160:	f7fd fa70 	bl	8002644 <HAL_PWR_EnterSTANDBYMode>
		//}
	//}
}
 8005164:	46c0      	nop			; (mov r8, r8)
 8005166:	46bd      	mov	sp, r7
 8005168:	b00a      	add	sp, #40	; 0x28
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000538 	.word	0x20000538
 8005170:	40007000 	.word	0x40007000

08005174 <UpdateDisplay>:
void UpdateDisplay()
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b0a0      	sub	sp, #128	; 0x80
 8005178:	af00      	add	r7, sp, #0
	char buffer[128];
	    //Display ADC4 value
	    sprintf( buffer, "SOIL_A3=%4lu" ,ADC_Soil);
 800517a:	4b5c      	ldr	r3, [pc, #368]	; (80052ec <UpdateDisplay+0x178>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	495c      	ldr	r1, [pc, #368]	; (80052f0 <UpdateDisplay+0x17c>)
 8005180:	003b      	movs	r3, r7
 8005182:	0018      	movs	r0, r3
 8005184:	f000 fd28 	bl	8005bd8 <siprintf>
		ssd1306_SetCursor(0,0);
 8005188:	2100      	movs	r1, #0
 800518a:	2000      	movs	r0, #0
 800518c:	f000 fae8 	bl	8005760 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer,Font_7x10,White);
 8005190:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <UpdateDisplay+0x180>)
 8005192:	0038      	movs	r0, r7
 8005194:	2301      	movs	r3, #1
 8005196:	6811      	ldr	r1, [r2, #0]
 8005198:	6852      	ldr	r2, [r2, #4]
 800519a:	f000 fab7 	bl	800570c <ssd1306_WriteString>

		ssd1306_SetCursor(100,0);
 800519e:	2100      	movs	r1, #0
 80051a0:	2064      	movs	r0, #100	; 0x64
 80051a2:	f000 fadd 	bl	8005760 <ssd1306_SetCursor>
		if (ADC_Soil < 500)
 80051a6:	4b51      	ldr	r3, [pc, #324]	; (80052ec <UpdateDisplay+0x178>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	23f4      	movs	r3, #244	; 0xf4
 80051ac:	33ff      	adds	r3, #255	; 0xff
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d807      	bhi.n	80051c2 <UpdateDisplay+0x4e>
			ssd1306_WriteString("DRY",Font_7x10,White);
 80051b2:	4a50      	ldr	r2, [pc, #320]	; (80052f4 <UpdateDisplay+0x180>)
 80051b4:	4850      	ldr	r0, [pc, #320]	; (80052f8 <UpdateDisplay+0x184>)
 80051b6:	2301      	movs	r3, #1
 80051b8:	6811      	ldr	r1, [r2, #0]
 80051ba:	6852      	ldr	r2, [r2, #4]
 80051bc:	f000 faa6 	bl	800570c <ssd1306_WriteString>
 80051c0:	e019      	b.n	80051f6 <UpdateDisplay+0x82>
		else if ((ADC_buf[0] > 500) && (ADC_buf[0] < 2000))
 80051c2:	4b4e      	ldr	r3, [pc, #312]	; (80052fc <UpdateDisplay+0x188>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	23fa      	movs	r3, #250	; 0xfa
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d90c      	bls.n	80051e8 <UpdateDisplay+0x74>
 80051ce:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <UpdateDisplay+0x188>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4b      	ldr	r2, [pc, #300]	; (8005300 <UpdateDisplay+0x18c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d807      	bhi.n	80051e8 <UpdateDisplay+0x74>
			ssd1306_WriteString("OK",Font_7x10,White);
 80051d8:	4a46      	ldr	r2, [pc, #280]	; (80052f4 <UpdateDisplay+0x180>)
 80051da:	484a      	ldr	r0, [pc, #296]	; (8005304 <UpdateDisplay+0x190>)
 80051dc:	2301      	movs	r3, #1
 80051de:	6811      	ldr	r1, [r2, #0]
 80051e0:	6852      	ldr	r2, [r2, #4]
 80051e2:	f000 fa93 	bl	800570c <ssd1306_WriteString>
 80051e6:	e006      	b.n	80051f6 <UpdateDisplay+0x82>
		else
			ssd1306_WriteString("WET",Font_7x10,White);
 80051e8:	4a42      	ldr	r2, [pc, #264]	; (80052f4 <UpdateDisplay+0x180>)
 80051ea:	4847      	ldr	r0, [pc, #284]	; (8005308 <UpdateDisplay+0x194>)
 80051ec:	2301      	movs	r3, #1
 80051ee:	6811      	ldr	r1, [r2, #0]
 80051f0:	6852      	ldr	r2, [r2, #4]
 80051f2:	f000 fa8b 	bl	800570c <ssd1306_WriteString>

		ssd1306_SetCursor(0,13);
 80051f6:	210d      	movs	r1, #13
 80051f8:	2000      	movs	r0, #0
 80051fa:	f000 fab1 	bl	8005760 <ssd1306_SetCursor>
		sprintf( buffer, "SUN_A4= %4lu" ,ADC_VSolar);
 80051fe:	4b43      	ldr	r3, [pc, #268]	; (800530c <UpdateDisplay+0x198>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4943      	ldr	r1, [pc, #268]	; (8005310 <UpdateDisplay+0x19c>)
 8005204:	003b      	movs	r3, r7
 8005206:	0018      	movs	r0, r3
 8005208:	f000 fce6 	bl	8005bd8 <siprintf>
		ssd1306_WriteString(buffer,Font_7x10,White);
 800520c:	4a39      	ldr	r2, [pc, #228]	; (80052f4 <UpdateDisplay+0x180>)
 800520e:	0038      	movs	r0, r7
 8005210:	2301      	movs	r3, #1
 8005212:	6811      	ldr	r1, [r2, #0]
 8005214:	6852      	ldr	r2, [r2, #4]
 8005216:	f000 fa79 	bl	800570c <ssd1306_WriteString>
	//#endif
	//	ssd1306_SetCursor(90,13);
	//	ssd1306_WriteString(buffer,Font_7x10,White);


		sprintf( buffer, "Vcc A5=%4lu" ,ADC_Vreg);
 800521a:	4b3e      	ldr	r3, [pc, #248]	; (8005314 <UpdateDisplay+0x1a0>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	493e      	ldr	r1, [pc, #248]	; (8005318 <UpdateDisplay+0x1a4>)
 8005220:	003b      	movs	r3, r7
 8005222:	0018      	movs	r0, r3
 8005224:	f000 fcd8 	bl	8005bd8 <siprintf>
		ssd1306_SetCursor(0,26);
 8005228:	211a      	movs	r1, #26
 800522a:	2000      	movs	r0, #0
 800522c:	f000 fa98 	bl	8005760 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer,Font_7x10,White);
 8005230:	4a30      	ldr	r2, [pc, #192]	; (80052f4 <UpdateDisplay+0x180>)
 8005232:	0038      	movs	r0, r7
 8005234:	2301      	movs	r3, #1
 8005236:	6811      	ldr	r1, [r2, #0]
 8005238:	6852      	ldr	r2, [r2, #4]
 800523a:	f000 fa67 	bl	800570c <ssd1306_WriteString>

		//Display ADC temp
		sprintf( buffer, "Temp=%4lu" ,ADC_Temp);
 800523e:	4b37      	ldr	r3, [pc, #220]	; (800531c <UpdateDisplay+0x1a8>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4937      	ldr	r1, [pc, #220]	; (8005320 <UpdateDisplay+0x1ac>)
 8005244:	003b      	movs	r3, r7
 8005246:	0018      	movs	r0, r3
 8005248:	f000 fcc6 	bl	8005bd8 <siprintf>
		ssd1306_SetCursor(0,39);
 800524c:	2127      	movs	r1, #39	; 0x27
 800524e:	2000      	movs	r0, #0
 8005250:	f000 fa86 	bl	8005760 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer,Font_7x10,White);
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <UpdateDisplay+0x180>)
 8005256:	0038      	movs	r0, r7
 8005258:	2301      	movs	r3, #1
 800525a:	6811      	ldr	r1, [r2, #0]
 800525c:	6852      	ldr	r2, [r2, #4]
 800525e:	f000 fa55 	bl	800570c <ssd1306_WriteString>

		ssd1306_SetCursor(100,39);
 8005262:	2127      	movs	r1, #39	; 0x27
 8005264:	2064      	movs	r0, #100	; 0x64
 8005266:	f000 fa7b 	bl	8005760 <ssd1306_SetCursor>
		sprintf( buffer, "%2lu" ,MeasureCounter);
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <UpdateDisplay+0x1b0>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	492e      	ldr	r1, [pc, #184]	; (8005328 <UpdateDisplay+0x1b4>)
 8005270:	003b      	movs	r3, r7
 8005272:	0018      	movs	r0, r3
 8005274:	f000 fcb0 	bl	8005bd8 <siprintf>
		ssd1306_WriteString(buffer,Font_7x10,White);
 8005278:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <UpdateDisplay+0x180>)
 800527a:	0038      	movs	r0, r7
 800527c:	2301      	movs	r3, #1
 800527e:	6811      	ldr	r1, [r2, #0]
 8005280:	6852      	ldr	r2, [r2, #4]
 8005282:	f000 fa43 	bl	800570c <ssd1306_WriteString>

		//Display Vref
		sprintf( buffer, "Vref= %4lu" ,ADC_Vref);
 8005286:	4b29      	ldr	r3, [pc, #164]	; (800532c <UpdateDisplay+0x1b8>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4929      	ldr	r1, [pc, #164]	; (8005330 <UpdateDisplay+0x1bc>)
 800528c:	003b      	movs	r3, r7
 800528e:	0018      	movs	r0, r3
 8005290:	f000 fca2 	bl	8005bd8 <siprintf>
		ssd1306_SetCursor(0,52);
 8005294:	2134      	movs	r1, #52	; 0x34
 8005296:	2000      	movs	r0, #0
 8005298:	f000 fa62 	bl	8005760 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer,Font_7x10,White);
 800529c:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <UpdateDisplay+0x180>)
 800529e:	0038      	movs	r0, r7
 80052a0:	2301      	movs	r3, #1
 80052a2:	6811      	ldr	r1, [r2, #0]
 80052a4:	6852      	ldr	r2, [r2, #4]
 80052a6:	f000 fa31 	bl	800570c <ssd1306_WriteString>





		ssd1306_SetCursor(80,52);
 80052aa:	2134      	movs	r1, #52	; 0x34
 80052ac:	2050      	movs	r0, #80	; 0x50
 80052ae:	f000 fa57 	bl	8005760 <ssd1306_SetCursor>
		if (HAL_GPIO_ReadPin(WRITE_EEPROM_D3_GPIO_Port,WRITE_EEPROM_D3_Pin))
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <UpdateDisplay+0x1c0>)
 80052b4:	2101      	movs	r1, #1
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7fc fd52 	bl	8001d60 <HAL_GPIO_ReadPin>
 80052bc:	1e03      	subs	r3, r0, #0
 80052be:	d007      	beq.n	80052d0 <UpdateDisplay+0x15c>
		{
			ssd1306_WriteString("SAVED",Font_7x10,White);
 80052c0:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <UpdateDisplay+0x180>)
 80052c2:	481d      	ldr	r0, [pc, #116]	; (8005338 <UpdateDisplay+0x1c4>)
 80052c4:	2301      	movs	r3, #1
 80052c6:	6811      	ldr	r1, [r2, #0]
 80052c8:	6852      	ldr	r2, [r2, #4]
 80052ca:	f000 fa1f 	bl	800570c <ssd1306_WriteString>
 80052ce:	e006      	b.n	80052de <UpdateDisplay+0x16a>
		}
		else
		{
			ssd1306_WriteString("     ",Font_7x10,White);
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <UpdateDisplay+0x180>)
 80052d2:	481a      	ldr	r0, [pc, #104]	; (800533c <UpdateDisplay+0x1c8>)
 80052d4:	2301      	movs	r3, #1
 80052d6:	6811      	ldr	r1, [r2, #0]
 80052d8:	6852      	ldr	r2, [r2, #4]
 80052da:	f000 fa17 	bl	800570c <ssd1306_WriteString>
		//Display Temp
		sprintf( buffer, "ADC3V3= %4lu" ,ADC_buf[5]);
		ssd1306_SetCursor(0,52);
		ssd1306_WriteString(buffer,Font_7x10,White);
	#endif
		ssd1306_UpdateScreen();
 80052de:	f000 f8df 	bl	80054a0 <ssd1306_UpdateScreen>
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b020      	add	sp, #128	; 0x80
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	200004d8 	.word	0x200004d8
 80052f0:	08006424 	.word	0x08006424
 80052f4:	20000000 	.word	0x20000000
 80052f8:	08006454 	.word	0x08006454
 80052fc:	20000008 	.word	0x20000008
 8005300:	000007cf 	.word	0x000007cf
 8005304:	08006458 	.word	0x08006458
 8005308:	0800645c 	.word	0x0800645c
 800530c:	200005dc 	.word	0x200005dc
 8005310:	08006460 	.word	0x08006460
 8005314:	20000628 	.word	0x20000628
 8005318:	08006470 	.word	0x08006470
 800531c:	20000534 	.word	0x20000534
 8005320:	0800647c 	.word	0x0800647c
 8005324:	200000a4 	.word	0x200000a4
 8005328:	08006488 	.word	0x08006488
 800532c:	2000052c 	.word	0x2000052c
 8005330:	08006490 	.word	0x08006490
 8005334:	50000400 	.word	0x50000400
 8005338:	0800649c 	.word	0x0800649c
 800533c:	080064a4 	.word	0x080064a4

08005340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af04      	add	r7, sp, #16
 8005352:	0002      	movs	r2, r0
 8005354:	1dfb      	adds	r3, r7, #7
 8005356:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005358:	4807      	ldr	r0, [pc, #28]	; (8005378 <ssd1306_WriteCommand+0x2c>)
 800535a:	230a      	movs	r3, #10
 800535c:	9302      	str	r3, [sp, #8]
 800535e:	2301      	movs	r3, #1
 8005360:	9301      	str	r3, [sp, #4]
 8005362:	1dfb      	adds	r3, r7, #7
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	2301      	movs	r3, #1
 8005368:	2200      	movs	r2, #0
 800536a:	2178      	movs	r1, #120	; 0x78
 800536c:	f7fc fdc8 	bl	8001f00 <HAL_I2C_Mem_Write>
}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b002      	add	sp, #8
 8005376:	bd80      	pop	{r7, pc}
 8005378:	200004e0 	.word	0x200004e0

0800537c <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8005380:	2064      	movs	r0, #100	; 0x64
 8005382:	f7fb f8b9 	bl	80004f8 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8005386:	20ae      	movs	r0, #174	; 0xae
 8005388:	f7ff ffe0 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800538c:	2020      	movs	r0, #32
 800538e:	f7ff ffdd 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8005392:	2010      	movs	r0, #16
 8005394:	f7ff ffda 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005398:	20b0      	movs	r0, #176	; 0xb0
 800539a:	f7ff ffd7 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800539e:	20c8      	movs	r0, #200	; 0xc8
 80053a0:	f7ff ffd4 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff ffd1 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80053aa:	2010      	movs	r0, #16
 80053ac:	f7ff ffce 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80053b0:	2040      	movs	r0, #64	; 0x40
 80053b2:	f7ff ffcb 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80053b6:	2081      	movs	r0, #129	; 0x81
 80053b8:	f7ff ffc8 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80053bc:	20ff      	movs	r0, #255	; 0xff
 80053be:	f7ff ffc5 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80053c2:	20a1      	movs	r0, #161	; 0xa1
 80053c4:	f7ff ffc2 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80053c8:	20a6      	movs	r0, #166	; 0xa6
 80053ca:	f7ff ffbf 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80053ce:	20a8      	movs	r0, #168	; 0xa8
 80053d0:	f7ff ffbc 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80053d4:	203f      	movs	r0, #63	; 0x3f
 80053d6:	f7ff ffb9 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80053da:	20a4      	movs	r0, #164	; 0xa4
 80053dc:	f7ff ffb6 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80053e0:	20d3      	movs	r0, #211	; 0xd3
 80053e2:	f7ff ffb3 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7ff ffb0 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80053ec:	20d5      	movs	r0, #213	; 0xd5
 80053ee:	f7ff ffad 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80053f2:	20f0      	movs	r0, #240	; 0xf0
 80053f4:	f7ff ffaa 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80053f8:	20d9      	movs	r0, #217	; 0xd9
 80053fa:	f7ff ffa7 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80053fe:	2022      	movs	r0, #34	; 0x22
 8005400:	f7ff ffa4 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8005404:	20da      	movs	r0, #218	; 0xda
 8005406:	f7ff ffa1 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800540a:	2012      	movs	r0, #18
 800540c:	f7ff ff9e 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8005410:	20db      	movs	r0, #219	; 0xdb
 8005412:	f7ff ff9b 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005416:	2020      	movs	r0, #32
 8005418:	f7ff ff98 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800541c:	208d      	movs	r0, #141	; 0x8d
 800541e:	f7ff ff95 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8005422:	2014      	movs	r0, #20
 8005424:	f7ff ff92 	bl	800534c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8005428:	20af      	movs	r0, #175	; 0xaf
 800542a:	f7ff ff8f 	bl	800534c <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 800542e:	2000      	movs	r0, #0
 8005430:	f000 f812 	bl	8005458 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8005434:	f000 f834 	bl	80054a0 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <ssd1306_Init+0xd8>)
 800543a:	2200      	movs	r2, #0
 800543c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <ssd1306_Init+0xd8>)
 8005440:	2200      	movs	r2, #0
 8005442:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <ssd1306_Init+0xd8>)
 8005446:	2201      	movs	r2, #1
 8005448:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800544a:	2301      	movs	r3, #1
}
 800544c:	0018      	movs	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	200004a8 	.word	0x200004a8

08005458 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	0002      	movs	r2, r0
 8005460:	1dfb      	adds	r3, r7, #7
 8005462:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e00e      	b.n	8005488 <ssd1306_Fill+0x30>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800546a:	1dfb      	adds	r3, r7, #7
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <ssd1306_Fill+0x1e>
 8005472:	2100      	movs	r1, #0
 8005474:	e000      	b.n	8005478 <ssd1306_Fill+0x20>
 8005476:	21ff      	movs	r1, #255	; 0xff
 8005478:	4a07      	ldr	r2, [pc, #28]	; (8005498 <ssd1306_Fill+0x40>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	18d3      	adds	r3, r2, r3
 800547e:	1c0a      	adds	r2, r1, #0
 8005480:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3301      	adds	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4a04      	ldr	r2, [pc, #16]	; (800549c <ssd1306_Fill+0x44>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d9ec      	bls.n	800546a <ssd1306_Fill+0x12>
	}
}
 8005490:	46c0      	nop			; (mov r8, r8)
 8005492:	46bd      	mov	sp, r7
 8005494:	b004      	add	sp, #16
 8005496:	bd80      	pop	{r7, pc}
 8005498:	200000a8 	.word	0x200000a8
 800549c:	000003ff 	.word	0x000003ff

080054a0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80054a6:	1dfb      	adds	r3, r7, #7
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e021      	b.n	80054f2 <ssd1306_UpdateScreen+0x52>
		ssd1306_WriteCommand(0xB0 + i);
 80054ae:	1dfb      	adds	r3, r7, #7
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	3b50      	subs	r3, #80	; 0x50
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7ff ff48 	bl	800534c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80054bc:	2000      	movs	r0, #0
 80054be:	f7ff ff45 	bl	800534c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80054c2:	2010      	movs	r0, #16
 80054c4:	f7ff ff42 	bl	800534c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80054c8:	1dfb      	adds	r3, r7, #7
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	01da      	lsls	r2, r3, #7
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <ssd1306_UpdateScreen+0x64>)
 80054d0:	18d3      	adds	r3, r2, r3
 80054d2:	480d      	ldr	r0, [pc, #52]	; (8005508 <ssd1306_UpdateScreen+0x68>)
 80054d4:	2264      	movs	r2, #100	; 0x64
 80054d6:	9202      	str	r2, [sp, #8]
 80054d8:	2280      	movs	r2, #128	; 0x80
 80054da:	9201      	str	r2, [sp, #4]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	2301      	movs	r3, #1
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	2178      	movs	r1, #120	; 0x78
 80054e4:	f7fc fd0c 	bl	8001f00 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80054e8:	1dfb      	adds	r3, r7, #7
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	1dfb      	adds	r3, r7, #7
 80054ee:	3201      	adds	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	1dfb      	adds	r3, r7, #7
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b07      	cmp	r3, #7
 80054f8:	d9d9      	bls.n	80054ae <ssd1306_UpdateScreen+0xe>
	}
}
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b002      	add	sp, #8
 8005500:	bd80      	pop	{r7, pc}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	200000a8 	.word	0x200000a8
 8005508:	200004e0 	.word	0x200004e0

0800550c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	0004      	movs	r4, r0
 8005514:	0008      	movs	r0, r1
 8005516:	0011      	movs	r1, r2
 8005518:	1dfb      	adds	r3, r7, #7
 800551a:	1c22      	adds	r2, r4, #0
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	1dbb      	adds	r3, r7, #6
 8005520:	1c02      	adds	r2, r0, #0
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	1d7b      	adds	r3, r7, #5
 8005526:	1c0a      	adds	r2, r1, #0
 8005528:	701a      	strb	r2, [r3, #0]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 800552a:	1dfb      	adds	r3, r7, #7
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	b25b      	sxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	db52      	blt.n	80055da <ssd1306_DrawPixel+0xce>
 8005534:	1dbb      	adds	r3, r7, #6
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b3f      	cmp	r3, #63	; 0x3f
 800553a:	d84e      	bhi.n	80055da <ssd1306_DrawPixel+0xce>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 800553c:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <ssd1306_DrawPixel+0xd8>)
 800553e:	791b      	ldrb	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <ssd1306_DrawPixel+0x46>
	{
		color = (SSD1306_COLOR)!color;
 8005544:	1d7b      	adds	r3, r7, #5
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	425a      	negs	r2, r3
 800554a:	4153      	adcs	r3, r2
 800554c:	b2da      	uxtb	r2, r3
 800554e:	1d7b      	adds	r3, r7, #5
 8005550:	701a      	strb	r2, [r3, #0]
	}
	
	// Draw in the right color
	if (color == White)
 8005552:	1d7b      	adds	r3, r7, #5
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d11e      	bne.n	8005598 <ssd1306_DrawPixel+0x8c>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800555a:	1dfb      	adds	r3, r7, #7
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	1dbb      	adds	r3, r7, #6
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	b2d8      	uxtb	r0, r3
 8005566:	0003      	movs	r3, r0
 8005568:	01db      	lsls	r3, r3, #7
 800556a:	18d3      	adds	r3, r2, r3
 800556c:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <ssd1306_DrawPixel+0xdc>)
 800556e:	5cd3      	ldrb	r3, [r2, r3]
 8005570:	b25a      	sxtb	r2, r3
 8005572:	1dbb      	adds	r3, r7, #6
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2107      	movs	r1, #7
 8005578:	400b      	ands	r3, r1
 800557a:	2101      	movs	r1, #1
 800557c:	4099      	lsls	r1, r3
 800557e:	000b      	movs	r3, r1
 8005580:	b25b      	sxtb	r3, r3
 8005582:	4313      	orrs	r3, r2
 8005584:	b259      	sxtb	r1, r3
 8005586:	1dfb      	adds	r3, r7, #7
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	0003      	movs	r3, r0
 800558c:	01db      	lsls	r3, r3, #7
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	b2c9      	uxtb	r1, r1
 8005592:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <ssd1306_DrawPixel+0xdc>)
 8005594:	54d1      	strb	r1, [r2, r3]
 8005596:	e021      	b.n	80055dc <ssd1306_DrawPixel+0xd0>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005598:	1dfb      	adds	r3, r7, #7
 800559a:	781a      	ldrb	r2, [r3, #0]
 800559c:	1dbb      	adds	r3, r7, #6
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	08db      	lsrs	r3, r3, #3
 80055a2:	b2d8      	uxtb	r0, r3
 80055a4:	0003      	movs	r3, r0
 80055a6:	01db      	lsls	r3, r3, #7
 80055a8:	18d3      	adds	r3, r2, r3
 80055aa:	4a0f      	ldr	r2, [pc, #60]	; (80055e8 <ssd1306_DrawPixel+0xdc>)
 80055ac:	5cd3      	ldrb	r3, [r2, r3]
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	1dba      	adds	r2, r7, #6
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	2107      	movs	r1, #7
 80055b6:	400a      	ands	r2, r1
 80055b8:	2101      	movs	r1, #1
 80055ba:	4091      	lsls	r1, r2
 80055bc:	000a      	movs	r2, r1
 80055be:	b252      	sxtb	r2, r2
 80055c0:	43d2      	mvns	r2, r2
 80055c2:	b252      	sxtb	r2, r2
 80055c4:	4013      	ands	r3, r2
 80055c6:	b259      	sxtb	r1, r3
 80055c8:	1dfb      	adds	r3, r7, #7
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	0003      	movs	r3, r0
 80055ce:	01db      	lsls	r3, r3, #7
 80055d0:	18d3      	adds	r3, r2, r3
 80055d2:	b2c9      	uxtb	r1, r1
 80055d4:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <ssd1306_DrawPixel+0xdc>)
 80055d6:	54d1      	strb	r1, [r2, r3]
 80055d8:	e000      	b.n	80055dc <ssd1306_DrawPixel+0xd0>
		return;
 80055da:	46c0      	nop			; (mov r8, r8)
	}
}
 80055dc:	46bd      	mov	sp, r7
 80055de:	b003      	add	sp, #12
 80055e0:	bd90      	pop	{r4, r7, pc}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	200004a8 	.word	0x200004a8
 80055e8:	200000a8 	.word	0x200000a8

080055ec <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	0004      	movs	r4, r0
 80055f4:	1d38      	adds	r0, r7, #4
 80055f6:	6001      	str	r1, [r0, #0]
 80055f8:	6042      	str	r2, [r0, #4]
 80055fa:	0019      	movs	r1, r3
 80055fc:	230f      	movs	r3, #15
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	1c22      	adds	r2, r4, #0
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	230e      	movs	r3, #14
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	1c0a      	adds	r2, r1, #0
 800560a:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800560c:	4b3e      	ldr	r3, [pc, #248]	; (8005708 <ssd1306_WriteChar+0x11c>)
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	001a      	movs	r2, r3
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	18d3      	adds	r3, r2, r3
 8005618:	2b7f      	cmp	r3, #127	; 0x7f
 800561a:	dc07      	bgt.n	800562c <ssd1306_WriteChar+0x40>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800561c:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <ssd1306_WriteChar+0x11c>)
 800561e:	885b      	ldrh	r3, [r3, #2]
 8005620:	001a      	movs	r2, r3
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	18d3      	adds	r3, r2, r3
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005628:	2b3f      	cmp	r3, #63	; 0x3f
 800562a:	dd01      	ble.n	8005630 <ssd1306_WriteChar+0x44>
	{
		// Not enough space on current line
		return 0;
 800562c:	2300      	movs	r3, #0
 800562e:	e066      	b.n	80056fe <ssd1306_WriteChar+0x112>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e051      	b.n	80056da <ssd1306_WriteChar+0xee>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	230f      	movs	r3, #15
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	3b20      	subs	r3, #32
 8005642:	1d39      	adds	r1, r7, #4
 8005644:	7849      	ldrb	r1, [r1, #1]
 8005646:	434b      	muls	r3, r1
 8005648:	0019      	movs	r1, r3
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	18cb      	adds	r3, r1, r3
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	18d3      	adds	r3, r2, r3
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	e035      	b.n	80056c8 <ssd1306_WriteChar+0xdc>
		{
			if ((b << j) & 0x8000) 
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	409a      	lsls	r2, r3
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	4013      	ands	r3, r2
 8005668:	d014      	beq.n	8005694 <ssd1306_WriteChar+0xa8>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <ssd1306_WriteChar+0x11c>)
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	18d3      	adds	r3, r2, r3
 8005676:	b2d8      	uxtb	r0, r3
 8005678:	4b23      	ldr	r3, [pc, #140]	; (8005708 <ssd1306_WriteChar+0x11c>)
 800567a:	885b      	ldrh	r3, [r3, #2]
 800567c:	b2da      	uxtb	r2, r3
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	18d3      	adds	r3, r2, r3
 8005684:	b2d9      	uxtb	r1, r3
 8005686:	230e      	movs	r3, #14
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	001a      	movs	r2, r3
 800568e:	f7ff ff3d 	bl	800550c <ssd1306_DrawPixel>
 8005692:	e016      	b.n	80056c2 <ssd1306_WriteChar+0xd6>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005694:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <ssd1306_WriteChar+0x11c>)
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b2da      	uxtb	r2, r3
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	18d3      	adds	r3, r2, r3
 80056a0:	b2d8      	uxtb	r0, r3
 80056a2:	4b19      	ldr	r3, [pc, #100]	; (8005708 <ssd1306_WriteChar+0x11c>)
 80056a4:	885b      	ldrh	r3, [r3, #2]
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	18d3      	adds	r3, r2, r3
 80056ae:	b2d9      	uxtb	r1, r3
 80056b0:	230e      	movs	r3, #14
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	425a      	negs	r2, r3
 80056b8:	4153      	adcs	r3, r2
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	001a      	movs	r2, r3
 80056be:	f7ff ff25 	bl	800550c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	001a      	movs	r2, r3
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d3c3      	bcc.n	800565c <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	3301      	adds	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	001a      	movs	r2, r3
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d3a7      	bcc.n	8005636 <ssd1306_WriteChar+0x4a>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <ssd1306_WriteChar+0x11c>)
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	18d3      	adds	r3, r2, r3
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <ssd1306_WriteChar+0x11c>)
 80056f6:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 80056f8:	230f      	movs	r3, #15
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	781b      	ldrb	r3, [r3, #0]
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b009      	add	sp, #36	; 0x24
 8005704:	bd90      	pop	{r4, r7, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	200004a8 	.word	0x200004a8

0800570c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	1d38      	adds	r0, r7, #4
 8005716:	6001      	str	r1, [r0, #0]
 8005718:	6042      	str	r2, [r0, #4]
 800571a:	001a      	movs	r2, r3
 800571c:	1cfb      	adds	r3, r7, #3
 800571e:	701a      	strb	r2, [r3, #0]
	// Write until null-byte
	while (*str) 
 8005720:	e014      	b.n	800574c <ssd1306_WriteString+0x40>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	7818      	ldrb	r0, [r3, #0]
 8005726:	1cfb      	adds	r3, r7, #3
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	1d3a      	adds	r2, r7, #4
 800572c:	6811      	ldr	r1, [r2, #0]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	f7ff ff5c 	bl	80055ec <ssd1306_WriteChar>
 8005734:	0003      	movs	r3, r0
 8005736:	001a      	movs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d002      	beq.n	8005746 <ssd1306_WriteString+0x3a>
		{
			// Char could not be written
			return *str;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	e008      	b.n	8005758 <ssd1306_WriteString+0x4c>
		}
		
		// Next char
		str++;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
	while (*str) 
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e6      	bne.n	8005722 <ssd1306_WriteString+0x16>
	}
	
	// Everything ok
	return *str;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	781b      	ldrb	r3, [r3, #0]
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b004      	add	sp, #16
 800575e:	bd80      	pop	{r7, pc}

08005760 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	0002      	movs	r2, r0
 8005768:	1dfb      	adds	r3, r7, #7
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	1dbb      	adds	r3, r7, #6
 800576e:	1c0a      	adds	r2, r1, #0
 8005770:	701a      	strb	r2, [r3, #0]
	SSD1306.CurrentX = x;
 8005772:	1dfb      	adds	r3, r7, #7
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b29a      	uxth	r2, r3
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <ssd1306_SetCursor+0x30>)
 800577a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800577c:	1dbb      	adds	r3, r7, #6
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b29a      	uxth	r2, r3
 8005782:	4b03      	ldr	r3, [pc, #12]	; (8005790 <ssd1306_SetCursor+0x30>)
 8005784:	805a      	strh	r2, [r3, #2]
}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	46bd      	mov	sp, r7
 800578a:	b002      	add	sp, #8
 800578c:	bd80      	pop	{r7, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	200004a8 	.word	0x200004a8

08005794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005798:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <HAL_MspInit+0x24>)
 800579a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <HAL_MspInit+0x24>)
 800579e:	2101      	movs	r1, #1
 80057a0:	430a      	orrs	r2, r1
 80057a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80057a4:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <HAL_MspInit+0x24>)
 80057a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <HAL_MspInit+0x24>)
 80057aa:	2180      	movs	r1, #128	; 0x80
 80057ac:	0549      	lsls	r1, r1, #21
 80057ae:	430a      	orrs	r2, r1
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40021000 	.word	0x40021000

080057bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c4:	230c      	movs	r3, #12
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	0018      	movs	r0, r3
 80057ca:	2314      	movs	r3, #20
 80057cc:	001a      	movs	r2, r3
 80057ce:	2100      	movs	r1, #0
 80057d0:	f000 f9fa 	bl	8005bc8 <memset>
  if(hadc->Instance==ADC1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <HAL_ADC_MspInit+0xd8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d156      	bne.n	800588c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057de:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <HAL_ADC_MspInit+0xdc>)
 80057e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e2:	4b2d      	ldr	r3, [pc, #180]	; (8005898 <HAL_ADC_MspInit+0xdc>)
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	0089      	lsls	r1, r1, #2
 80057e8:	430a      	orrs	r2, r1
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ec:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <HAL_ADC_MspInit+0xdc>)
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	4b29      	ldr	r3, [pc, #164]	; (8005898 <HAL_ADC_MspInit+0xdc>)
 80057f2:	2101      	movs	r1, #1
 80057f4:	430a      	orrs	r2, r1
 80057f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80057f8:	4b27      	ldr	r3, [pc, #156]	; (8005898 <HAL_ADC_MspInit+0xdc>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	2201      	movs	r2, #1
 80057fe:	4013      	ands	r3, r2
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6 
    */
    GPIO_InitStruct.Pin = ADC_IN4_A3_Pin|ADC_IN5_A4_Pin|ADC_IN6_A5_Pin;
 8005804:	210c      	movs	r1, #12
 8005806:	187b      	adds	r3, r7, r1
 8005808:	2270      	movs	r2, #112	; 0x70
 800580a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800580c:	187b      	adds	r3, r7, r1
 800580e:	2203      	movs	r2, #3
 8005810:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2200      	movs	r2, #0
 8005816:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005818:	187a      	adds	r2, r7, r1
 800581a:	23a0      	movs	r3, #160	; 0xa0
 800581c:	05db      	lsls	r3, r3, #23
 800581e:	0011      	movs	r1, r2
 8005820:	0018      	movs	r0, r3
 8005822:	f7fc f92f 	bl	8001a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005828:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <HAL_ADC_MspInit+0xe4>)
 800582a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <HAL_ADC_MspInit+0xe0>)
 800582e:	2200      	movs	r2, #0
 8005830:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005832:	4b1a      	ldr	r3, [pc, #104]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005834:	2200      	movs	r2, #0
 8005836:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005838:	4b18      	ldr	r3, [pc, #96]	; (800589c <HAL_ADC_MspInit+0xe0>)
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800583e:	4b17      	ldr	r3, [pc, #92]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005844:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	0092      	lsls	r2, r2, #2
 800584a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800584c:	4b13      	ldr	r3, [pc, #76]	; (800589c <HAL_ADC_MspInit+0xe0>)
 800584e:	2280      	movs	r2, #128	; 0x80
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005856:	2220      	movs	r2, #32
 8005858:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <HAL_ADC_MspInit+0xe0>)
 800585c:	2200      	movs	r2, #0
 800585e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005860:	4b0e      	ldr	r3, [pc, #56]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005862:	0018      	movs	r0, r3
 8005864:	f7fb fd88 	bl	8001378 <HAL_DMA_Init>
 8005868:	1e03      	subs	r3, r0, #0
 800586a:	d001      	beq.n	8005870 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 800586c:	f7ff fd68 	bl	8005340 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0a      	ldr	r2, [pc, #40]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005874:	64da      	str	r2, [r3, #76]	; 0x4c
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <HAL_ADC_MspInit+0xe0>)
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800587c:	2200      	movs	r2, #0
 800587e:	2100      	movs	r1, #0
 8005880:	200c      	movs	r0, #12
 8005882:	f7fb fd47 	bl	8001314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8005886:	200c      	movs	r0, #12
 8005888:	f7fb fd59 	bl	800133e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	b008      	add	sp, #32
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40012400 	.word	0x40012400
 8005898:	40021000 	.word	0x40021000
 800589c:	200005e0 	.word	0x200005e0
 80058a0:	40020008 	.word	0x40020008

080058a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ac:	230c      	movs	r3, #12
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	0018      	movs	r0, r3
 80058b2:	2314      	movs	r3, #20
 80058b4:	001a      	movs	r2, r3
 80058b6:	2100      	movs	r1, #0
 80058b8:	f000 f986 	bl	8005bc8 <memset>
  if(hi2c->Instance==I2C1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a18      	ldr	r2, [pc, #96]	; (8005924 <HAL_I2C_MspInit+0x80>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d12a      	bne.n	800591c <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <HAL_I2C_MspInit+0x84>)
 80058c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ca:	4b17      	ldr	r3, [pc, #92]	; (8005928 <HAL_I2C_MspInit+0x84>)
 80058cc:	2101      	movs	r1, #1
 80058ce:	430a      	orrs	r2, r1
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <HAL_I2C_MspInit+0x84>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	2201      	movs	r2, #1
 80058d8:	4013      	ands	r3, r2
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_D1_Pin|I2C_SDA_D0_Pin;
 80058de:	210c      	movs	r1, #12
 80058e0:	187b      	adds	r3, r7, r1
 80058e2:	22c0      	movs	r2, #192	; 0xc0
 80058e4:	00d2      	lsls	r2, r2, #3
 80058e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058e8:	187b      	adds	r3, r7, r1
 80058ea:	2212      	movs	r2, #18
 80058ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058ee:	187b      	adds	r3, r7, r1
 80058f0:	2201      	movs	r2, #1
 80058f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f4:	187b      	adds	r3, r7, r1
 80058f6:	2203      	movs	r2, #3
 80058f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	2201      	movs	r2, #1
 80058fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005900:	187a      	adds	r2, r7, r1
 8005902:	23a0      	movs	r3, #160	; 0xa0
 8005904:	05db      	lsls	r3, r3, #23
 8005906:	0011      	movs	r1, r2
 8005908:	0018      	movs	r0, r3
 800590a:	f7fc f8bb 	bl	8001a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_I2C_MspInit+0x84>)
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <HAL_I2C_MspInit+0x84>)
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	0389      	lsls	r1, r1, #14
 8005918:	430a      	orrs	r2, r1
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800591c:	46c0      	nop			; (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	b008      	add	sp, #32
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40005400 	.word	0x40005400
 8005928:	40021000 	.word	0x40021000

0800592c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a06      	ldr	r2, [pc, #24]	; (8005954 <HAL_RTC_MspInit+0x28>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d106      	bne.n	800594c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_RTC_MspInit+0x2c>)
 8005940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <HAL_RTC_MspInit+0x2c>)
 8005944:	2180      	movs	r1, #128	; 0x80
 8005946:	02c9      	lsls	r1, r1, #11
 8005948:	430a      	orrs	r2, r1
 800594a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b002      	add	sp, #8
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40002800 	.word	0x40002800
 8005958:	40021000 	.word	0x40021000

0800595c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005964:	230c      	movs	r3, #12
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	0018      	movs	r0, r3
 800596a:	2314      	movs	r3, #20
 800596c:	001a      	movs	r2, r3
 800596e:	2100      	movs	r1, #0
 8005970:	f000 f92a 	bl	8005bc8 <memset>
  if(huart->Instance==USART2)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a18      	ldr	r2, [pc, #96]	; (80059dc <HAL_UART_MspInit+0x80>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d129      	bne.n	80059d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800597e:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <HAL_UART_MspInit+0x84>)
 8005980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005982:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <HAL_UART_MspInit+0x84>)
 8005984:	2180      	movs	r1, #128	; 0x80
 8005986:	0289      	lsls	r1, r1, #10
 8005988:	430a      	orrs	r2, r1
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <HAL_UART_MspInit+0x84>)
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <HAL_UART_MspInit+0x84>)
 8005992:	2101      	movs	r1, #1
 8005994:	430a      	orrs	r2, r1
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c
 8005998:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <HAL_UART_MspInit+0x84>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	2201      	movs	r2, #1
 800599e:	4013      	ands	r3, r2
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80059a4:	210c      	movs	r1, #12
 80059a6:	187b      	adds	r3, r7, r1
 80059a8:	4a0e      	ldr	r2, [pc, #56]	; (80059e4 <HAL_UART_MspInit+0x88>)
 80059aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	2202      	movs	r2, #2
 80059b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	2203      	movs	r2, #3
 80059bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80059be:	187b      	adds	r3, r7, r1
 80059c0:	2204      	movs	r2, #4
 80059c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c4:	187a      	adds	r2, r7, r1
 80059c6:	23a0      	movs	r3, #160	; 0xa0
 80059c8:	05db      	lsls	r3, r3, #23
 80059ca:	0011      	movs	r1, r2
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7fc f859 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b008      	add	sp, #32
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	40004400 	.word	0x40004400
 80059e0:	40021000 	.word	0x40021000
 80059e4:	00008004 	.word	0x00008004

080059e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059f6:	e7fe      	b.n	80059f6 <HardFault_Handler+0x4>

080059f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a10:	f7fa fd5c 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <DMA1_Channel1_IRQHandler+0x14>)
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fb fd86 	bl	8001534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005a28:	46c0      	nop			; (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	200005e0 	.word	0x200005e0

08005a34 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <ADC1_COMP_IRQHandler+0x14>)
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7fb f82a 	bl	8000a94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005a40:	46c0      	nop			; (mov r8, r8)
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	2000062c 	.word	0x2000062c

08005a4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <_sbrk+0x50>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <_sbrk+0x16>
		heap_end = &end;
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <_sbrk+0x50>)
 8005a5e:	4a10      	ldr	r2, [pc, #64]	; (8005aa0 <_sbrk+0x54>)
 8005a60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a62:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <_sbrk+0x50>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <_sbrk+0x50>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	18d3      	adds	r3, r2, r3
 8005a70:	466a      	mov	r2, sp
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d907      	bls.n	8005a86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a76:	f000 f87d 	bl	8005b74 <__errno>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	220c      	movs	r2, #12
 8005a7e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005a80:	2301      	movs	r3, #1
 8005a82:	425b      	negs	r3, r3
 8005a84:	e006      	b.n	8005a94 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <_sbrk+0x50>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	18d2      	adds	r2, r2, r3
 8005a8e:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <_sbrk+0x50>)
 8005a90:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b004      	add	sp, #16
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	200004b0 	.word	0x200004b0
 8005aa0:	20000690 	.word	0x20000690

08005aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005aa8:	4b17      	ldr	r3, [pc, #92]	; (8005b08 <SystemInit+0x64>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <SystemInit+0x64>)
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	0049      	lsls	r1, r1, #1
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005ab6:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <SystemInit+0x64>)
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <SystemInit+0x64>)
 8005abc:	4913      	ldr	r1, [pc, #76]	; (8005b0c <SystemInit+0x68>)
 8005abe:	400a      	ands	r2, r1
 8005ac0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <SystemInit+0x64>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <SystemInit+0x64>)
 8005ac8:	4911      	ldr	r1, [pc, #68]	; (8005b10 <SystemInit+0x6c>)
 8005aca:	400a      	ands	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <SystemInit+0x64>)
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <SystemInit+0x64>)
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	438a      	bics	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <SystemInit+0x64>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <SystemInit+0x64>)
 8005ae0:	490c      	ldr	r1, [pc, #48]	; (8005b14 <SystemInit+0x70>)
 8005ae2:	400a      	ands	r2, r1
 8005ae4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005ae6:	4b08      	ldr	r3, [pc, #32]	; (8005b08 <SystemInit+0x64>)
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <SystemInit+0x64>)
 8005aec:	490a      	ldr	r1, [pc, #40]	; (8005b18 <SystemInit+0x74>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <SystemInit+0x64>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <SystemInit+0x78>)
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	0512      	lsls	r2, r2, #20
 8005afe:	609a      	str	r2, [r3, #8]
#endif
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	88ff400c 	.word	0x88ff400c
 8005b10:	fef6fff6 	.word	0xfef6fff6
 8005b14:	fffbffff 	.word	0xfffbffff
 8005b18:	ff02ffff 	.word	0xff02ffff
 8005b1c:	e000ed00 	.word	0xe000ed00

08005b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005b20:	480d      	ldr	r0, [pc, #52]	; (8005b58 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005b22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005b24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b26:	e003      	b.n	8005b30 <LoopCopyDataInit>

08005b28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005b2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b2e:	3104      	adds	r1, #4

08005b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b30:	480b      	ldr	r0, [pc, #44]	; (8005b60 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005b34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b38:	d3f6      	bcc.n	8005b28 <CopyDataInit>
  ldr  r2, =_sbss
 8005b3a:	4a0b      	ldr	r2, [pc, #44]	; (8005b68 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005b3c:	e002      	b.n	8005b44 <LoopFillZerobss>

08005b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005b3e:	2300      	movs	r3, #0
  str  r3, [r2]
 8005b40:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b42:	3204      	adds	r2, #4

08005b44 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <LoopForever+0x16>)
  cmp  r2, r3
 8005b46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b48:	d3f9      	bcc.n	8005b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005b4a:	f7ff ffab 	bl	8005aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b4e:	f000 f817 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b52:	f7fe fe17 	bl	8004784 <main>

08005b56 <LoopForever>:

LoopForever:
    b LoopForever
 8005b56:	e7fe      	b.n	8005b56 <LoopForever>
   ldr   r0, =_estack
 8005b58:	20001fff 	.word	0x20001fff
  ldr  r3, =_sidata
 8005b5c:	08006cc4 	.word	0x08006cc4
  ldr  r0, =_sdata
 8005b60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b64:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8005b68:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8005b6c:	2000068c 	.word	0x2000068c

08005b70 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b70:	e7fe      	b.n	8005b70 <DMA1_Channel2_3_IRQHandler>
	...

08005b74 <__errno>:
 8005b74:	4b01      	ldr	r3, [pc, #4]	; (8005b7c <__errno+0x8>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	4770      	bx	lr
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	20000024 	.word	0x20000024

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	2600      	movs	r6, #0
 8005b84:	4d0c      	ldr	r5, [pc, #48]	; (8005bb8 <__libc_init_array+0x38>)
 8005b86:	4c0d      	ldr	r4, [pc, #52]	; (8005bbc <__libc_init_array+0x3c>)
 8005b88:	1b64      	subs	r4, r4, r5
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	42a6      	cmp	r6, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	2600      	movs	r6, #0
 8005b92:	f000 fc29 	bl	80063e8 <_init>
 8005b96:	4d0a      	ldr	r5, [pc, #40]	; (8005bc0 <__libc_init_array+0x40>)
 8005b98:	4c0a      	ldr	r4, [pc, #40]	; (8005bc4 <__libc_init_array+0x44>)
 8005b9a:	1b64      	subs	r4, r4, r5
 8005b9c:	10a4      	asrs	r4, r4, #2
 8005b9e:	42a6      	cmp	r6, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	00b3      	lsls	r3, r6, #2
 8005ba6:	58eb      	ldr	r3, [r5, r3]
 8005ba8:	4798      	blx	r3
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	00b3      	lsls	r3, r6, #2
 8005bb0:	58eb      	ldr	r3, [r5, r3]
 8005bb2:	4798      	blx	r3
 8005bb4:	3601      	adds	r6, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	08006cbc 	.word	0x08006cbc
 8005bbc:	08006cbc 	.word	0x08006cbc
 8005bc0:	08006cbc 	.word	0x08006cbc
 8005bc4:	08006cc0 	.word	0x08006cc0

08005bc8 <memset>:
 8005bc8:	0003      	movs	r3, r0
 8005bca:	1812      	adds	r2, r2, r0
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <memset+0xa>
 8005bd0:	4770      	bx	lr
 8005bd2:	7019      	strb	r1, [r3, #0]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	e7f9      	b.n	8005bcc <memset+0x4>

08005bd8 <siprintf>:
 8005bd8:	b40e      	push	{r1, r2, r3}
 8005bda:	b500      	push	{lr}
 8005bdc:	490b      	ldr	r1, [pc, #44]	; (8005c0c <siprintf+0x34>)
 8005bde:	b09c      	sub	sp, #112	; 0x70
 8005be0:	ab1d      	add	r3, sp, #116	; 0x74
 8005be2:	9002      	str	r0, [sp, #8]
 8005be4:	9006      	str	r0, [sp, #24]
 8005be6:	9107      	str	r1, [sp, #28]
 8005be8:	9104      	str	r1, [sp, #16]
 8005bea:	4809      	ldr	r0, [pc, #36]	; (8005c10 <siprintf+0x38>)
 8005bec:	4909      	ldr	r1, [pc, #36]	; (8005c14 <siprintf+0x3c>)
 8005bee:	cb04      	ldmia	r3!, {r2}
 8005bf0:	9105      	str	r1, [sp, #20]
 8005bf2:	6800      	ldr	r0, [r0, #0]
 8005bf4:	a902      	add	r1, sp, #8
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	f000 f870 	bl	8005cdc <_svfiprintf_r>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9a02      	ldr	r2, [sp, #8]
 8005c00:	7013      	strb	r3, [r2, #0]
 8005c02:	b01c      	add	sp, #112	; 0x70
 8005c04:	bc08      	pop	{r3}
 8005c06:	b003      	add	sp, #12
 8005c08:	4718      	bx	r3
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	7fffffff 	.word	0x7fffffff
 8005c10:	20000024 	.word	0x20000024
 8005c14:	ffff0208 	.word	0xffff0208

08005c18 <__ssputs_r>:
 8005c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1a:	688e      	ldr	r6, [r1, #8]
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	0007      	movs	r7, r0
 8005c20:	000c      	movs	r4, r1
 8005c22:	9203      	str	r2, [sp, #12]
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	429e      	cmp	r6, r3
 8005c28:	d83c      	bhi.n	8005ca4 <__ssputs_r+0x8c>
 8005c2a:	2390      	movs	r3, #144	; 0x90
 8005c2c:	898a      	ldrh	r2, [r1, #12]
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	421a      	tst	r2, r3
 8005c32:	d034      	beq.n	8005c9e <__ssputs_r+0x86>
 8005c34:	2503      	movs	r5, #3
 8005c36:	6909      	ldr	r1, [r1, #16]
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	1a5b      	subs	r3, r3, r1
 8005c3c:	9302      	str	r3, [sp, #8]
 8005c3e:	6963      	ldr	r3, [r4, #20]
 8005c40:	9802      	ldr	r0, [sp, #8]
 8005c42:	435d      	muls	r5, r3
 8005c44:	0feb      	lsrs	r3, r5, #31
 8005c46:	195d      	adds	r5, r3, r5
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	106d      	asrs	r5, r5, #1
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	181b      	adds	r3, r3, r0
 8005c50:	42ab      	cmp	r3, r5
 8005c52:	d900      	bls.n	8005c56 <__ssputs_r+0x3e>
 8005c54:	001d      	movs	r5, r3
 8005c56:	0553      	lsls	r3, r2, #21
 8005c58:	d532      	bpl.n	8005cc0 <__ssputs_r+0xa8>
 8005c5a:	0029      	movs	r1, r5
 8005c5c:	0038      	movs	r0, r7
 8005c5e:	f000 fb23 	bl	80062a8 <_malloc_r>
 8005c62:	1e06      	subs	r6, r0, #0
 8005c64:	d109      	bne.n	8005c7a <__ssputs_r+0x62>
 8005c66:	230c      	movs	r3, #12
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	89a2      	ldrh	r2, [r4, #12]
 8005c70:	4240      	negs	r0, r0
 8005c72:	4313      	orrs	r3, r2
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	b005      	add	sp, #20
 8005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7a:	9a02      	ldr	r2, [sp, #8]
 8005c7c:	6921      	ldr	r1, [r4, #16]
 8005c7e:	f000 faac 	bl	80061da <memcpy>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <__ssputs_r+0xc0>)
 8005c86:	401a      	ands	r2, r3
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	6126      	str	r6, [r4, #16]
 8005c92:	18f6      	adds	r6, r6, r3
 8005c94:	6026      	str	r6, [r4, #0]
 8005c96:	6165      	str	r5, [r4, #20]
 8005c98:	9e01      	ldr	r6, [sp, #4]
 8005c9a:	1aed      	subs	r5, r5, r3
 8005c9c:	60a5      	str	r5, [r4, #8]
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	429e      	cmp	r6, r3
 8005ca2:	d900      	bls.n	8005ca6 <__ssputs_r+0x8e>
 8005ca4:	9e01      	ldr	r6, [sp, #4]
 8005ca6:	0032      	movs	r2, r6
 8005ca8:	9903      	ldr	r1, [sp, #12]
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	f000 fa9e 	bl	80061ec <memmove>
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	1b9b      	subs	r3, r3, r6
 8005cb6:	60a3      	str	r3, [r4, #8]
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	199e      	adds	r6, r3, r6
 8005cbc:	6026      	str	r6, [r4, #0]
 8005cbe:	e7da      	b.n	8005c76 <__ssputs_r+0x5e>
 8005cc0:	002a      	movs	r2, r5
 8005cc2:	0038      	movs	r0, r7
 8005cc4:	f000 fb4e 	bl	8006364 <_realloc_r>
 8005cc8:	1e06      	subs	r6, r0, #0
 8005cca:	d1e0      	bne.n	8005c8e <__ssputs_r+0x76>
 8005ccc:	6921      	ldr	r1, [r4, #16]
 8005cce:	0038      	movs	r0, r7
 8005cd0:	f000 faa0 	bl	8006214 <_free_r>
 8005cd4:	e7c7      	b.n	8005c66 <__ssputs_r+0x4e>
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	fffffb7f 	.word	0xfffffb7f

08005cdc <_svfiprintf_r>:
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cde:	b0a1      	sub	sp, #132	; 0x84
 8005ce0:	9003      	str	r0, [sp, #12]
 8005ce2:	001d      	movs	r5, r3
 8005ce4:	898b      	ldrh	r3, [r1, #12]
 8005ce6:	000f      	movs	r7, r1
 8005ce8:	0016      	movs	r6, r2
 8005cea:	061b      	lsls	r3, r3, #24
 8005cec:	d511      	bpl.n	8005d12 <_svfiprintf_r+0x36>
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10e      	bne.n	8005d12 <_svfiprintf_r+0x36>
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	f000 fad7 	bl	80062a8 <_malloc_r>
 8005cfa:	6038      	str	r0, [r7, #0]
 8005cfc:	6138      	str	r0, [r7, #16]
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d105      	bne.n	8005d0e <_svfiprintf_r+0x32>
 8005d02:	230c      	movs	r3, #12
 8005d04:	9a03      	ldr	r2, [sp, #12]
 8005d06:	3801      	subs	r0, #1
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	b021      	add	sp, #132	; 0x84
 8005d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d0e:	2340      	movs	r3, #64	; 0x40
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	2300      	movs	r3, #0
 8005d14:	ac08      	add	r4, sp, #32
 8005d16:	6163      	str	r3, [r4, #20]
 8005d18:	3320      	adds	r3, #32
 8005d1a:	7663      	strb	r3, [r4, #25]
 8005d1c:	3310      	adds	r3, #16
 8005d1e:	76a3      	strb	r3, [r4, #26]
 8005d20:	9507      	str	r5, [sp, #28]
 8005d22:	0035      	movs	r5, r6
 8005d24:	782b      	ldrb	r3, [r5, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <_svfiprintf_r+0x52>
 8005d2a:	2b25      	cmp	r3, #37	; 0x25
 8005d2c:	d146      	bne.n	8005dbc <_svfiprintf_r+0xe0>
 8005d2e:	1bab      	subs	r3, r5, r6
 8005d30:	9305      	str	r3, [sp, #20]
 8005d32:	d00c      	beq.n	8005d4e <_svfiprintf_r+0x72>
 8005d34:	0032      	movs	r2, r6
 8005d36:	0039      	movs	r1, r7
 8005d38:	9803      	ldr	r0, [sp, #12]
 8005d3a:	f7ff ff6d 	bl	8005c18 <__ssputs_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d100      	bne.n	8005d44 <_svfiprintf_r+0x68>
 8005d42:	e0ae      	b.n	8005ea2 <_svfiprintf_r+0x1c6>
 8005d44:	6962      	ldr	r2, [r4, #20]
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	4694      	mov	ip, r2
 8005d4a:	4463      	add	r3, ip
 8005d4c:	6163      	str	r3, [r4, #20]
 8005d4e:	782b      	ldrb	r3, [r5, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d100      	bne.n	8005d56 <_svfiprintf_r+0x7a>
 8005d54:	e0a5      	b.n	8005ea2 <_svfiprintf_r+0x1c6>
 8005d56:	2201      	movs	r2, #1
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4252      	negs	r2, r2
 8005d5c:	6062      	str	r2, [r4, #4]
 8005d5e:	a904      	add	r1, sp, #16
 8005d60:	3254      	adds	r2, #84	; 0x54
 8005d62:	1852      	adds	r2, r2, r1
 8005d64:	1c6e      	adds	r6, r5, #1
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	60e3      	str	r3, [r4, #12]
 8005d6a:	60a3      	str	r3, [r4, #8]
 8005d6c:	7013      	strb	r3, [r2, #0]
 8005d6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d70:	7831      	ldrb	r1, [r6, #0]
 8005d72:	2205      	movs	r2, #5
 8005d74:	4853      	ldr	r0, [pc, #332]	; (8005ec4 <_svfiprintf_r+0x1e8>)
 8005d76:	f000 fa25 	bl	80061c4 <memchr>
 8005d7a:	1c75      	adds	r5, r6, #1
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d11f      	bne.n	8005dc0 <_svfiprintf_r+0xe4>
 8005d80:	6822      	ldr	r2, [r4, #0]
 8005d82:	06d3      	lsls	r3, r2, #27
 8005d84:	d504      	bpl.n	8005d90 <_svfiprintf_r+0xb4>
 8005d86:	2353      	movs	r3, #83	; 0x53
 8005d88:	a904      	add	r1, sp, #16
 8005d8a:	185b      	adds	r3, r3, r1
 8005d8c:	2120      	movs	r1, #32
 8005d8e:	7019      	strb	r1, [r3, #0]
 8005d90:	0713      	lsls	r3, r2, #28
 8005d92:	d504      	bpl.n	8005d9e <_svfiprintf_r+0xc2>
 8005d94:	2353      	movs	r3, #83	; 0x53
 8005d96:	a904      	add	r1, sp, #16
 8005d98:	185b      	adds	r3, r3, r1
 8005d9a:	212b      	movs	r1, #43	; 0x2b
 8005d9c:	7019      	strb	r1, [r3, #0]
 8005d9e:	7833      	ldrb	r3, [r6, #0]
 8005da0:	2b2a      	cmp	r3, #42	; 0x2a
 8005da2:	d016      	beq.n	8005dd2 <_svfiprintf_r+0xf6>
 8005da4:	0035      	movs	r5, r6
 8005da6:	2100      	movs	r1, #0
 8005da8:	200a      	movs	r0, #10
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	782a      	ldrb	r2, [r5, #0]
 8005dae:	1c6e      	adds	r6, r5, #1
 8005db0:	3a30      	subs	r2, #48	; 0x30
 8005db2:	2a09      	cmp	r2, #9
 8005db4:	d94e      	bls.n	8005e54 <_svfiprintf_r+0x178>
 8005db6:	2900      	cmp	r1, #0
 8005db8:	d018      	beq.n	8005dec <_svfiprintf_r+0x110>
 8005dba:	e010      	b.n	8005dde <_svfiprintf_r+0x102>
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	e7b1      	b.n	8005d24 <_svfiprintf_r+0x48>
 8005dc0:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <_svfiprintf_r+0x1e8>)
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	1ac0      	subs	r0, r0, r3
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4083      	lsls	r3, r0
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	002e      	movs	r6, r5
 8005dd0:	e7ce      	b.n	8005d70 <_svfiprintf_r+0x94>
 8005dd2:	9b07      	ldr	r3, [sp, #28]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	9107      	str	r1, [sp, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	db01      	blt.n	8005de2 <_svfiprintf_r+0x106>
 8005dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de0:	e004      	b.n	8005dec <_svfiprintf_r+0x110>
 8005de2:	425b      	negs	r3, r3
 8005de4:	60e3      	str	r3, [r4, #12]
 8005de6:	2302      	movs	r3, #2
 8005de8:	4313      	orrs	r3, r2
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	782b      	ldrb	r3, [r5, #0]
 8005dee:	2b2e      	cmp	r3, #46	; 0x2e
 8005df0:	d10a      	bne.n	8005e08 <_svfiprintf_r+0x12c>
 8005df2:	786b      	ldrb	r3, [r5, #1]
 8005df4:	2b2a      	cmp	r3, #42	; 0x2a
 8005df6:	d135      	bne.n	8005e64 <_svfiprintf_r+0x188>
 8005df8:	9b07      	ldr	r3, [sp, #28]
 8005dfa:	3502      	adds	r5, #2
 8005dfc:	1d1a      	adds	r2, r3, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	9207      	str	r2, [sp, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	db2b      	blt.n	8005e5e <_svfiprintf_r+0x182>
 8005e06:	9309      	str	r3, [sp, #36]	; 0x24
 8005e08:	4e2f      	ldr	r6, [pc, #188]	; (8005ec8 <_svfiprintf_r+0x1ec>)
 8005e0a:	7829      	ldrb	r1, [r5, #0]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	0030      	movs	r0, r6
 8005e10:	f000 f9d8 	bl	80061c4 <memchr>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d006      	beq.n	8005e26 <_svfiprintf_r+0x14a>
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	1b80      	subs	r0, r0, r6
 8005e1c:	4083      	lsls	r3, r0
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	3501      	adds	r5, #1
 8005e22:	4313      	orrs	r3, r2
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	7829      	ldrb	r1, [r5, #0]
 8005e28:	2206      	movs	r2, #6
 8005e2a:	4828      	ldr	r0, [pc, #160]	; (8005ecc <_svfiprintf_r+0x1f0>)
 8005e2c:	1c6e      	adds	r6, r5, #1
 8005e2e:	7621      	strb	r1, [r4, #24]
 8005e30:	f000 f9c8 	bl	80061c4 <memchr>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d03c      	beq.n	8005eb2 <_svfiprintf_r+0x1d6>
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <_svfiprintf_r+0x1f4>)
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d125      	bne.n	8005e8a <_svfiprintf_r+0x1ae>
 8005e3e:	2207      	movs	r2, #7
 8005e40:	9b07      	ldr	r3, [sp, #28]
 8005e42:	3307      	adds	r3, #7
 8005e44:	4393      	bics	r3, r2
 8005e46:	3308      	adds	r3, #8
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	6963      	ldr	r3, [r4, #20]
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	6163      	str	r3, [r4, #20]
 8005e52:	e766      	b.n	8005d22 <_svfiprintf_r+0x46>
 8005e54:	4343      	muls	r3, r0
 8005e56:	2101      	movs	r1, #1
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	0035      	movs	r5, r6
 8005e5c:	e7a6      	b.n	8005dac <_svfiprintf_r+0xd0>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	425b      	negs	r3, r3
 8005e62:	e7d0      	b.n	8005e06 <_svfiprintf_r+0x12a>
 8005e64:	2300      	movs	r3, #0
 8005e66:	200a      	movs	r0, #10
 8005e68:	001a      	movs	r2, r3
 8005e6a:	3501      	adds	r5, #1
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	7829      	ldrb	r1, [r5, #0]
 8005e70:	1c6e      	adds	r6, r5, #1
 8005e72:	3930      	subs	r1, #48	; 0x30
 8005e74:	2909      	cmp	r1, #9
 8005e76:	d903      	bls.n	8005e80 <_svfiprintf_r+0x1a4>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0c5      	beq.n	8005e08 <_svfiprintf_r+0x12c>
 8005e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e7e:	e7c3      	b.n	8005e08 <_svfiprintf_r+0x12c>
 8005e80:	4342      	muls	r2, r0
 8005e82:	2301      	movs	r3, #1
 8005e84:	1852      	adds	r2, r2, r1
 8005e86:	0035      	movs	r5, r6
 8005e88:	e7f1      	b.n	8005e6e <_svfiprintf_r+0x192>
 8005e8a:	ab07      	add	r3, sp, #28
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	003a      	movs	r2, r7
 8005e90:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <_svfiprintf_r+0x1f8>)
 8005e92:	0021      	movs	r1, r4
 8005e94:	9803      	ldr	r0, [sp, #12]
 8005e96:	e000      	b.n	8005e9a <_svfiprintf_r+0x1be>
 8005e98:	bf00      	nop
 8005e9a:	9004      	str	r0, [sp, #16]
 8005e9c:	9b04      	ldr	r3, [sp, #16]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	d1d3      	bne.n	8005e4a <_svfiprintf_r+0x16e>
 8005ea2:	89bb      	ldrh	r3, [r7, #12]
 8005ea4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ea6:	065b      	lsls	r3, r3, #25
 8005ea8:	d400      	bmi.n	8005eac <_svfiprintf_r+0x1d0>
 8005eaa:	e72e      	b.n	8005d0a <_svfiprintf_r+0x2e>
 8005eac:	2001      	movs	r0, #1
 8005eae:	4240      	negs	r0, r0
 8005eb0:	e72b      	b.n	8005d0a <_svfiprintf_r+0x2e>
 8005eb2:	ab07      	add	r3, sp, #28
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	003a      	movs	r2, r7
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <_svfiprintf_r+0x1f8>)
 8005eba:	0021      	movs	r1, r4
 8005ebc:	9803      	ldr	r0, [sp, #12]
 8005ebe:	f000 f879 	bl	8005fb4 <_printf_i>
 8005ec2:	e7ea      	b.n	8005e9a <_svfiprintf_r+0x1be>
 8005ec4:	08006c81 	.word	0x08006c81
 8005ec8:	08006c87 	.word	0x08006c87
 8005ecc:	08006c8b 	.word	0x08006c8b
 8005ed0:	00000000 	.word	0x00000000
 8005ed4:	08005c19 	.word	0x08005c19

08005ed8 <_printf_common>:
 8005ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eda:	0015      	movs	r5, r2
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	688a      	ldr	r2, [r1, #8]
 8005ee0:	690b      	ldr	r3, [r1, #16]
 8005ee2:	9000      	str	r0, [sp, #0]
 8005ee4:	000c      	movs	r4, r1
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	da00      	bge.n	8005eec <_printf_common+0x14>
 8005eea:	0013      	movs	r3, r2
 8005eec:	0022      	movs	r2, r4
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	3243      	adds	r2, #67	; 0x43
 8005ef2:	7812      	ldrb	r2, [r2, #0]
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	d001      	beq.n	8005efc <_printf_common+0x24>
 8005ef8:	3301      	adds	r3, #1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	069b      	lsls	r3, r3, #26
 8005f00:	d502      	bpl.n	8005f08 <_printf_common+0x30>
 8005f02:	682b      	ldr	r3, [r5, #0]
 8005f04:	3302      	adds	r3, #2
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	2706      	movs	r7, #6
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	401f      	ands	r7, r3
 8005f0e:	d027      	beq.n	8005f60 <_printf_common+0x88>
 8005f10:	0023      	movs	r3, r4
 8005f12:	3343      	adds	r3, #67	; 0x43
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	1e5a      	subs	r2, r3, #1
 8005f18:	4193      	sbcs	r3, r2
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	0692      	lsls	r2, r2, #26
 8005f1e:	d430      	bmi.n	8005f82 <_printf_common+0xaa>
 8005f20:	0022      	movs	r2, r4
 8005f22:	9901      	ldr	r1, [sp, #4]
 8005f24:	3243      	adds	r2, #67	; 0x43
 8005f26:	9800      	ldr	r0, [sp, #0]
 8005f28:	9e08      	ldr	r6, [sp, #32]
 8005f2a:	47b0      	blx	r6
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d025      	beq.n	8005f7c <_printf_common+0xa4>
 8005f30:	2306      	movs	r3, #6
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	682a      	ldr	r2, [r5, #0]
 8005f36:	68e1      	ldr	r1, [r4, #12]
 8005f38:	4003      	ands	r3, r0
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d103      	bne.n	8005f48 <_printf_common+0x70>
 8005f40:	1a8d      	subs	r5, r1, r2
 8005f42:	43eb      	mvns	r3, r5
 8005f44:	17db      	asrs	r3, r3, #31
 8005f46:	401d      	ands	r5, r3
 8005f48:	68a3      	ldr	r3, [r4, #8]
 8005f4a:	6922      	ldr	r2, [r4, #16]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	dd01      	ble.n	8005f54 <_printf_common+0x7c>
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	18ed      	adds	r5, r5, r3
 8005f54:	2700      	movs	r7, #0
 8005f56:	42bd      	cmp	r5, r7
 8005f58:	d120      	bne.n	8005f9c <_printf_common+0xc4>
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	e010      	b.n	8005f80 <_printf_common+0xa8>
 8005f5e:	3701      	adds	r7, #1
 8005f60:	68e3      	ldr	r3, [r4, #12]
 8005f62:	682a      	ldr	r2, [r5, #0]
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	42bb      	cmp	r3, r7
 8005f68:	ddd2      	ble.n	8005f10 <_printf_common+0x38>
 8005f6a:	0022      	movs	r2, r4
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	3219      	adds	r2, #25
 8005f70:	9901      	ldr	r1, [sp, #4]
 8005f72:	9800      	ldr	r0, [sp, #0]
 8005f74:	9e08      	ldr	r6, [sp, #32]
 8005f76:	47b0      	blx	r6
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d1f0      	bne.n	8005f5e <_printf_common+0x86>
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	4240      	negs	r0, r0
 8005f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f82:	2030      	movs	r0, #48	; 0x30
 8005f84:	18e1      	adds	r1, r4, r3
 8005f86:	3143      	adds	r1, #67	; 0x43
 8005f88:	7008      	strb	r0, [r1, #0]
 8005f8a:	0021      	movs	r1, r4
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	3145      	adds	r1, #69	; 0x45
 8005f90:	7809      	ldrb	r1, [r1, #0]
 8005f92:	18a2      	adds	r2, r4, r2
 8005f94:	3243      	adds	r2, #67	; 0x43
 8005f96:	3302      	adds	r3, #2
 8005f98:	7011      	strb	r1, [r2, #0]
 8005f9a:	e7c1      	b.n	8005f20 <_printf_common+0x48>
 8005f9c:	0022      	movs	r2, r4
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	321a      	adds	r2, #26
 8005fa2:	9901      	ldr	r1, [sp, #4]
 8005fa4:	9800      	ldr	r0, [sp, #0]
 8005fa6:	9e08      	ldr	r6, [sp, #32]
 8005fa8:	47b0      	blx	r6
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	d0e6      	beq.n	8005f7c <_printf_common+0xa4>
 8005fae:	3701      	adds	r7, #1
 8005fb0:	e7d1      	b.n	8005f56 <_printf_common+0x7e>
	...

08005fb4 <_printf_i>:
 8005fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb6:	b089      	sub	sp, #36	; 0x24
 8005fb8:	9204      	str	r2, [sp, #16]
 8005fba:	000a      	movs	r2, r1
 8005fbc:	3243      	adds	r2, #67	; 0x43
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	9003      	str	r0, [sp, #12]
 8005fc2:	9202      	str	r2, [sp, #8]
 8005fc4:	7e0a      	ldrb	r2, [r1, #24]
 8005fc6:	000c      	movs	r4, r1
 8005fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fca:	2a6e      	cmp	r2, #110	; 0x6e
 8005fcc:	d100      	bne.n	8005fd0 <_printf_i+0x1c>
 8005fce:	e086      	b.n	80060de <_printf_i+0x12a>
 8005fd0:	d81f      	bhi.n	8006012 <_printf_i+0x5e>
 8005fd2:	2a63      	cmp	r2, #99	; 0x63
 8005fd4:	d033      	beq.n	800603e <_printf_i+0x8a>
 8005fd6:	d808      	bhi.n	8005fea <_printf_i+0x36>
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d100      	bne.n	8005fde <_printf_i+0x2a>
 8005fdc:	e08c      	b.n	80060f8 <_printf_i+0x144>
 8005fde:	2a58      	cmp	r2, #88	; 0x58
 8005fe0:	d04d      	beq.n	800607e <_printf_i+0xca>
 8005fe2:	0025      	movs	r5, r4
 8005fe4:	3542      	adds	r5, #66	; 0x42
 8005fe6:	702a      	strb	r2, [r5, #0]
 8005fe8:	e030      	b.n	800604c <_printf_i+0x98>
 8005fea:	2a64      	cmp	r2, #100	; 0x64
 8005fec:	d001      	beq.n	8005ff2 <_printf_i+0x3e>
 8005fee:	2a69      	cmp	r2, #105	; 0x69
 8005ff0:	d1f7      	bne.n	8005fe2 <_printf_i+0x2e>
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1d0a      	adds	r2, r1, #4
 8005ff8:	0628      	lsls	r0, r5, #24
 8005ffa:	d529      	bpl.n	8006050 <_printf_i+0x9c>
 8005ffc:	6808      	ldr	r0, [r1, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	2800      	cmp	r0, #0
 8006002:	da03      	bge.n	800600c <_printf_i+0x58>
 8006004:	232d      	movs	r3, #45	; 0x2d
 8006006:	9a02      	ldr	r2, [sp, #8]
 8006008:	4240      	negs	r0, r0
 800600a:	7013      	strb	r3, [r2, #0]
 800600c:	4e6b      	ldr	r6, [pc, #428]	; (80061bc <_printf_i+0x208>)
 800600e:	270a      	movs	r7, #10
 8006010:	e04f      	b.n	80060b2 <_printf_i+0xfe>
 8006012:	2a73      	cmp	r2, #115	; 0x73
 8006014:	d074      	beq.n	8006100 <_printf_i+0x14c>
 8006016:	d808      	bhi.n	800602a <_printf_i+0x76>
 8006018:	2a6f      	cmp	r2, #111	; 0x6f
 800601a:	d01f      	beq.n	800605c <_printf_i+0xa8>
 800601c:	2a70      	cmp	r2, #112	; 0x70
 800601e:	d1e0      	bne.n	8005fe2 <_printf_i+0x2e>
 8006020:	2220      	movs	r2, #32
 8006022:	6809      	ldr	r1, [r1, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	6022      	str	r2, [r4, #0]
 8006028:	e003      	b.n	8006032 <_printf_i+0x7e>
 800602a:	2a75      	cmp	r2, #117	; 0x75
 800602c:	d016      	beq.n	800605c <_printf_i+0xa8>
 800602e:	2a78      	cmp	r2, #120	; 0x78
 8006030:	d1d7      	bne.n	8005fe2 <_printf_i+0x2e>
 8006032:	0022      	movs	r2, r4
 8006034:	2178      	movs	r1, #120	; 0x78
 8006036:	3245      	adds	r2, #69	; 0x45
 8006038:	7011      	strb	r1, [r2, #0]
 800603a:	4e61      	ldr	r6, [pc, #388]	; (80061c0 <_printf_i+0x20c>)
 800603c:	e022      	b.n	8006084 <_printf_i+0xd0>
 800603e:	0025      	movs	r5, r4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	3542      	adds	r5, #66	; 0x42
 8006044:	1d11      	adds	r1, r2, #4
 8006046:	6019      	str	r1, [r3, #0]
 8006048:	6813      	ldr	r3, [r2, #0]
 800604a:	702b      	strb	r3, [r5, #0]
 800604c:	2301      	movs	r3, #1
 800604e:	e065      	b.n	800611c <_printf_i+0x168>
 8006050:	6808      	ldr	r0, [r1, #0]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	0669      	lsls	r1, r5, #25
 8006056:	d5d3      	bpl.n	8006000 <_printf_i+0x4c>
 8006058:	b200      	sxth	r0, r0
 800605a:	e7d1      	b.n	8006000 <_printf_i+0x4c>
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	1d08      	adds	r0, r1, #4
 8006062:	6018      	str	r0, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	062e      	lsls	r6, r5, #24
 8006068:	d505      	bpl.n	8006076 <_printf_i+0xc2>
 800606a:	4e54      	ldr	r6, [pc, #336]	; (80061bc <_printf_i+0x208>)
 800606c:	2708      	movs	r7, #8
 800606e:	2a6f      	cmp	r2, #111	; 0x6f
 8006070:	d01b      	beq.n	80060aa <_printf_i+0xf6>
 8006072:	270a      	movs	r7, #10
 8006074:	e019      	b.n	80060aa <_printf_i+0xf6>
 8006076:	066d      	lsls	r5, r5, #25
 8006078:	d5f7      	bpl.n	800606a <_printf_i+0xb6>
 800607a:	b280      	uxth	r0, r0
 800607c:	e7f5      	b.n	800606a <_printf_i+0xb6>
 800607e:	3145      	adds	r1, #69	; 0x45
 8006080:	4e4e      	ldr	r6, [pc, #312]	; (80061bc <_printf_i+0x208>)
 8006082:	700a      	strb	r2, [r1, #0]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	1d01      	adds	r1, r0, #4
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6019      	str	r1, [r3, #0]
 800608e:	0615      	lsls	r5, r2, #24
 8006090:	d521      	bpl.n	80060d6 <_printf_i+0x122>
 8006092:	07d3      	lsls	r3, r2, #31
 8006094:	d502      	bpl.n	800609c <_printf_i+0xe8>
 8006096:	2320      	movs	r3, #32
 8006098:	431a      	orrs	r2, r3
 800609a:	6022      	str	r2, [r4, #0]
 800609c:	2710      	movs	r7, #16
 800609e:	2800      	cmp	r0, #0
 80060a0:	d103      	bne.n	80060aa <_printf_i+0xf6>
 80060a2:	2320      	movs	r3, #32
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	439a      	bics	r2, r3
 80060a8:	6022      	str	r2, [r4, #0]
 80060aa:	0023      	movs	r3, r4
 80060ac:	2200      	movs	r2, #0
 80060ae:	3343      	adds	r3, #67	; 0x43
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	60a3      	str	r3, [r4, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	db58      	blt.n	800616c <_printf_i+0x1b8>
 80060ba:	2204      	movs	r2, #4
 80060bc:	6821      	ldr	r1, [r4, #0]
 80060be:	4391      	bics	r1, r2
 80060c0:	6021      	str	r1, [r4, #0]
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d154      	bne.n	8006170 <_printf_i+0x1bc>
 80060c6:	9d02      	ldr	r5, [sp, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d05a      	beq.n	8006182 <_printf_i+0x1ce>
 80060cc:	0025      	movs	r5, r4
 80060ce:	7833      	ldrb	r3, [r6, #0]
 80060d0:	3542      	adds	r5, #66	; 0x42
 80060d2:	702b      	strb	r3, [r5, #0]
 80060d4:	e055      	b.n	8006182 <_printf_i+0x1ce>
 80060d6:	0655      	lsls	r5, r2, #25
 80060d8:	d5db      	bpl.n	8006092 <_printf_i+0xde>
 80060da:	b280      	uxth	r0, r0
 80060dc:	e7d9      	b.n	8006092 <_printf_i+0xde>
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	680d      	ldr	r5, [r1, #0]
 80060e2:	1d10      	adds	r0, r2, #4
 80060e4:	6949      	ldr	r1, [r1, #20]
 80060e6:	6018      	str	r0, [r3, #0]
 80060e8:	6813      	ldr	r3, [r2, #0]
 80060ea:	062e      	lsls	r6, r5, #24
 80060ec:	d501      	bpl.n	80060f2 <_printf_i+0x13e>
 80060ee:	6019      	str	r1, [r3, #0]
 80060f0:	e002      	b.n	80060f8 <_printf_i+0x144>
 80060f2:	066d      	lsls	r5, r5, #25
 80060f4:	d5fb      	bpl.n	80060ee <_printf_i+0x13a>
 80060f6:	8019      	strh	r1, [r3, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	9d02      	ldr	r5, [sp, #8]
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	e04f      	b.n	80061a0 <_printf_i+0x1ec>
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	1d11      	adds	r1, r2, #4
 8006104:	6019      	str	r1, [r3, #0]
 8006106:	6815      	ldr	r5, [r2, #0]
 8006108:	2100      	movs	r1, #0
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	0028      	movs	r0, r5
 800610e:	f000 f859 	bl	80061c4 <memchr>
 8006112:	2800      	cmp	r0, #0
 8006114:	d001      	beq.n	800611a <_printf_i+0x166>
 8006116:	1b40      	subs	r0, r0, r5
 8006118:	6060      	str	r0, [r4, #4]
 800611a:	6863      	ldr	r3, [r4, #4]
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	2300      	movs	r3, #0
 8006120:	9a02      	ldr	r2, [sp, #8]
 8006122:	7013      	strb	r3, [r2, #0]
 8006124:	e03c      	b.n	80061a0 <_printf_i+0x1ec>
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	002a      	movs	r2, r5
 800612a:	9904      	ldr	r1, [sp, #16]
 800612c:	9803      	ldr	r0, [sp, #12]
 800612e:	9d05      	ldr	r5, [sp, #20]
 8006130:	47a8      	blx	r5
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d03e      	beq.n	80061b4 <_printf_i+0x200>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	079b      	lsls	r3, r3, #30
 800613a:	d415      	bmi.n	8006168 <_printf_i+0x1b4>
 800613c:	9b07      	ldr	r3, [sp, #28]
 800613e:	68e0      	ldr	r0, [r4, #12]
 8006140:	4298      	cmp	r0, r3
 8006142:	da39      	bge.n	80061b8 <_printf_i+0x204>
 8006144:	0018      	movs	r0, r3
 8006146:	e037      	b.n	80061b8 <_printf_i+0x204>
 8006148:	0022      	movs	r2, r4
 800614a:	2301      	movs	r3, #1
 800614c:	3219      	adds	r2, #25
 800614e:	9904      	ldr	r1, [sp, #16]
 8006150:	9803      	ldr	r0, [sp, #12]
 8006152:	9e05      	ldr	r6, [sp, #20]
 8006154:	47b0      	blx	r6
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	d02c      	beq.n	80061b4 <_printf_i+0x200>
 800615a:	3501      	adds	r5, #1
 800615c:	68e3      	ldr	r3, [r4, #12]
 800615e:	9a07      	ldr	r2, [sp, #28]
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	42ab      	cmp	r3, r5
 8006164:	dcf0      	bgt.n	8006148 <_printf_i+0x194>
 8006166:	e7e9      	b.n	800613c <_printf_i+0x188>
 8006168:	2500      	movs	r5, #0
 800616a:	e7f7      	b.n	800615c <_printf_i+0x1a8>
 800616c:	2800      	cmp	r0, #0
 800616e:	d0ad      	beq.n	80060cc <_printf_i+0x118>
 8006170:	9d02      	ldr	r5, [sp, #8]
 8006172:	0039      	movs	r1, r7
 8006174:	f7fa f84e 	bl	8000214 <__aeabi_uidivmod>
 8006178:	5c73      	ldrb	r3, [r6, r1]
 800617a:	3d01      	subs	r5, #1
 800617c:	702b      	strb	r3, [r5, #0]
 800617e:	2800      	cmp	r0, #0
 8006180:	d1f7      	bne.n	8006172 <_printf_i+0x1be>
 8006182:	2f08      	cmp	r7, #8
 8006184:	d109      	bne.n	800619a <_printf_i+0x1e6>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	07db      	lsls	r3, r3, #31
 800618a:	d506      	bpl.n	800619a <_printf_i+0x1e6>
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	6922      	ldr	r2, [r4, #16]
 8006190:	4293      	cmp	r3, r2
 8006192:	dc02      	bgt.n	800619a <_printf_i+0x1e6>
 8006194:	2330      	movs	r3, #48	; 0x30
 8006196:	3d01      	subs	r5, #1
 8006198:	702b      	strb	r3, [r5, #0]
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	1b5b      	subs	r3, r3, r5
 800619e:	6123      	str	r3, [r4, #16]
 80061a0:	9b05      	ldr	r3, [sp, #20]
 80061a2:	aa07      	add	r2, sp, #28
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	0021      	movs	r1, r4
 80061a8:	9b04      	ldr	r3, [sp, #16]
 80061aa:	9803      	ldr	r0, [sp, #12]
 80061ac:	f7ff fe94 	bl	8005ed8 <_printf_common>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d1b8      	bne.n	8006126 <_printf_i+0x172>
 80061b4:	2001      	movs	r0, #1
 80061b6:	4240      	negs	r0, r0
 80061b8:	b009      	add	sp, #36	; 0x24
 80061ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061bc:	08006c92 	.word	0x08006c92
 80061c0:	08006ca3 	.word	0x08006ca3

080061c4 <memchr>:
 80061c4:	b2c9      	uxtb	r1, r1
 80061c6:	1882      	adds	r2, r0, r2
 80061c8:	4290      	cmp	r0, r2
 80061ca:	d101      	bne.n	80061d0 <memchr+0xc>
 80061cc:	2000      	movs	r0, #0
 80061ce:	4770      	bx	lr
 80061d0:	7803      	ldrb	r3, [r0, #0]
 80061d2:	428b      	cmp	r3, r1
 80061d4:	d0fb      	beq.n	80061ce <memchr+0xa>
 80061d6:	3001      	adds	r0, #1
 80061d8:	e7f6      	b.n	80061c8 <memchr+0x4>

080061da <memcpy>:
 80061da:	2300      	movs	r3, #0
 80061dc:	b510      	push	{r4, lr}
 80061de:	429a      	cmp	r2, r3
 80061e0:	d100      	bne.n	80061e4 <memcpy+0xa>
 80061e2:	bd10      	pop	{r4, pc}
 80061e4:	5ccc      	ldrb	r4, [r1, r3]
 80061e6:	54c4      	strb	r4, [r0, r3]
 80061e8:	3301      	adds	r3, #1
 80061ea:	e7f8      	b.n	80061de <memcpy+0x4>

080061ec <memmove>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4288      	cmp	r0, r1
 80061f0:	d902      	bls.n	80061f8 <memmove+0xc>
 80061f2:	188b      	adds	r3, r1, r2
 80061f4:	4298      	cmp	r0, r3
 80061f6:	d303      	bcc.n	8006200 <memmove+0x14>
 80061f8:	2300      	movs	r3, #0
 80061fa:	e007      	b.n	800620c <memmove+0x20>
 80061fc:	5c8b      	ldrb	r3, [r1, r2]
 80061fe:	5483      	strb	r3, [r0, r2]
 8006200:	3a01      	subs	r2, #1
 8006202:	d2fb      	bcs.n	80061fc <memmove+0x10>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	5ccc      	ldrb	r4, [r1, r3]
 8006208:	54c4      	strb	r4, [r0, r3]
 800620a:	3301      	adds	r3, #1
 800620c:	429a      	cmp	r2, r3
 800620e:	d1fa      	bne.n	8006206 <memmove+0x1a>
 8006210:	e7f8      	b.n	8006204 <memmove+0x18>
	...

08006214 <_free_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	0005      	movs	r5, r0
 8006218:	2900      	cmp	r1, #0
 800621a:	d010      	beq.n	800623e <_free_r+0x2a>
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	da00      	bge.n	8006226 <_free_r+0x12>
 8006224:	18e4      	adds	r4, r4, r3
 8006226:	0028      	movs	r0, r5
 8006228:	f000 f8d4 	bl	80063d4 <__malloc_lock>
 800622c:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <_free_r+0x90>)
 800622e:	6813      	ldr	r3, [r2, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <_free_r+0x2c>
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	6014      	str	r4, [r2, #0]
 8006238:	0028      	movs	r0, r5
 800623a:	f000 f8cc 	bl	80063d6 <__malloc_unlock>
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	42a3      	cmp	r3, r4
 8006242:	d909      	bls.n	8006258 <_free_r+0x44>
 8006244:	6821      	ldr	r1, [r4, #0]
 8006246:	1860      	adds	r0, r4, r1
 8006248:	4283      	cmp	r3, r0
 800624a:	d1f3      	bne.n	8006234 <_free_r+0x20>
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	1841      	adds	r1, r0, r1
 8006252:	6021      	str	r1, [r4, #0]
 8006254:	e7ee      	b.n	8006234 <_free_r+0x20>
 8006256:	0013      	movs	r3, r2
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	2a00      	cmp	r2, #0
 800625c:	d001      	beq.n	8006262 <_free_r+0x4e>
 800625e:	42a2      	cmp	r2, r4
 8006260:	d9f9      	bls.n	8006256 <_free_r+0x42>
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	1858      	adds	r0, r3, r1
 8006266:	42a0      	cmp	r0, r4
 8006268:	d10b      	bne.n	8006282 <_free_r+0x6e>
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	1809      	adds	r1, r1, r0
 800626e:	1858      	adds	r0, r3, r1
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	4282      	cmp	r2, r0
 8006274:	d1e0      	bne.n	8006238 <_free_r+0x24>
 8006276:	6810      	ldr	r0, [r2, #0]
 8006278:	6852      	ldr	r2, [r2, #4]
 800627a:	1841      	adds	r1, r0, r1
 800627c:	6019      	str	r1, [r3, #0]
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	e7da      	b.n	8006238 <_free_r+0x24>
 8006282:	42a0      	cmp	r0, r4
 8006284:	d902      	bls.n	800628c <_free_r+0x78>
 8006286:	230c      	movs	r3, #12
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	e7d5      	b.n	8006238 <_free_r+0x24>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	1860      	adds	r0, r4, r1
 8006290:	4282      	cmp	r2, r0
 8006292:	d103      	bne.n	800629c <_free_r+0x88>
 8006294:	6810      	ldr	r0, [r2, #0]
 8006296:	6852      	ldr	r2, [r2, #4]
 8006298:	1841      	adds	r1, r0, r1
 800629a:	6021      	str	r1, [r4, #0]
 800629c:	6062      	str	r2, [r4, #4]
 800629e:	605c      	str	r4, [r3, #4]
 80062a0:	e7ca      	b.n	8006238 <_free_r+0x24>
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	200004b4 	.word	0x200004b4

080062a8 <_malloc_r>:
 80062a8:	2303      	movs	r3, #3
 80062aa:	b570      	push	{r4, r5, r6, lr}
 80062ac:	1ccd      	adds	r5, r1, #3
 80062ae:	439d      	bics	r5, r3
 80062b0:	3508      	adds	r5, #8
 80062b2:	0006      	movs	r6, r0
 80062b4:	2d0c      	cmp	r5, #12
 80062b6:	d21e      	bcs.n	80062f6 <_malloc_r+0x4e>
 80062b8:	250c      	movs	r5, #12
 80062ba:	42a9      	cmp	r1, r5
 80062bc:	d81d      	bhi.n	80062fa <_malloc_r+0x52>
 80062be:	0030      	movs	r0, r6
 80062c0:	f000 f888 	bl	80063d4 <__malloc_lock>
 80062c4:	4a25      	ldr	r2, [pc, #148]	; (800635c <_malloc_r+0xb4>)
 80062c6:	6814      	ldr	r4, [r2, #0]
 80062c8:	0021      	movs	r1, r4
 80062ca:	2900      	cmp	r1, #0
 80062cc:	d119      	bne.n	8006302 <_malloc_r+0x5a>
 80062ce:	4c24      	ldr	r4, [pc, #144]	; (8006360 <_malloc_r+0xb8>)
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <_malloc_r+0x36>
 80062d6:	0030      	movs	r0, r6
 80062d8:	f000 f86a 	bl	80063b0 <_sbrk_r>
 80062dc:	6020      	str	r0, [r4, #0]
 80062de:	0029      	movs	r1, r5
 80062e0:	0030      	movs	r0, r6
 80062e2:	f000 f865 	bl	80063b0 <_sbrk_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	d12b      	bne.n	8006342 <_malloc_r+0x9a>
 80062ea:	230c      	movs	r3, #12
 80062ec:	0030      	movs	r0, r6
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	f000 f871 	bl	80063d6 <__malloc_unlock>
 80062f4:	e003      	b.n	80062fe <_malloc_r+0x56>
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	dadf      	bge.n	80062ba <_malloc_r+0x12>
 80062fa:	230c      	movs	r3, #12
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	2000      	movs	r0, #0
 8006300:	bd70      	pop	{r4, r5, r6, pc}
 8006302:	680b      	ldr	r3, [r1, #0]
 8006304:	1b5b      	subs	r3, r3, r5
 8006306:	d419      	bmi.n	800633c <_malloc_r+0x94>
 8006308:	2b0b      	cmp	r3, #11
 800630a:	d903      	bls.n	8006314 <_malloc_r+0x6c>
 800630c:	600b      	str	r3, [r1, #0]
 800630e:	18cc      	adds	r4, r1, r3
 8006310:	6025      	str	r5, [r4, #0]
 8006312:	e003      	b.n	800631c <_malloc_r+0x74>
 8006314:	684b      	ldr	r3, [r1, #4]
 8006316:	428c      	cmp	r4, r1
 8006318:	d10d      	bne.n	8006336 <_malloc_r+0x8e>
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	0030      	movs	r0, r6
 800631e:	f000 f85a 	bl	80063d6 <__malloc_unlock>
 8006322:	0020      	movs	r0, r4
 8006324:	2207      	movs	r2, #7
 8006326:	300b      	adds	r0, #11
 8006328:	1d23      	adds	r3, r4, #4
 800632a:	4390      	bics	r0, r2
 800632c:	1ac3      	subs	r3, r0, r3
 800632e:	d0e7      	beq.n	8006300 <_malloc_r+0x58>
 8006330:	425a      	negs	r2, r3
 8006332:	50e2      	str	r2, [r4, r3]
 8006334:	e7e4      	b.n	8006300 <_malloc_r+0x58>
 8006336:	6063      	str	r3, [r4, #4]
 8006338:	000c      	movs	r4, r1
 800633a:	e7ef      	b.n	800631c <_malloc_r+0x74>
 800633c:	000c      	movs	r4, r1
 800633e:	6849      	ldr	r1, [r1, #4]
 8006340:	e7c3      	b.n	80062ca <_malloc_r+0x22>
 8006342:	2303      	movs	r3, #3
 8006344:	1cc4      	adds	r4, r0, #3
 8006346:	439c      	bics	r4, r3
 8006348:	42a0      	cmp	r0, r4
 800634a:	d0e1      	beq.n	8006310 <_malloc_r+0x68>
 800634c:	1a21      	subs	r1, r4, r0
 800634e:	0030      	movs	r0, r6
 8006350:	f000 f82e 	bl	80063b0 <_sbrk_r>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d1db      	bne.n	8006310 <_malloc_r+0x68>
 8006358:	e7c7      	b.n	80062ea <_malloc_r+0x42>
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	200004b4 	.word	0x200004b4
 8006360:	200004b8 	.word	0x200004b8

08006364 <_realloc_r>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	0007      	movs	r7, r0
 8006368:	000d      	movs	r5, r1
 800636a:	0016      	movs	r6, r2
 800636c:	2900      	cmp	r1, #0
 800636e:	d105      	bne.n	800637c <_realloc_r+0x18>
 8006370:	0011      	movs	r1, r2
 8006372:	f7ff ff99 	bl	80062a8 <_malloc_r>
 8006376:	0004      	movs	r4, r0
 8006378:	0020      	movs	r0, r4
 800637a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800637c:	2a00      	cmp	r2, #0
 800637e:	d103      	bne.n	8006388 <_realloc_r+0x24>
 8006380:	f7ff ff48 	bl	8006214 <_free_r>
 8006384:	0034      	movs	r4, r6
 8006386:	e7f7      	b.n	8006378 <_realloc_r+0x14>
 8006388:	f000 f826 	bl	80063d8 <_malloc_usable_size_r>
 800638c:	002c      	movs	r4, r5
 800638e:	42b0      	cmp	r0, r6
 8006390:	d2f2      	bcs.n	8006378 <_realloc_r+0x14>
 8006392:	0031      	movs	r1, r6
 8006394:	0038      	movs	r0, r7
 8006396:	f7ff ff87 	bl	80062a8 <_malloc_r>
 800639a:	1e04      	subs	r4, r0, #0
 800639c:	d0ec      	beq.n	8006378 <_realloc_r+0x14>
 800639e:	0029      	movs	r1, r5
 80063a0:	0032      	movs	r2, r6
 80063a2:	f7ff ff1a 	bl	80061da <memcpy>
 80063a6:	0029      	movs	r1, r5
 80063a8:	0038      	movs	r0, r7
 80063aa:	f7ff ff33 	bl	8006214 <_free_r>
 80063ae:	e7e3      	b.n	8006378 <_realloc_r+0x14>

080063b0 <_sbrk_r>:
 80063b0:	2300      	movs	r3, #0
 80063b2:	b570      	push	{r4, r5, r6, lr}
 80063b4:	4c06      	ldr	r4, [pc, #24]	; (80063d0 <_sbrk_r+0x20>)
 80063b6:	0005      	movs	r5, r0
 80063b8:	0008      	movs	r0, r1
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	f7ff fb46 	bl	8005a4c <_sbrk>
 80063c0:	1c43      	adds	r3, r0, #1
 80063c2:	d103      	bne.n	80063cc <_sbrk_r+0x1c>
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d000      	beq.n	80063cc <_sbrk_r+0x1c>
 80063ca:	602b      	str	r3, [r5, #0]
 80063cc:	bd70      	pop	{r4, r5, r6, pc}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	20000688 	.word	0x20000688

080063d4 <__malloc_lock>:
 80063d4:	4770      	bx	lr

080063d6 <__malloc_unlock>:
 80063d6:	4770      	bx	lr

080063d8 <_malloc_usable_size_r>:
 80063d8:	1f0b      	subs	r3, r1, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	1f18      	subs	r0, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	da01      	bge.n	80063e6 <_malloc_usable_size_r+0xe>
 80063e2:	580b      	ldr	r3, [r1, r0]
 80063e4:	18c0      	adds	r0, r0, r3
 80063e6:	4770      	bx	lr

080063e8 <_init>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr

080063f4 <_fini>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr
